<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式系统中userId的生成</title>
      <link href="/2024/11/02/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADuserId%E7%9A%84%E7%94%9F%E6%88%90/"/>
      <url>/2024/11/02/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADuserId%E7%9A%84%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1>userId生成的策略类型</h1><p>目前常见的<code>userId</code>生成策略主要有：</p><ul><li>数据库自增id</li><li><code>UUID</code></li><li>雪花算法</li></ul><h2 id="数据库自增id">数据库自增id</h2><p>简单明了，使用数据库中的主键自增即可实现</p><p><strong>优点在于：</strong></p><ul><li>自动自增，可以作为索引提升数据库的查询效率</li><li>节省磁盘空间，相较于其他两种策略可以节省大量空间</li><li>查询、写入效率高</li></ul><p><strong>缺点在于：</strong></p><ul><li>在导入数据时可能存在id重复的问题</li><li>不适应与分布式架构，在该中存在id重复的问题</li><li>无法进行分表，拆表等操作，与分布式的缺陷类似</li></ul><h2 id="UUID">UUID</h2><p><strong><code>UUID(Universally Unique Identifier)</code></strong>：它是由一组32个十六进制数字组成的字符串，总共分为无端，每段之间用连字符(-)隔开，包括连字符在内共36个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成UUID</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID.toString()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>UUID基于硬件地址(MAC地址)、时间戳和随机因子来生成Id</p></blockquote><p><strong>优势在于：</strong></p><ul><li>几乎不可能重复，可以用于分布式系统</li><li>具有唯一性、高性能和高可用的特点</li><li>本地生成</li></ul><p><strong>缺点在于：</strong></p><ul><li>产生的值较长，足足有36个字符</li><li>ID完全随机，没有任何顺序可言</li><li>可读性差，且ID不具有任何意义</li><li>字符串类型读写效率差</li></ul><h2 id="雪花算法-Snowflake-生成ID">雪花算法(Snowflake)生成ID</h2><p><code>Snowflake</code>，雪花算法是由<code>Twitter</code>开源的分布式ID生成算法，以划分命名空间的方式将 <code>64-bit</code>位分割成多个部分，每个部分代表不同的含义。而 <code>Java</code>中<code>64bit</code>的整数是<code>Long</code>类型，所以在 <code>Java</code> 中 <code>SnowFlake</code> 算法生成的 <code>ID</code> 就是 <code>long</code> 来存储的。</p><ul><li>第<code>1位</code>占用<code>1bit</code>，其值始终是<code>0</code>，可看做是符号位不使用。</li><li>第<code>2位</code>开始的<code>41位</code>是时间戳，<code>41-bit</code>位可表示<code>2^41</code>个数，每个数代表毫秒，那么雪花算法可用的时间年限是<code>(1L&lt;&lt;41)/(1000L360024*365)=69 </code>年的时间。</li><li>中间的<code>10-bit位</code>可表示机器数，即<code>2^10 = 1024</code>台机器，但是一般情况下我们不会部署这么台机器。如果我们对<code>IDC（互联网数据中心）</code>有需求，还可以将 <code>10-bit </code>分 <code>5-bit</code> 给 <code>IDC</code>，分<code>5-bit</code>给工作机器。这样就可以表示<code>32</code>个<code>IDC</code>，每个<code>IDC</code>下可以有32台机器，具体的划分可以根据自身需求定义。</li><li>最后<code>12-bit位</code>是自增序列，可表示<code>2^12 = 4096</code>个数。</li></ul><blockquote><p>这样的划分之后相当于在一毫秒一个数据中心的一台机器上可产生4096个有序的不重复的<code>ID</code>。但是我们 <code>IDC</code> 和机器数肯定不止一个，所以毫秒内能生成的有序ID数是翻倍的。</p></blockquote><p><strong>优点在于：</strong></p><ul><li>生成的<code>ID</code>全局唯一</li><li>分布式算法，可以在多台机器上生成<code>ID</code></li><li>生成的<code>ID</code>为<code>64位</code>整数，<code>Long</code>类型，读写效率高</li></ul><p><strong>缺点在于：</strong></p><ul><li>依赖机器时钟：雪花算法使用了时间戳作为生成<code>ID</code>的一部分，因此对于分布式系统来说，各个机器的时钟需要保持同步，否则可能会导致生成重复的<code>ID</code>。</li><li>有限的容量：雪花算法中的机器<code>ID</code>和序列号都是固定长度的，因此在极端情况下，可能会达到容量上限，无法继续生成唯一的<code>ID</code>。</li><li>不适合特定场景（安全）：雪花算法生成的<code>ID</code>是递增的，如果对于一些需要保密性的场景，可能会暴露一些敏感信息，例如系统的使用频率和规模。</li></ul><blockquote><p>改进的方法：百度 <code>UidGenerator</code> 和 美团分布式<code>ID</code>生成系统 <code>Leaf</code> 中<code>snowflake</code>模式都是在 snowflake 的基础上演进出来的</p></blockquote><h1>关于 百度-UidGenerator</h1><p><code>UidGenerator</code>是<code>Java</code>实现的, 基于<code>Snowflake</code>算法的<code>唯一ID生成器</code>。<br><code>UidGenerator</code>以组件形式工作在应用项目中, 支持自定义<code>workerId</code>位数和初始化策略, 从而适用于<code>docker</code>等虚拟化环境下实例自动重启、漂移等场景。<br>在实现上, <code>UidGenerator</code>通过借用未来时间来解决<code>sequence</code>天然存在的并发限制; 采用<code>RingBuffer</code>来缓存已生成的<code>UID</code>, 并行化<code>UID</code>的生产和消费, 同时对<code>CacheLine</code>补齐，避免了由<code>RingBuffer</code>带来的硬件级「伪共享」问题. 最终单机QPS可达<code>600万</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringBoot整合UidGenerator</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;defaultUidGenerator&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultUidGenerator <span class="title function_">defaultUidGenerator</span><span class="params">(DisposableWorkerIdAssigner disposableWorkerIdAssigner)</span> &#123;</span><br><span class="line">        <span class="type">DefaultUidGenerator</span> <span class="variable">uidGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultUidGenerator</span>();</span><br><span class="line">        uidGenerator.setWorkerIdAssigner(disposableWorkerIdAssigner);</span><br><span class="line">        uidGenerator.setTimeBits(<span class="number">29</span>);</span><br><span class="line">        uidGenerator.setWorkerBits(<span class="number">21</span>);</span><br><span class="line">        uidGenerator.setSeqBits(<span class="number">13</span>);</span><br><span class="line">        uidGenerator.setEpochStr(<span class="string">&quot;2016-09-20&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> uidGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;cachedUidGenerator&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CachedUidGenerator <span class="title function_">cachedUidGenerator</span><span class="params">(DisposableWorkerIdAssigner disposableWorkerIdAssigner)</span> &#123;</span><br><span class="line">        <span class="type">CachedUidGenerator</span> <span class="variable">uidGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachedUidGenerator</span>();</span><br><span class="line">        uidGenerator.setWorkerIdAssigner(disposableWorkerIdAssigner);</span><br><span class="line">        uidGenerator.setTimeBits(<span class="number">29</span>);</span><br><span class="line">        uidGenerator.setWorkerBits(<span class="number">21</span>);</span><br><span class="line">        uidGenerator.setSeqBits(<span class="number">13</span>);</span><br><span class="line">        uidGenerator.setEpochStr(<span class="string">&quot;2016-09-20&quot;</span>);</span><br><span class="line">        uidGenerator.setBoostPower(<span class="number">3</span>);</span><br><span class="line">        uidGenerator.setPaddingFactor(<span class="number">50</span>);</span><br><span class="line">        uidGenerator.setScheduleInterval(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// uidGenerator.setRejectedPutBufferHandler(...); // 根据需求设置拒绝策略</span></span><br><span class="line">        <span class="comment">// uidGenerator.setRejectedTakeBufferHandler(...); // 根据需求设置拒绝策略</span></span><br><span class="line">        <span class="keyword">return</span> uidGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DisposableWorkerIdAssigner <span class="title function_">disposableWorkerIdAssigner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DisposableWorkerIdAssigner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>本文参考：</strong></p><ul><li><a href="https://juejin.cn/post/7406997325716291595?searchId=20241102211023FA3766D00942C4BE78D1#heading-13">(十一)漫谈分布式之分布式ID篇：UUID、雪花算法、ID生成器、号段模式尽收囊中！</a></li><li><a href="https://juejin.cn/post/7317518562083029030?searchId=20241102204634C0D989FE9C621DBDEA70#heading-1">高并发系统-分布式唯一ID生成（五）-百度UidGenerator</a></li><li><a href="https://juejin.cn/post/7317214007573512243#heading-3">高并发系统-分布式唯一ID生成（四）-雪花算法Snowflake</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装docker</title>
      <link href="/2024/10/27/ubuntu%E5%AE%89%E8%A3%85docker/"/>
      <url>/2024/10/27/ubuntu%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1>Ubuntu安装Docker</h1><p><a href="https://docs.docker.com/engine/install/ubuntu/">Docker官方文档</a></p><h2 id="卸载旧版docker">卸载旧版docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done</span><br></pre></td></tr></table></figure><h3 id="补充知识">补充知识</h3><table><thead><tr><th>apt-get</th><th>apt</th><th>功能</th></tr></thead><tbody><tr><td>apt-get</td><td>apt</td><td>安装软件包</td></tr><tr><td>apt-get remove</td><td>apt remove</td><td>删除软件包</td></tr><tr><td>apt-get remove</td><td>apt remove</td><td>更换所有包</td></tr><tr><td>apt-get purge</td><td>apt purge</td><td>移除软件包及配置文件</td></tr><tr><td>apt-get upgrade</td><td>apt upgrade</td><td>更新所有软件包（自动处理依赖项）</td></tr><tr><td>apt-get autoremove</td><td>apt autoremove</td><td>自动删除不需要的包</td></tr><tr><td>apt-get dist-upgrade</td><td>apt full-upgrade</td><td>在升级软件包时自动处理依赖关系</td></tr><tr><td>apt-cache search</td><td>apt search</td><td>搜索应用程序</td></tr><tr><td>apt-cache show</td><td>apt show</td><td>显示装细节</td></tr></tbody></table><h2 id="手动安装Docker">手动安装Docker</h2><h3 id="1-更新软件包">1. 更新软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="2-安装必要的包-允许apt通过https使用仓库">2. 安装必要的包(允许apt通过https使用仓库)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install ca-certificates curl</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br></pre></td></tr></table></figure><h3 id="3-添加Docker官方的GPG密钥">3.添加Docker官方的GPG密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure><h3 id="4-添加Docker仓库到APT源">4.添加Docker仓库到APT源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>) stable<span class="string">&quot; | \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure><h3 id="5-更新软件包">5. 更新软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="6-安装dockerengine">6.安装dockerengine</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><blockquote><p>如果安装特定版本则使用下面的命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">要安装特定版本的Docker Engine，请首先列出 存储库中的可用版本：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">List the available versions:</span></span><br><span class="line">apt-cache madison docker-ce | awk &#x27;&#123; print $3 &#125;&#x27;</span><br><span class="line">5:27.1.1-1~ubuntu.24.04~noble</span><br><span class="line">5:27.1.0-1~ubuntu.24.04~noble</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择所需的版本并安装：</span></span><br><span class="line">VERSION_STRING=5:27.1.1-1~ubuntu.24.04~noble</span><br><span class="line">sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="7-验证是否安装成功">7.验证是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="自动安装">自动安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><h1>删除主机上的映像、容器、卷或自定义配置文件 不会自动删除。要删除所有映像、容器和卷，请执行以下操作</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack相关知识</title>
      <link href="/2023/06/28/webpack%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/06/28/webpack%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客是为了加深对于<code>webpack</code>的理解</p></blockquote><h1>webpack的作用是什么？</h1><p>前端网页功能丰富、现如今<code>SPA（Single Page Web Application 单页面应用）</code>技术大量应用， <code>JavaScript</code> 的复杂的增加，以及 <code>Scss</code> 、 <code>Less</code> 和 <code>Typescript</code> 的编译工作都需要 <code>webpack</code> 来解决处理。</p><h1>webpack的工作原理</h1><p><code>webpack</code> 是一个模块打包工具，它主要做以下工作：</p><ul><li>分析项目的结构、找到需要的 <code>JavaScript</code> 模块</li><li>将非 <code>JavaScript</code> 的文件（ <code>Scss</code> 、 <code>Less</code> 和 <code>Typescript</code> 等）转换为合适的格式，让浏览器执行</li></ul><h1>webpack的打包原理</h1><p>webpack 将一切都视为模块，无论是 <code>JavaScript</code> 、 <code>Css</code> 、 <code>HTML</code> 和 <code>Image</code> 图片资源等等都可以相互引用，通过 <code>entry.js</code> 对所有依赖的文件进行追踪，将各个模块通过 <code>loader</code> 和 <code>plugins</code> 处理进行打包。</p><h1>webpack的核心概念</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL/TSL及openssl的使用</title>
      <link href="/2023/06/24/openssl%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/06/24/openssl%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>一、什么是HTTPS？</h1><p><code>HTTPS</code>，全称为 <code>Hypertext Transfer Protocol Secure</code>，是一种通过加密通道传输数据的安全协议。它是 <code>HTTP</code> 协议的安全版本，用于在 Web 浏览器和 <code>Web</code> 服务器之间进行安全的数据传输。</p><p><code>HTTPS</code> 在传输过程中使用了 <code>SSL（Secure Sockets Layer）</code>或 <code>TLS（Transport Layer Security）</code>协议来加密数据，确保敏感信息在传输过程中不会被窃取或篡改。</p><h1>二、HTTP的存在的问题已经HTTPS如何解决？</h1><p><strong>HTTP存在的问题：</strong></p><ul><li>明文传输，内容可能被盗用</li><li>不进行通信方的验证，有可能遭遇伪装</li><li>无法验证报文的完整性，请求报文可能被篡改</li></ul><p><strong>HTTPS的解决方案：</strong></p><ul><li>进行加密处理</li><li>进行身份校验</li><li>进行完整性校验</li></ul><blockquote><p><code>HTTPS</code> = <code>HTTP</code> + <code>TSL/SSL</code></p></blockquote><h1>三、什么是SSL/TLS</h1><p><code>TLS（Transport Layer Security）</code>和 <code>SSL（Secure Sockets Layer）</code>是用于保护网络通信的安全协议。它们都提供了加密和认证机制，用于确保数据传输的机密性和完整性。<br>SSL 是最早的安全协议，而 <code>TLS</code> 是在 <code>SSL</code> 的基础上发展起来的。目前广泛使用的版本是 <code>TLS 1.2</code> 和 <code>TLS 1.3</code>。<code>TLS 1.3</code> 是最新的协议版本，在安全性、性能和功能方面有一些改进。</p><p><strong><code>TLS</code> 和 <code>SSL</code> 主要用于以下两个方面：</strong></p><ul><li>加密通信：<code>TLS/SSL</code> 使用加密算法来对数据进行加密，防止第三方截获和窃听通信内容。它可以确保数据在传输过程中的隐私性。</li><li>身份认证：<code>TLS/SSL</code> 还提供了身份验证机制，用于确认通信双方的身份，并确保数据只发送到正确的接收方。这可以防止恶意用户冒充其他用户或服务器。</li></ul><blockquote><p><code>SSL</code> 是最早的用来做<code>https</code>，<code>TLS</code> 是<code>SSL</code>升级版 提高了安全性 并解决了，<code>SSL</code>存在的一些安全性问题，<code>SSl/TLS</code> 工作原理类似,<code>TLS/SSL</code>主要在应用层和传输层之间作用</p></blockquote><h1>四、常见的加密方式</h1><ul><li>对称加密<br>常见的算法有：<code>AES</code> <code>DES</code> 加密</li></ul><blockquote><p>发送端：<code>AES算法 + 密钥（今生永相随）+ 明文（吃面） -&gt; XMZSXMZS==</code></p><p>接收端：<code>AES + 密钥（今生永相随）+ 密文（ XMZSXMZS==） -&gt; 吃面</code></p></blockquote><ul><li>非对称加密</li></ul><p>常见的算法有：<code>RSA</code> <code>DSA</code> 加密</p><blockquote><p>发送端：<code>RSA算法 + 公钥 +明文（吃面） -&gt; XMZSXMZS==</code></p><p>接收端：<code>RAS + 私钥 +密文（ XMZSXMZS==） -&gt; 吃面</code></p></blockquote><h1>五、openSSL生成私钥</h1><p>在 <code>SSL/TLS</code> 加密通信中，一般需要使用三个文件来完成证书相关操作，即：</p><ul><li><p>私钥文件（例如 “private-key.pem”），用于对加密数据进行解密操作。</p></li><li><p>证书签名请求文件（例如 “certificate.csr”），用于向 <code>CA</code> 申请 S<code>SL/TLS</code> 证书签名。</p></li><li><p><code>SSL/TLS</code> 证书文件（例如 “certificate.pem”），用于对客户端发送的请求进行验证，以确保通信安全可靠。</p></li></ul><p>私钥文件用于对数据进行解密操作，保证了通信的机密性；证书签名请求文件包含了请求者的身份信息和公钥等信息，需要被发送给 <code>CA</code> 进行签名，从而获取有效的 <code>SSL/TLS</code> 证书；<code>SSL/TLS</code> 证书文件则包含了签名后的证书信息，被用于客户端和服务器之间的身份验证，以确保通信的安全性和可靠性。<br>通过使用这三个文件进行密钥交换和身份验证，<code>SSL/TLS</code> 可以实现加密通信以及抵御可能的中间人攻击，提高了通信的安全性和保密性。</p><p><strong>生成私命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genpkey -algorithm RSA -out private-key.pem -aes256</span><br></pre></td></tr></table></figure><p>参数说明：<br><code>openssl</code>: <code>OpenSSL</code> 命令行工具的名称。<br><code>genpkey</code>: 生成私钥的命令。<br><code>-algorithm RSA</code>: 指定生成 <code>RSA</code> 私钥。<br><code>-out private-key.pem</code>: 将生成的私钥保存为 <code>private-key.pem</code> 文件。<br><code>-aes256</code>: 为私钥添加 <code>AES 256</code> 位加密，以保护私钥文件不被未经授权的人访问。</p><blockquote><p>Enter PEM pass phrase 123 密码短语生成pem文件的时候需要</p></blockquote><p><strong>生成pem证书文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key private-key.pem -out certificate.csr</span><br></pre></td></tr></table></figure><p><code>req</code>: 表示使用 X.509 证书请求管理器 (Certificate Request Management) 功能模块。<br><code>-new</code>: 表示生成新的证书签名请求。<br><code>-key private-key.pem</code>: 表示使用指定的私钥文件 “private-key.pem” 来加密证书签名请求中的密钥对。<br><code>-out certificate.csr</code>: 表示输出生成的证书签名请求到文件 <code>certificate.csr</code> 中。该文件中包含了申请者提供的一些证书请求信息，例如公钥、授权主体的身份信息等。</p><blockquote><p>Country Name (2 letter code) []:CN  国家</p><p>State or Province Name (full name) []:BJ 省份</p><p>Locality Name (eg, city) []:BJ 城市</p><p>Organization Name (eg, company)ZMY 组织或者是个人</p><p>Organizational Unit Name (eg, section) []:XMKJ 机构名称</p><p>Common Name (eg, fully qualified host name) []:localhost 域名</p><p>Email Address []: 邮箱地址</p><p>Please enter the following ‘extra’ attributes</p><p>to be sent with your certificate request</p><p>A challenge password []:  密码加盐 XMZSXMZSXMZS</p></blockquote><p><strong>生成数字证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> certificate.csr -signkey private-key.pem -out certificate.pem</span><br></pre></td></tr></table></figure><p><code>x509</code>: 表示使用 <code>X.509</code> 证书管理器功能模块。<br><code>-req</code>: 表示从输入文件（这里为 “certificate.csr”）中读取证书签名请求数据。<br><code>-in certificate.csr</code>: 指定要读取的证书签名请求文件名。<br><code>-signkey private-key.pem</code>: 指定使用指定的私钥文件 “private-key.pem” 来进行签名操作。一般情况下，签名证书的私钥应该是和之前生成 CSR 的私钥对应的。<br><code>-out certificate.pem</code>: 表示将签名后的证书输出到文件 “certificate.pem” 中。该文件中包含了签名后的证书信息，包括签名算法、有效期、公钥、授权主体的身份信息等。</p><blockquote><p>Enter pass phrase for private-key.pem: 密码短语</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ服务异步通信</title>
      <link href="/2023/01/30/MQ%E6%9C%8D%E5%8A%A1%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/01/30/MQ%E6%9C%8D%E5%8A%A1%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1>服务异步通信</h1><h2 id="MQ的一些常见问题">MQ的一些常见问题</h2><ul><li>消息可靠性问题：如何确保发送的消息至少被消费一次</li><li>延迟消息问题：如何实现延迟消息投递</li><li>高可用问题：如何避免单点的MQ故障而导致的不可用问题</li><li>消息堆积问题：如何解决数百万消息堆积，无法及时消费的问题</li></ul><h2 id="消息可靠性问题">消息可靠性问题</h2><p>消息从生产者发送到<code>exchange</code>，再到<code>queue</code>，再到消费者，有哪些导致消息丢失的可能性?</p><ul><li>发送时丢失:<ul><li>生产者发送的消息未送达<code>exchange</code></li><li>消息到达exchange后未到达<code>queue</code></li></ul></li><li><code>MQ</code>宕机,<code>queue</code>将消息丢失</li><li><code>consumer</code>接收到消息后未消费就宕机</li></ul><h1>一 消息可靠性</h1><h2 id="1-生产者消息确认">1.生产者消息确认</h2><h3 id="生产者确认机制">生产者确认机制</h3><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功。结果有两种请求:</p><h2 id="2-消息持久化">2.消息持久化</h2><h2 id="3-消费者消息确认">3.消费者消息确认</h2><h2 id="4-消费失败重试机制">4.消费失败重试机制</h2><h1>二 死信交换机</h1><h1>三 惰性队列</h1><h1>四 MQ集群</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="/2023/01/28/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/01/28/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1>分布式事务 seata</h1><h2 id="事务的ACID原则">事务的ACID原则</h2><p><img src="https://qnyoss.lovehao.ren/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1_ACID%E5%8E%9F%E5%88%99.jpg" alt="ACID原则"></p><h2 id="分布式访问案例">分布式访问案例</h2><p>微服务下单业务，在下单时会调用订单服务，创建订单并写入数据库。然后订单服务调用账户服务和库存服务</p><ul><li>账户服务负责扣减用户余额</li><li>库存服务负责扣减商品库存</li></ul><h1>一 理论基础</h1><h2 id="1-CAP定理">1.CAP定理</h2><p>1998年，加州大学的计算机科学家Eric Brewer提出，分布式系统有三个指标：</p><ul><li>Consistency (一致性)</li><li>Availability (可用性)</li><li>Partition tolerance (分区容错性)</li></ul><h3 id="CAP定理-Consistency">CAP定理-Consistency</h3><p>Consistency (一致性)︰用户访问分布式系统中的任意节点，得到的数据必须一致</p><h3 id="CAP定理-Availability">CAP定理-Availability</h3><p>Availability (可用性)∶用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝</p><h3 id="CAP定理-Partition">CAP定理-Partition</h3><p>Partition(分区)∶因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区</p><p>Tolerance(容错)∶在集群出现分区时，整个系统也要持续对外提供服务</p><h2 id="2-BASE理论">2.BASE理论</h2><p>BASE理论是对CAP的一种解决思路，包含三个思想:</p><ul><li>Basically Available (基本可用)︰分布式系统在出现故障时，允许损失部分可用性，即保证核心可用</li><li>Soft State（软状态)∶在一定时间内，允许出现中间状态，比如临时的不一致状态</li><li>Eventually Consistent(最终一致性)∶虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致</li></ul><p>而分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论:</p><ul><li>AP模式:各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致</li><li>CP模式:各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态</li></ul><h3 id="分布式事务模型">分布式事务模型</h3><p>解决分布式事务，各个子系统之间必须能感知到彼此的事务状态，才能保证状态一致，因此需要一个事务协调者来协调每一个事务的参与者（子系统事务)。</p><h1>二 Seata架构</h1><p>Seata是2019年1月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p><p>官网地址: <a href="http://seata.io">http://seata.io</a>，其中的文档、博客中提供了大量的使用说明、源码分析。</p><h2 id="1-Seata架构">1.Seata架构</h2><p>Seata事务管理中有三个重要的角色:</p><ul><li>TC(Transaction Coordinator)-事务协调者∶维护全局和分支事务的状态，协调全局事务提交或回滚。TM(Transaction Manager)-事务管理器:定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li>TM(Transaction Manager)-事务管理器:定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li>RM(Resource Manager)-资源管理器:管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。<br><img src="https://qnyoss.lovehao.ren/blog/Seata_Seata%E6%9E%B6%E6%9E%84.jpg" alt="Seata架构"></li></ul><p>Seata提供了四种不同的分布式事务解决方案:</p><ul><li>XA模式:强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式:最终一致的分阶段事务模式，有业务侵入</li><li>AT模式:最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式:长事务模式，有业务侵入</li></ul><h2 id="2-部署TC服务">2.部署TC服务</h2><h3 id="1-下载">(1)下载</h3><p>首先我们要下载seata-server包，地址在<a href="http://seata.io/zh-cn/blog/download.html">http</a><a href="http://seata.io/zh-cn/blog/download.html">://seata.io/zh-cn/blog/download</a><a href="http://seata.io/zh-cn/blog/download.html">.</a><a href="http://seata.io/zh-cn/blog/download.html">html</a></p><h3 id="2-解压">(2)解压</h3><p>在非中文目录解压缩这个zip包，其目录结构如下：</p><h3 id="3-修改配置">(3)修改配置</h3><p>修改conf目录下的registry.conf文件：</p><p>内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # seata tc 服务注册到 nacos的服务名称，可以自定义</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;seata-tc-server&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;DEFAULT_GROUP&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;SH&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"><span class="comment">  # 配置nacos地址等信息</span></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">dataId</span> = <span class="string">&quot;seataServer.properties&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-在nacos添加配置">(4)在nacos添加配置</h3><p>特别注意，为了让tc服务的集群可以共享配置，我们选择了nacos作为统一配置中心。因此服务端配置文件seataServer.properties文件需要在nacos中配好。</p><p>格式如下：</p><p>配置内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据存储方式，db代表数据库</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">123</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 事务、日志等配置</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 客户端与服务端传输方式</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"># 关闭metrics功能，提高性能</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure><p>==其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。==</p><h3 id="5-创建数据库表">(5)创建数据库表</h3><p>特别注意：tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。</p><p>新建一个名为seata的数据库，运行课前资料提供的sql文件：</p><p>这些表主要记录全局事务、分支事务、全局锁信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 分支事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `branch_table`;</span><br><span class="line">CREATE TABLE `branch_table`  (</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NULL DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  INDEX `idx_xid`(`xid`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 全局事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `global_table`;</span><br><span class="line">CREATE TABLE `global_table`  (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NOT NULL,</span><br><span class="line">  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `timeout` int(11) NULL DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,</span><br><span class="line">  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><h3 id="6-启动TC服务">(6)启动TC服务</h3><p>进入bin目录，运行其中的seata-server.bat即可：</p><p>启动成功后，seata-server应该已经注册到nacos注册中心了。</p><p>打开浏览器，访问nacos地址：<a href="http://localhost:8848">http://localhost:8848</a>，然后进入服务列表页面，可以看到seata-tc-server的信息：</p><h2 id="3-微服务继承Seata">3.微服务继承Seata</h2><h3 id="1-首先引入依赖">(1)首先引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-然后，配置application-yml，让微服务通过注册中心找到seata-tc-server">(2)然后，配置application.yml，让微服务通过注册中心找到seata-tc-server</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure><h1>三 动手实践</h1><h2 id="1-XA模式原理">1.XA模式原理</h2><p><code>XA</code>规范是<code>x/Open</code>组织定义的分布式事务处理（DTP，Distributed Transaction Processing)标准，XA规范描述了全局的<code>TM</code>与局部的<code>RM</code>之间的接口，几乎所有主流的数据库都对<code>XA</code>规范提供了支持。</p><h3 id="seata的XA模式">seata的XA模式</h3><p><code>seata</code>的<code>xA</code>模式做了一些调整，但大体相似:<br><img src="https://qnyoss.lovehao.ren/blog/Seata_XA%E6%A8%A1%E5%BC%8F.jpg" alt="XA模式"><br><code>RM</code>一阶段的工作：</p><ul><li>注册分支事务到<code>TC</code></li><li>执行分支业务<code>sql</code>但不提交</li><li>报告执行状态到<code>TC</code></li></ul><p><code>TC</code>二阶段的工作:</p><ul><li><code>TC</code>检测各分支事务执行状态<ul><li>如果都成功，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务<code>RM</code>二阶段的工作</li></ul></li><li>接收<code>TC</code>指令，提交或回滚事务</li></ul><p><code>RM</code>二阶段的工作:</p><ul><li>接收<code>TC</code>指令，提交或回滚事务</li></ul><h3 id="实现XA模式">实现XA模式</h3><p><code>Seata</code>的<code>starter</code>已经完成了<code>XA</code>模式的自动装配，实现非常简单，步骤如下：</p><ul><li>1.修改<code>application.yml</code>文件(每个参与事务的微服务)，开启<code>XA</code>模式:</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure><ul><li>2.给发起全局事务的入口方法添加<code>@GlobalTransactional</code>注解，本例中是<code>OrderServicelmpl</code>中的<code>create</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.client.AccountClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.client.StorageClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.entity.Order;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> feign.FeignException;</span><br><span class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccountClient accountClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StorageClient storageClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderServiceImpl</span><span class="params">(AccountClient accountClient, StorageClient storageClient, OrderMapper orderMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountClient = accountClient;</span><br><span class="line">        <span class="built_in">this</span>.storageClient = storageClient;</span><br><span class="line">        <span class="built_in">this</span>.orderMapper = orderMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">create</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 扣用户余额</span></span><br><span class="line">            accountClient.deduct(order.getUserId(), order.getMoney());</span><br><span class="line">            <span class="comment">// 扣库存</span></span><br><span class="line">            storageClient.deduct(order.getCommodityCode(), order.getCount());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FeignException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;下单失败，原因:&#123;&#125;&quot;</span>, e.contentUTF8(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.contentUTF8(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.重启服务并测试</li></ul><h3 id="AT模式">AT模式</h3><p><code>AT</code>模式同样是分阶段提交的事务模型，不过缺弥补了<code>XA</code>模型中资源锁定周期过长的缺陷。<br><img src="https://qnyoss.lovehao.ren/blog/Seata_AT%E6%A8%A1%E5%BC%8F.jpg" alt="AT模式"><br>阶段一RM的工作:</p><ul><li>注册分支事务</li><li>记录undo-log(数据快照)</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作:</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作:</p><ul><li>根据undo-log恢复数据到更新前</li></ul><blockquote><p>全局锁:由TC记录当前正在操作某行数据的事务，该事务持有全局锁，具备执行权。 实现数据隔离</p></blockquote><h3 id="实现AT模式">实现AT模式</h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p><ul><li>1.修改<code>application.yml</code>文件(每个参与事务的微服务)，开启<code>AT</code>模式:</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span></span><br></pre></td></tr></table></figure><ul><li>2.给发起全局事务的入口方法添加<code>@GlobalTransactional</code>注解，本例中是<code>OrderServicelmpl</code>中的<code>create</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.client.AccountClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.client.StorageClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.entity.Order;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> feign.FeignException;</span><br><span class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 虎哥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccountClient accountClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StorageClient storageClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderServiceImpl</span><span class="params">(AccountClient accountClient, StorageClient storageClient, OrderMapper orderMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountClient = accountClient;</span><br><span class="line">        <span class="built_in">this</span>.storageClient = storageClient;</span><br><span class="line">        <span class="built_in">this</span>.orderMapper = orderMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">create</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 扣用户余额</span></span><br><span class="line">            accountClient.deduct(order.getUserId(), order.getMoney());</span><br><span class="line">            <span class="comment">// 扣库存</span></span><br><span class="line">            storageClient.deduct(order.getCommodityCode(), order.getCount());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FeignException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;下单失败，原因:&#123;&#125;&quot;</span>, e.contentUTF8(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.contentUTF8(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.重启服务并测试</li></ul><h2 id="3-TCC模式">3.TCC模式</h2><p><code>TCC</code>模式与<code>AT</code>模式非常相似，每阶段都是独立事务，不同的是<code>TCC</code>通过人工编码来实现数据恢复。需要实现三个方法:</p><ul><li><code>Try</code>:资源的检测和预留;</li><li><code>Confirm</code>:完成资源操作业务;要求<code>Try</code>成功<code>Confirm</code>一定要能成功。</li><li><code>Cancel</code>:预留资源释放，可以理解为<code>try</code>的反向操作。</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/Seata_TCC%E6%A8%A1%E5%BC%8F.jpg" alt="TCC模式"></p><h3 id="TCC的空回滚和业务悬挂">TCC的空回滚和业务悬挂</h3><p>当某分支事务的<code>try</code>阶段阻塞时，可能导致全局事务超时而触发二阶段的<code>cancel</code>操作。在未执行<code>try</code>操作时先执行了<code>cancel</code>操作，这时<code>cancel</code>不能做回滚，就是空回滚。</p><p>对于已经空回滚的业务，如果以后继续执行try，就永远不可能<code>confirm</code>或<code>cancel</code>，这就是业务悬挂。应当阻止执行空回滚后的<code>try</code>操作，避免悬挂</p><h2 id="4-Saga模式">4.Saga模式</h2><p><code>Saga</code>模式是<code>SEATA</code>提供的长事务解决方案。也分为两个阶段：</p><ul><li>一阶段:直接提交本地事务</li><li>二阶段:成功则什么都不做;失败则通过编写补偿业务来回滚</li></ul><p>Saga模式优点：</p><ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写<code>TCC</code>中的三个阶段，实现简单</li></ul><p>缺点:</p><ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h2 id="5-四种模式对比">5.四种模式对比</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>XA</code></th><th style="text-align:center"><code>AT</code></th><th style="text-align:center"><code>TCC</code></th><th style="text-align:center"><code>SAGA</code></th></tr></thead><tbody><tr><td style="text-align:center">一致性</td><td style="text-align:center">强一致</td><td style="text-align:center">弱一致</td><td style="text-align:center">弱一致</td><td style="text-align:center">最终一致</td></tr><tr><td style="text-align:center">隔离性</td><td style="text-align:center">完全隔离</td><td style="text-align:center">基于全局锁隔离</td><td style="text-align:center">基于资源预留隔离</td><td style="text-align:center">无隔离</td></tr><tr><td style="text-align:center">代码侵入</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">有，要编写三个接口</td><td style="text-align:center">有，要编写状态机和补偿业务</td></tr><tr><td style="text-align:center">性能</td><td style="text-align:center">差</td><td style="text-align:center">好</td><td style="text-align:center">非常好</td><td style="text-align:center">非常好</td></tr><tr><td style="text-align:center">场景</td><td style="text-align:center">对一致性、隔离性有高要求的业务</td><td style="text-align:center">基于关系型数据库的大多数分布式事务场景都可以</td><td style="text-align:center">对性能要求较高的事务；有非关系型数据库要参与的事务。</td><td style="text-align:center">业务流程长、业务流程多；参与者包含其它公司或遗留系统服务，无法提供TCC模式要求的三个接口</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter安装教程</title>
      <link href="/2023/01/28/JMeter%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/01/28/JMeter%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>下载JMeter</h1><h2 id="1-前期准备">1.前期准备</h2><p>具备<code>Java</code>的<code>JDK</code>环境（此处不详细介绍）</p><h2 id="2-下载JMeter">2.下载JMeter</h2><p>（一）进入<code>JMeter</code>的官网:<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a><br><img src="https://qnyoss.lovehao.ren/blog/JMeter_%E5%AE%98%E7%BD%91.jpg" alt="官网"><br>（二）点击<code>Down Load Release</code>:<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a><br><img src="https://qnyoss.lovehao.ren/blog/JMeter_%E4%B8%8B%E8%BD%BD.jpg" alt="下载"></p><blockquote><p>tips: Binaries是二进制可执行版本，已编译完成， Source是源代码版，需要自己编译</p></blockquote><p>（三）点击apache-jmeter-5.5.zip下载可执行压缩包<a href="https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.zip">apache-jmeter-5.5.zip</a></p><p>（四）下载速度较慢，等待下载完成</p><blockquote><p>建议清华镜像网站下载<a href="https://mirrors.tuna.tsinghua.edu.cn/">官网</a></p></blockquote><h2 id="2-配置环境变量">2.配置环境变量</h2><p>（一）在系统变量中新增变量<code>JMETER_HOME</code></p><p>变量名：【JMETER_HOME】</p><p>变量值：JMeter安装路径`</p><p><img src="https://qnyoss.lovehao.ren/blog/JMeter_%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FJMETER_HOME.jpg" alt="环境变量JMETER_HOME"></p><p>（二）编辑系统变量<code>CLASSPATH</code>。在<code>CLASSPATH</code>中增加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib\logkit-2.0.jar;</span><br></pre></td></tr></table></figure><p><img src="https://qnyoss.lovehao.ren/blog/JMeter_%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FCLASSPATH.jpg" alt="环境变量CLASSPATH"><br>（三）确定保存变量</p><h2 id="3-验证是否安装成功">3.验证是否安装成功</h2><p>（一）进入 JMeter安装路径\bin 双击运行<code>jmeter.bat</code>，出现页面后安装成功</p><p><img src="https://qnyoss.lovehao.ren/blog/JMeter_%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.jpg" alt="安装完成"></p><blockquote><p>tip: 在<code>Options</code>中可以设置语言和外观</p></blockquote><h2 id="修改配置">修改配置</h2><ul><li>中文编码</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The encoding to be used if none is provided (default ISO-8859-1)</span></span><br><span class="line"><span class="attr">sampleresult.default.encoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><ul><li>默认语言</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Preferred GUI language. Comment out to use the JVM default locale&#x27;s language.</span></span><br><span class="line"><span class="attr">language</span>=<span class="string">zh_CN</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压测工具 </tag>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel的知识</title>
      <link href="/2023/01/26/Sentinel%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/01/26/Sentinel%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1>一 Sentinel的知识</h1><h2 id="1-雪崩问题">1.雪崩问题</h2><p>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用，这就是雪崩。<br><img src="https://qnyoss.lovehao.ren/blog/Sentinel_%E9%9B%AA%E5%B4%A9%E9%97%AE%E9%A2%98.jpg" alt="雪崩问题"><br>解决方式：</p><ul><li>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</li><li>舱壁模式：限定每个业务能使用的线程数，避免耗尽整个<code>tomcat</code>的资源，因此也叫线程隔离</li><li>熔断降级：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求</li><li>流量控制：限制业务访问的QPS，避免服务因流量的突增而故障</li></ul><h2 id="2-服务保护技术对比">2.服务保护技术对比</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>Sentinel</code></th><th style="text-align:center"><code>Hystrix</code></th></tr></thead><tbody><tr><td style="text-align:center"><strong>隔离策略</strong></td><td style="text-align:center">信号量隔离</td><td style="text-align:center">线程池隔离/信号量隔离</td></tr><tr><td style="text-align:center"><strong>熔断降级策略</strong></td><td style="text-align:center">基于慢调用比例或异常比例</td><td style="text-align:center">基于失败比率</td></tr><tr><td style="text-align:center">实时指标实现</td><td style="text-align:center">滑动窗口</td><td style="text-align:center">滑动窗口(基于RxJava)</td></tr><tr><td style="text-align:center">规则配置</td><td style="text-align:center">支持多种数据源</td><td style="text-align:center">支持多种数据源</td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">多个扩展点</td><td style="text-align:center">插件的形式</td></tr><tr><td style="text-align:center">基于注解的支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center"><strong>限流</strong></td><td style="text-align:center">基于<code>QPS</code>，支持基于调用关系的限流</td><td style="text-align:center">有限的支持</td></tr><tr><td style="text-align:center"><strong>流量整形</strong></td><td style="text-align:center">支持慢启动、匀速排队模式</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">系统自适应保护</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center"><strong>控制台</strong></td><td style="text-align:center">开箱即用，可配置规则、查看秒级监控、机器发现等</td><td style="text-align:center">不完善</td></tr><tr><td style="text-align:center">常见框架的适配</td><td style="text-align:center"><code>Servlet</code>、<code>Spring cloud</code>、<code>Dubbo</code>、<code>gRPC</code>等</td><td style="text-align:center"><code>Servlet</code>、<code>Spring cloud Netflix</code></td></tr></tbody></table><h2 id="3-认识Sentinel">3.认识Sentinel</h2><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址: <a href="https://sentinelguard.io/zh-cn/index.htmlSentinel">https://sentinelguard.io/zh-cn/index.htmlSentinel</a></p><p>具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>: <code>Sentinel</code>承接了阿里巴巴近10年的双十一大促流量的核心场景，例如秒杀(即突发流量控制在系统容量可以承受的范围)、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>: <code>Sentinel</code>同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至500台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>: <code>Sentinel</code>提供开箱即用的与其它开源框架/库的整合模块，例如与<code>Spring Cloud</code>、<code>Dubbo</code>、<code>gRPC</code>的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入<code>Sentinel</code>。</li><li><strong>完善的SPI扩展点</strong>: <code>Sentinel</code>提供简单易用、完善的SPI扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>如果要修改<code>Sentinel</code>的默认端口、账户、密码，可以通过下列配置:</p><table><thead><tr><th style="text-align:center">配置项</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>server.port</code></td><td style="text-align:center"><code>8080</code></td><td style="text-align:center"><code>服务端口</code></td></tr><tr><td style="text-align:center"><code>sentinel.dashboard.auth.username</code></td><td style="text-align:center"><code>sentinel</code></td><td style="text-align:center"><code>默认用户名</code></td></tr><tr><td style="text-align:center"><code>sentinel.dashboard.auth.password</code></td><td style="text-align:center"><code>sentinel</code></td><td style="text-align:center"><code>默认密码</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar -Dserver.port=8090</span><br></pre></td></tr></table></figure><h2 id="4-微服务整合Sentinel">4.微服务整合Sentinel</h2><p>我们在<code>order-service</code>中整合<code>Sentinel</code>，并且连接<code>Sentinel</code>的控制台，步骤如下:</p><ul><li>1.引入sentinel依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.配置控制台地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure><ul><li>3.访问微服务的任意端点，触发<code>sentinel</code>监控</li></ul><h1>二 限流规则</h1><h2 id="1-簇点链路">1.簇点链路</h2><p><strong>簇点链路：</strong> 就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下<code>sentinel</code>会监控<code>SpringMVC</code>的每一个<code>端点(Endpoint)</code>，因此<code>SpringMVC</code>的每一个<code>端点（Endpoint)</code>就是调用链路中的一个资源。</p><p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则:</p><ul><li>点击资源<code>/order/&#123;orderld&#125;</code>后面的流控按钮，就可以弹出表单。表单中可以添加流控规则。</li></ul><h2 id="2-流控模式">2.流控模式</h2><p>在添加限流规则时，点击高级选项，可以把选择三种流控模式：</p><ul><li><code>直接</code>:统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li><code>关联</code>:统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li><code>链路</code>:统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul><h3 id="流控模式-关联">流控模式-关联</h3><p>关联模式:统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p>使用场景:比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><h3 id="流控模式-链路">流控模式-链路</h3><p>链路模式:只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p><h2 id="3-流控效果">3.流控效果</h2><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种:</p><ul><li><code>快速失败</code>:达到阈值后，新的请求会被立即拒绝并抛出<code>FlowExceptio</code>n异常。是默认的处理方式</li><li><code>warm up</code>:预热模式,对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值</li><li><code>排队等待</code>:让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</li></ul><h3 id="流控效果-warm-up">流控效果-warm up</h3><p><code>warm up</code>也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是<code>threshold / coldFactot</code>，持续指定时长后，逐渐提高到<code>threshold</code>值。而<code>coldFactor</code>的默认值是3.</p><h3 id="流控效果-排队等待">流控效果-排队等待</h3><p>当请求超过<code>QPS</code>阈值时，快速失败和<code>warm up</code>会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p><h2 id="4-热点参数限流">4.热点参数限流</h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过<code>QPS</code>阈值。而热点参数限流是分别统计<strong>参数值相同</strong>的请求，判断是否超过<code>QPS</code>阈值。</p><h1>三 隔离和降级</h1><p>虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了。</p><h2 id="1-Feign整合Sentinel">1.Feign整合Sentinel</h2><p><code>SpringCloud</code>中，微服务调用都是通过<code>Feign</code>来实现的，因此做客户端保护必须整合<code>Feign</code>和<code>Sentinel</code>。</p><ul><li>1.修改<code>OrderService</code>的<code>application.yml</code>文件，开启<code>Feign</code>的<code>Sentinel</code>功能</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的Sentinel功能</span></span><br></pre></td></tr></table></figure><ul><li>2.给<code>Feignclient</code>编写失败后的降级逻辑<ul><li>方式一:<code>FallbackClass</code>，无法对远程调用的异常做处理</li><li>方式二:<code>FallbackFactory</code>，可以对远程调用的异常做处理，我们选择这种</li></ul></li></ul><p>步骤一：在<code>feign-api</code>项目中定义类，实现<code>FallbackFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.feign.clients.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.UserClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询用户异常&quot;</span>, throwable);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤二：在<code>feign-api</code>项目中的<code>DefaultFeignConfiguration</code>类中将<code>UserClientFallbackFactory</code>注册为一个<code>Bean</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.feign.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;</span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">logLever</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallbackFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>步骤三：在<code>feign-api</code>项目中的<code>UserClient</code>接口中使用<code>UserClientFallbackFactory</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.feign.clients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-线程隔离">2.线程隔离</h2><p>线程隔离的两种实现方式：</p><ul><li>线程池隔离</li><li>信号量隔离（Sentinel默认采用）</li></ul><h3 id="线程池隔离">线程池隔离</h3><p>优点：</p><ul><li>支持主动超时</li><li>支持异步调用</li></ul><p>缺点：</p><ul><li>线程的额外开销比较大</li></ul><p>场景：低扇出</p><h3 id="信号量隔离">信号量隔离</h3><p>优点：</p><ul><li>轻量级，无额外开销</li></ul><p>缺点：</p><ul><li>不支持主动超时</li><li>不支持异步调用</li></ul><p>场景：高频调用，高扇出</p><h3 id="舱壁模式">舱壁模式</h3><p>在添加限流规则时，可以选择两种阈值类型:</p><ul><li><code>QPS</code>:就是每秒的请求数，在快速入门中已经演示过</li><li>线程数:是该资源能使用用的<code>tomcat</code>线程数的最大值。也就是通过限制线程数量，实现舱壁模式。</li></ul><h2 id="3-熔断降级">3.熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求;而当服务恢复时，断路器会放行访问该服务的请求。<br><img src="https://qnyoss.lovehao.ren/blog/Sentinel_%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7.jpg" alt="熔断降级"></p><p>熔断策略：</p><ul><li>慢调用</li><li>异常比例</li><li>异常数</li></ul><h3 id="熔断策略-慢调用">熔断策略-慢调用</h3><p>慢调用:业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。</p><h3 id="熔断策略-异常比例、异常数">熔断策略-异常比例、异常数</h3><p>异常比例或异常数:统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><h1>四 授权规则</h1><h2 id="1-授权规则">1.授权规则</h2><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><ul><li>白名单:来源（origin）在白名单内的调用者允许访问</li><li>黑名单:来源（origin）在黑名单内的调用者不允许访问</li></ul><p><code>Sentinel</code>是通过<code>RequestOriginParser</code>这个接口的<code>parseOrigin</code>来获取请求的来源的。</p><h2 id="2-自定义异常">2.自定义异常</h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现<code>BlockExceptionHandler</code>接口∶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>而<code>BlockException</code>包含很多个子类，分别对应不同的场景:</p><table><thead><tr><th style="text-align:center">异常</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>FlowException</code></td><td style="text-align:center">限流异常</td></tr><tr><td style="text-align:center"><code>ParamFlowException</code></td><td style="text-align:center">热点参数限流的异常</td></tr><tr><td style="text-align:center"><code>DegradeException</code></td><td style="text-align:center">降级异常</td></tr><tr><td style="text-align:center"><code>AuthorityException</code></td><td style="text-align:center">授权规则异常</td></tr><tr><td style="text-align:center"><code>systemBlockException</code></td><td style="text-align:center">系统规则异常</td></tr></tbody></table><h1>五 规则持久化</h1><h2 id="1-规则管理模式">1.规则管理模式</h2><p><code>Sentinel</code>的控制台规则管理有三种模式:</p><ul><li>原始模式: <code>Sentinel</code>的默认模式，将规则保存在内存，重启服务会丢失。</li><li>pull模式</li><li>push模式</li></ul><h3 id="规则管理模式-pull模式-不建议，存在时效性问题">规则管理模式-pull模式(不建议，存在时效性问题)</h3><p>pull模式:控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。<br><img src="https://qnyoss.lovehao.ren/blog/Sentinel_pull%E6%A8%A1%E5%BC%8F.jpg" alt="pull模式"></p><h3 id="规则管理模式-push模式">规则管理模式-push模式</h3><p>push模式:控制台将配置规则推送到远程配置中心，例如<code>Nacos</code>。<code>Sentinel</code>客户端监听<code>Nacos</code>，获取配置变更的推送消息，完成本地配置更新。<br><img src="https://qnyoss.lovehao.ren/blog/Sentinel_push%E6%A8%A1%E5%BC%8F.jpg" alt="push模式"></p><h2 id="3-push持久化">3.push持久化</h2><h3 id="1-引入依赖">1.引入依赖</h3><p>在order-service中引入sentinel监听nacos的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置nacos地址">2.配置nacos地址</h3><p>在order-service中的application.yml文件配置nacos地址及监听的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br></pre></td></tr></table></figure><p>SentinelDashboard默认不支持nacos的持久化，需要修改源码。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES高级应用</title>
      <link href="/2023/01/18/ES%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
      <url>/2023/01/18/ES%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1>一 数据聚合</h1><h2 id="1-聚合的种类">1. 聚合的种类</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html"><code>聚合(aggregations）</code></a>可以实现对文档数据的<strong>统计</strong>、<strong>分析</strong>、<strong>运算</strong>。聚合常见的有三类:</p><ul><li><code>桶（Bucket）集合</code>：用来对文档做分组<ul><li><code>TermAggregation</code>：按照文档字段值分组</li><li><code>Date Histogram</code>：按照日期阶梯分组，例如一周一组，一月一组</li></ul></li><li><code>度量(Metric）聚合</code>:用以计算一些值，比如:<strong>最大值</strong>、<strong>最小值</strong>、<strong>平均值</strong>等<ul><li><code>Avg</code>:求平均值</li><li><code>Max</code>:求最大值</li><li><code>Min</code>:求最小值</li><li><code>Stats</code>:同时求<code>max</code>、<code>min</code>、<code>avg</code>、<code>sum</code>等</li></ul></li><li><code>管道( pipeline)聚合</code>:其它聚合的结果为基础做聚合</li></ul><h2 id="2-DSL实现聚合">2. DSL实现聚合</h2><h3 id="DSL实现Bucket聚合">DSL实现Bucket聚合</h3><p>现在，我们要统计所有数据中的酒店品牌有几种，此时可以根据酒店品牌的名称做聚合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, # 设置size为0，结果中不包含文档，只包含聚合结果</span><br><span class="line">  &quot;aggs&quot;: &#123; # 定义聚合</span><br><span class="line">    &quot;brandAgg&quot;: &#123; # 聚合起个名字</span><br><span class="line">      &quot;terms&quot;: &#123; # 聚合的类型，按照品牌值聚合，所以选择term</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;, # 参与聚合的字段</span><br><span class="line">        &quot;size&quot;: 20 # 希望获取的聚合结果数量</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，<code>Bucket聚合</code>会统计<code>Bucket</code>内的文档数量，记为<code>_count</code>，并且按照<code>_count</code>降序排序。我们可以修改结果排序方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 聚合功能，自定义排序规则</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;brandAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;,</span><br><span class="line">        &quot;size&quot;: 20,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;_count&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，<code>Bucket聚合</code>是对索引库的所有文档做聚合，我们可以限定要聚合的文档范围，只要添加<code>query</code>条件即可;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 聚合功能，自定义排序规则</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;lte&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;brandAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;,</span><br><span class="line">        &quot;size&quot;: 20,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;_count&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DSL实现Metrics聚合">DSL实现Metrics聚合</h3><p>例如，我们要求获取每个品牌的用户评分的<strong>min</strong>、<strong>max</strong>、<strong>avg</strong>等值．</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 聚合功能，自定义排序规则</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;lte&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;brandAgg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;brand&quot;,</span><br><span class="line">        &quot;size&quot;: 20,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">         &quot;scoreAgg.avg&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;  # 是brands聚合的子聚合，也就是分组后对每组分别计算</span><br><span class="line">        &quot;scoreAgg&quot;: &#123; # 聚合名称</span><br><span class="line">          &quot;stats&quot;: &#123; # 聚合类型，这里stats可以计算min、max、avg等</span><br><span class="line">            &quot;field&quot;: &quot;score&quot; # 聚合字段，这里是score</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-RestAPI实现聚合">3. RestAPI实现聚合</h2><p>我们以品牌聚合为例，演示下<code>Java</code>的<code>RestClient</code>使用，先看请求组装:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAggregation</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备 request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1 设置size</span></span><br><span class="line">        request.source().size(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2.2 设置聚合</span></span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                .size(<span class="number">20</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4. 解析结果</span></span><br><span class="line">        System.out.println(response);</span><br><span class="line">        <span class="comment">// 解析聚合结果</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">        <span class="comment">// 4.1 根据名称获取聚合结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 获取buckets</span></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="comment">// 4.4 获取key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-案例-在IUserService中定义方法，实现对品牌、成熟、星级的聚合">1. 案例 在IUserService中定义方法，实现对品牌、成熟、星级的聚合</h3><p><strong>需求:</strong> 搜索页面的品牌、城市等信息不应该是在页面写死，而是通过聚合索引库中的酒店数据得来的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHotelService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Hotel&gt; &#123;</span><br><span class="line">    PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.mapper.HotelMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.geo.GeoPoint;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.DistanceUnit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.准备 request</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 设置size</span></span><br><span class="line">            request.source().size(<span class="number">0</span>);</span><br><span class="line">            buildAggregation(request);</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4. 解析结果</span></span><br><span class="line">            <span class="comment">// 解析聚合结果</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; brandList = getAggByName(aggregations, <span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;品牌&quot;</span>, brandList);</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; cityList = getAggByName(aggregations, <span class="string">&quot;cityAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;城市&quot;</span>, cityList);</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; starList = getAggByName(aggregations, <span class="string">&quot;starAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;星级&quot;</span>, starList);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getAggByName</span><span class="params">(Aggregations aggregations, String aggName)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1 根据名称获取聚合结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;aggName&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 获取buckets</span></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="comment">// 4.4 获取key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            brandList.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> brandList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildAggregation</span><span class="params">(SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2 设置聚合</span></span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建BooleanQuery</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 关键字搜索</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 条件过滤</span></span><br><span class="line">        <span class="comment">// 城市条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 星级条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>)&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders</span><br><span class="line">                    .rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 算分控制</span></span><br><span class="line">        <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">                QueryBuilders.functionScoreQuery(</span><br><span class="line">                        <span class="comment">// 原生查询 相关性算分</span></span><br><span class="line">                        boolQuery,</span><br><span class="line">                        <span class="comment">// function score 数组</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line"><span class="comment">//                                其中一个function score</span></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                        <span class="comment">// 过滤条件</span></span><br><span class="line">                                        QueryBuilders.termQuery(<span class="string">&quot;AD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                        <span class="comment">// 算分函数</span></span><br><span class="line">                                        ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">                                )</span><br><span class="line">                        &#125;);</span><br><span class="line">        request.source().query(functionScoreQueryBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 获取排序值</span></span><br><span class="line">            Object[] sortValues = hit.getSortValues();</span><br><span class="line">            <span class="keyword">if</span> (sortValues.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">sortValue</span> <span class="operator">=</span> sortValues[<span class="number">0</span>];</span><br><span class="line">                hotelDoc.setDistance(sortValue);</span><br><span class="line">            &#125;</span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-对接前端接口">2.对接前端接口</h3><p>前端页面会向服务端发起请求，查询品牌、城市、星级等字段的聚合结果:</p><p>可以知道请求参数与之前<code>search</code>时的<code>RequestParam</code>完全一致，这是在限定聚合时的文档范围。</p><p>例如:用户搜索“外滩”，价格在300~600，那聚合必须是在这个搜索条件基础上完成。</p><p>因此我们需要:</p><ul><li>1.编写<code>controller</code>接口，接收该请求</li><li>2.修改<code>IUserService#getFilters()</code>方法，添加<code>RequestParam参数</code></li><li>3.修改<code>getFilters</code>方法的业务，聚合时添加<code>query条件</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/filters&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getFilters</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.filters(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.mapper.HotelMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.geo.GeoPoint;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.DistanceUnit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.准备 request</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 query</span></span><br><span class="line">            buildBasicQuery(params, request);</span><br><span class="line">            <span class="comment">// 2.2 设置size</span></span><br><span class="line">            request.source().size(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 2.3 聚合</span></span><br><span class="line">            buildAggregation(request);</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4. 解析结果</span></span><br><span class="line">            <span class="comment">// 解析聚合结果</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; brandList = getAggByName(aggregations, <span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;品牌&quot;</span>, brandList);</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; cityList = getAggByName(aggregations, <span class="string">&quot;cityAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;城市&quot;</span>, cityList);</span><br><span class="line">            <span class="comment">// 4.1 根据名称，获取品牌结果</span></span><br><span class="line">            List&lt;String&gt; starList = getAggByName(aggregations, <span class="string">&quot;starAgg&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.4 放入map</span></span><br><span class="line">            result.put(<span class="string">&quot;星级&quot;</span>, starList);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getAggByName</span><span class="params">(Aggregations aggregations, String aggName)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1 根据名称获取聚合结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(aggName);</span><br><span class="line">        <span class="comment">// 4.2 获取buckets</span></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="comment">// 4.4 获取key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            brandList.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> brandList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildAggregation</span><span class="params">(SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2 设置聚合</span></span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建BooleanQuery</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 关键字搜索</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 条件过滤</span></span><br><span class="line">        <span class="comment">// 城市条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 星级条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>)&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders</span><br><span class="line">                    .rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 算分控制</span></span><br><span class="line">        <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">                QueryBuilders.functionScoreQuery(</span><br><span class="line">                        <span class="comment">// 原生查询 相关性算分</span></span><br><span class="line">                        boolQuery,</span><br><span class="line">                        <span class="comment">// function score 数组</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line"><span class="comment">//                                其中一个function score</span></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                        <span class="comment">// 过滤条件</span></span><br><span class="line">                                        QueryBuilders.termQuery(<span class="string">&quot;AD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                        <span class="comment">// 算分函数</span></span><br><span class="line">                                        ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">                                )</span><br><span class="line">                        &#125;);</span><br><span class="line">        request.source().query(functionScoreQueryBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 获取排序值</span></span><br><span class="line">            Object[] sortValues = hit.getSortValues();</span><br><span class="line">            <span class="keyword">if</span> (sortValues.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">sortValue</span> <span class="operator">=</span> sortValues[<span class="number">0</span>];</span><br><span class="line">                hotelDoc.setDistance(sortValue);</span><br><span class="line">            &#125;</span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>二 自动补全</h1><h2 id="1-安装拼音分词器">1. 安装拼音分词器</h2><p>要实现根据字母做补全，就必须对文档按照拼音分词。在GitHub上恰好有elasticsearch的拼音分词插件。<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">下载地址</a></p><p>安装方式与IK分词器一样，分三步:</p><ul><li>1.解压</li><li>2.上传到虚拟机中，elasticsearch的plugin目录</li><li>3.重启elasticseasch</li><li>4.测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: [&quot;如家酒店还不错&quot;],</span><br><span class="line">  &quot;analyzer&quot;: &quot;pinyin&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-配置拼音分词器">2.配置拼音分词器</h2><p><code>elasticsearch</code>中<code>分词器(analyzer)</code>的组成包含三部分：</p><ul><li><code>character filters</code>:在<code>tokenizer</code>之前对文本进行处理。例如删除字符、替换字符</li><li><code>tokenizer</code>：将文本按照一定的规则切割成<code>词条(term)</code>。例如keyword，就是不分词;还有ik_smart</li><li><code>tokenizer filter</code>:将<code>tokenizer</code>输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8.jpg" alt="自定义分词器"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">GET /test/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: [&quot;如家酒店还不错&quot;],</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_analyzer&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE /test</span><br><span class="line"></span><br><span class="line"># 自定义分词器</span><br><span class="line">PUT /test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;: &quot;py&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;py&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;pinyin&quot;,</span><br><span class="line">          &quot;keep_full_pinyin&quot;: false,</span><br><span class="line">          &quot;keep_joined_full_pinyin&quot;: true,</span><br><span class="line">          &quot;keep_original&quot;: true,</span><br><span class="line">          &quot;limit_first_letter_length&quot;: 16,</span><br><span class="line">          &quot;remove_duplicated_term&quot;: true,</span><br><span class="line">          &quot;none_chinese_pinyin_tokenize&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;my_analyzer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;狮子&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST /test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 2,</span><br><span class="line">  &quot;name&quot;: &quot;虱子&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST /test/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;掉入狮子笼咋办&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拼音分词器适合在创建倒排索引的时候使用，但不能在搜索的时候使用。</p><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E5%88%86%E8%AF%8D%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98.jpg" alt="分词器的问题"><br>因此字段在创建倒排索引时应该用my_analyzer分词器;字段在搜索时应该使用ik smart分词器;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test</span><br><span class="line"></span><br><span class="line"># 自定义分词器</span><br><span class="line">PUT /test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;: &quot;py&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;py&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;pinyin&quot;,</span><br><span class="line">          &quot;keep_full_pinyin&quot;: false,</span><br><span class="line">          &quot;keep_joined_full_pinyin&quot;: true,</span><br><span class="line">          &quot;keep_original&quot;: true,</span><br><span class="line">          &quot;limit_first_letter_length&quot;: 16,</span><br><span class="line">          &quot;remove_duplicated_term&quot;: true,</span><br><span class="line">          &quot;none_chinese_pinyin_tokenize&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;my_analyzer&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;狮子&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST /test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 2,</span><br><span class="line">  &quot;name&quot;: &quot;虱子&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST /test/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;掉入狮子笼咋办&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-completion-suggest-查询">3. completion suggest 查询</h2><p><code>elasticsearch</code>提供了<code>Completion Suggester</code>查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为提高补全查询的效率，对于文档中字段的类型有一些约束：</p><ul><li>参与补全查询的字段必须是completion类型</li><li>字段的内容一般是用来不全的多个词条形成的数组</li></ul><h3 id="查询语法">查询语法</h3><p>查询语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 自动补全库</span><br><span class="line">PUT /test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;completion&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 示例数据</span><br><span class="line">POST /test2/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: [&quot;Sony&quot;, &quot;WH-1000XM3&quot;]</span><br><span class="line">&#125;</span><br><span class="line">POST /test2/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: [&quot;SK-II&quot;, &quot;PITERA&quot;]</span><br><span class="line">&#125;</span><br><span class="line">POST /test2/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: [&quot;Nintendo&quot;, &quot;switch&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 自动补全查询</span><br><span class="line">GET /test2/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;titleSuggest&quot;: &#123;</span><br><span class="line">      &quot;text&quot;: &quot;s&quot;,  # 关键字</span><br><span class="line">      &quot;completion&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;title&quot;, # 补全字段</span><br><span class="line">        &quot;skip_duplicates&quot;: true, # 跳过重复的</span><br><span class="line">        &quot;size&quot;: 10 # 获取前10条结果</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动补全案例：实现hotel索引库的自动补全、拼音搜索功能">自动补全案例：实现hotel索引库的自动补全、拼音搜索功能</h3><p>实现思路如下:</p><ul><li>1．修改<code>hotel索引库</code>结构，设置自定义拼音分词器</li><li>2．修改索引库的<code>name</code>、<code>all</code>字段，使用自定义分词器</li><li>3.索引库添加一个新字段<code>suggestion</code>，类型为<code>completion</code>类型，使用自定义的分词器</li><li>4.给<code>HotelDoc</code>类添加<code>suggestion</code>字段，内容包含<code>brand</code>、<code>business</code></li><li>5.重新导入数据到<code>hotel</code>库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">DELETE /hotel</span><br><span class="line"></span><br><span class="line"># 查看酒店数据结构</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;text_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;: &quot;py&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;completion_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;keyword&quot;,</span><br><span class="line">          &quot;filter&quot;: &quot;py&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;py&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;pinyin&quot;,</span><br><span class="line">          &quot;keep_full_pinyin&quot;: false,</span><br><span class="line">          &quot;keep_joined_full_pinyin&quot;: true,</span><br><span class="line">          &quot;keep_original&quot;: true,</span><br><span class="line">          &quot;limit_first_letter_length&quot;: 16,</span><br><span class="line">          &quot;remove_duplicated_term&quot;: true,</span><br><span class="line">          &quot;none_chinese_pinyin_tokenize&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;text_analyzer&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: [</span><br><span class="line">          &quot;all&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: [</span><br><span class="line">          &quot;all&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;suggestion&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;completion&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;completion_analyzer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; suggestion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.business.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// business 有多个值，需要切割</span></span><br><span class="line">            String[] arr = <span class="built_in">this</span>.business.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="comment">// 添加元素</span></span><br><span class="line">            <span class="built_in">this</span>.suggestion = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="built_in">this</span>.suggestion.add(<span class="built_in">this</span>.brand);</span><br><span class="line">            Collections.addAll(<span class="built_in">this</span>.suggestion, arr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.suggestion = Arrays.asList(<span class="built_in">this</span>.brand, <span class="built_in">this</span>.business);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;suggest&quot;: &#123;</span><br><span class="line">    &quot;suggestion&quot;: &#123;</span><br><span class="line">      &quot;text&quot;: &quot;sd&quot;,</span><br><span class="line">      &quot;completion&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;suggestion&quot;,</span><br><span class="line">        &quot;skip_duplicates&quot;: true,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RestAPI实现自动补全">RestAPI实现自动补全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.suggest.Suggest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.suggest.SuggestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.suggest.SuggestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.suggest.completion.CompletionSuggestion;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSuggest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        request.source().suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line">                <span class="string">&quot;suggestions&quot;</span>,</span><br><span class="line">                SuggestBuilders.completionSuggestion(<span class="string">&quot;suggestion&quot;</span>)</span><br><span class="line">                .prefix(<span class="string">&quot;h&quot;</span>)</span><br><span class="line">                .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">                .size(<span class="number">10</span>)</span><br><span class="line">        ));</span><br><span class="line">        <span class="comment">// 3. 发起请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4. 解析结果</span></span><br><span class="line">        <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line">        <span class="comment">// 根据补全查询名称，获取补全结果</span></span><br><span class="line">        <span class="type">CompletionSuggestion</span> <span class="variable">suggestions</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;suggestions&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 获取options</span></span><br><span class="line">        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>三 数据同步</h1><h2 id="1-数据同步问题分析">1. 数据同步问题分析</h2><p><code>elasticsearch</code>中的酒店数据来自于<code>mysql</code>数据库，因此<code>mysql</code>数据发生改变时，elasticsearch也必须跟着改变，这个就是<code>elasticsearch</code>与<code>mysql</code>之间的数据同步。</p><blockquote><p>在微服务中，负责酒店管理（操作mysql )的业务与负责酒店搜索（操作elasticsearch )的业务可能在两个不同的微服务上，数据同步该如何实现呢?</p></blockquote><h3 id="方案一-同步调用">方案一 同步调用</h3><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5_%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8.jpg" alt="数据同步_同步调用"></p><h3 id="方案二-异步通知">方案二 异步通知</h3><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5_%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8.jpg" alt="数据同步_异步调用"></p><h3 id="方案三-监听binlog">方案三 监听binlog</h3><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5_%E7%9B%91%E5%90%ACbinlog.jpg" alt="数据同步_监听binlog"></p><h2 id="2-案例：利用MQ实现mysql与elasticsearch数据同步">2. 案例：利用MQ实现mysql与elasticsearch数据同步</h2><p>当酒店数据发生增、删、改时，要求对<code>elasticsearch</code>中数据也要完成相同操作。</p><p>步骤:</p><ul><li>导入课前资料提供的hotel-admin项目，启动并测试酒店数据的<code>CRUD</code>。</li><li>声明<code>exchange</code>、<code>queue</code>、<code>RoutingKey</code></li><li>在hotel-admin中的增、删、改业务中完成消息发送</li><li>在hotel-demo中完成消息监听，并更新<code>elasticsearch</code>中数据·</li><li>启动并测试数据同步功能</li></ul><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8099</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/heima?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.127</span><span class="number">.132</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.itcast.hotel.pojo</span></span><br></pre></td></tr></table></figure><p><strong>定义<code>MQ</code>的常量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConsistants</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;hotel.topic&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听新增和修改的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert.queue&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听删除的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete.queue&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或修改的 RoutingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或修改的 RoutingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>进行队列相关配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.MqConsistants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(MqConsistants.HOTEL_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">insertQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConsistants.HOTEL_INSERT_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">deleteQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConsistants.HOTEL_DELETE_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">insertQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConsistants.HOTEL_INSERT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">deleteQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConsistants.HOTEL_DELETE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConsistants;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidParameterException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Hotel <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">hotelList</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;1&quot;)</span> Integer size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        Page&lt;Hotel&gt; result = hotelService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, size));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(result.getTotal(), result.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveHotel</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">        hotelService.save(hotel);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hotel.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidParameterException</span>(<span class="string">&quot;id不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hotelService.updateById(hotel);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        hotelService.removeById(id);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_DELETE_KEY, id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>监听</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConsistants;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelListener</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店新增或修改的业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConsistants.HOTEL_INSERT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelInsertOrUpdate</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        hotelService.insertById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店删除的业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConsistants.HOTEL_DELETE_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelDelete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        hotelService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者端三层结构处理(首先需要配置AMQP)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHotelService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Hotel&gt; &#123;</span><br><span class="line">    PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">(RequestParams params)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">getSuggestions</span><span class="params">(String prefix)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConsistants;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidParameterException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Hotel <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">hotelList</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;1&quot;)</span> Integer size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        Page&lt;Hotel&gt; result = hotelService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, size));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(result.getTotal(), result.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveHotel</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">        hotelService.save(hotel);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hotel.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidParameterException</span>(<span class="string">&quot;id不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hotelService.updateById(hotel);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        hotelService.removeById(id);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConsistants.HOTEL_EXCHANGE, MqConsistants.HOTEL_DELETE_KEY, id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>四 elasticsearch集群</h1><h2 id="1-搭建ES集群">1.搭建ES集群</h2><p>单机的<code>elasticsearch</code>做数据存储，必然面临两个问题:海量数据存储问题、单点故障问题。</p><ul><li>海量数据存储问题:将索引库从逻辑上拆分为N个分片(shard)，存储到多个节点</li><li>单点故障问题:将分片数据在不同节点备份( replica )</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerCompose</span></span><br><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: elasticsearch:<span class="number">7.12</span>.<span class="number">1</span></span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - data01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9200</span>:<span class="number">9200</span></span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: elasticsearch:<span class="number">7.12</span>.<span class="number">1</span></span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - data02:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9201</span>:<span class="number">9200</span></span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: elasticsearch:<span class="number">7.12</span>.<span class="number">1</span></span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - data03:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9202</span>:<span class="number">9200</span></span><br><span class="line">volumes:</span><br><span class="line">  data01:</span><br><span class="line">    driver: local</span><br><span class="line">  data02:</span><br><span class="line">    driver: local</span><br><span class="line">  data03:</span><br><span class="line">    driver: local</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>es运行需要修改一些Linux系统权限，修改<code>/etc/sysctl.config</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>然后执行命令，让配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="2-集群状态监控">2.集群状态监控</h2><p><code>kibana</code>可以监控<code>es</code>集群，不过新版本需要依赖<code>es</code>的<code>x-pack</code> 功能，配置比较复杂。</p><p>这里推荐使用<code>cerebro</code>来监控<code>es</code>集群状态，官方网址：<a href="https://github.com/lmenezes/cerebro">https://github.com/lmenezes/cerebro</a></p><p>双击其中的<code>cerebro.bat</code>文件即可启动服务。</p><p>访问<code>http://localhost:9000</code> 即可进入管理界面</p><p>输入你的<code>elasticsearch</code>的任意节点的地址和端口</p><p>绿色的条，代表集群处于绿色（健康状态）。</p><h2 id="3-索引库分片">3.索引库分片</h2><p>在DevTools中输入指令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /itcast</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="comment">// 分片数量</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span> <span class="comment">// 副本数量</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// mapping映射定义 ...</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-ES集群的节点角色">4.ES集群的节点角色</h2><p><code>elasticsearch</code>中集群节点有不同的职责划分:</p><table><thead><tr><th style="text-align:center">节点类型</th><th style="text-align:center">参数配置</th><th style="text-align:center">默认值</th><th style="text-align:center">节点职责</th></tr></thead><tbody><tr><td style="text-align:center"><code>master eligible</code></td><td style="text-align:center"><code>node.master</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center">备选主节点:主节点可以管理和记录集群状态、决定分片在哪个节点、处理创建和删除索引库的请求</td></tr><tr><td style="text-align:center"><code>data</code></td><td style="text-align:center"><code>node.data</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center">数据节点:存储数据、搜索、聚合、<code>CRUD</code></td></tr><tr><td style="text-align:center"><code>ingest</code></td><td style="text-align:center"><code>node.ingest</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center">数据存储之前的预处理</td></tr><tr><td style="text-align:center"><code>coordinating</code></td><td style="text-align:center">上面3个参数都为<code>false</code>则为<code>coordinating</code>节点</td><td style="text-align:center">无</td><td style="text-align:center">路由请求到其它节点合并其它节点处理的结果，返回给用户</td></tr></tbody></table><h3 id="ES集群的分布式查询">ES集群的分布式查询</h3><p><code>elasticsearch</code>中的每个节点角色都有自己不同的职责，因此建议集群部署时，每个节点都有独立的角色。<br><img src="https://qnyoss.lovehao.ren/blog/ES_%E9%9B%86%E7%BE%A4%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9F%A5%E8%AF%A2.jpg" alt="集群的分布式查询"></p><h3 id="ES集群的脑裂">ES集群的脑裂</h3><p>默认情况下，每个节点都是<code>master eligible</code>节点，因此一旦<code>master</code>节点宕机，其它候选节点会选举一个成为主节点。当主节点与其他节点网络故障时，可能发生脑裂问题。</p><p>为了避免脑裂，需要要求选票超过<code>( eligible节点数量+1)/2</code>才能当选为主，因此<code>eligible</code>节点数量最好是奇数。对应配置项是<code>discovery.zen.minimum_master_nodes</code>，在<code>es7.0</code>以后，已经成为默认配置，因此一般不会发生脑裂问题</p><h2 id="5-ES集群的分布式新增和查询">5.ES集群的分布式新增和查询</h2><h3 id="ES集群的分布式存储">ES集群的分布式存储</h3><p>当新增文档时，应该保存到不同分片，保证数据均衡，那么<code>coordinating node</code>如何确定数据该存储到哪个分片呢?</p><p>elasticsearch会通过hash算法来计算文档应该存储到哪个分片:</p><p>shard = hash(_routing)% number_of_shards</p><p>说明:</p><ul><li><code>_routing</code>默认是文档的<code>id</code></li><li>算法与分片数量有关，因此索引库一旦创建，分片数量不能修改!</li></ul><h3 id="ES集群的分布式查询-2">ES集群的分布式查询</h3><p><code>elasticsearch</code>的查询分成两个阶段:</p><ul><li><code>scatter phase</code>:分散阶段，<code>coordinating node</code>会把请求分发到每一个分片</li><li><code>gather phase</code>:聚集阶段，<code>coordinating node</code>汇总<code>data node</code>的搜索结果，并处理为最终结果集返回给用户</li></ul><h2 id="6-ES集群的故障转移">6.ES集群的故障转移</h2><p>集群的<code>master</code>节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。<br><img src="https://qnyoss.lovehao.ren/blog/ES_%E9%9B%86%E7%BE%A4%E7%9A%84%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB.jpg" alt="集群的故障转移"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSL查询文档</title>
      <link href="/2023/01/14/DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/"/>
      <url>/2023/01/14/DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1>一 DSL查询分类及基本语法</h1><h2 id="1-DSL-Query的分类">1.DSL Query的分类</h2><p><code>Elasticsearch</code>提供了基于<code>JSON</code>的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html"><code>DSL(Domain Specific Language)</code></a>来定义查询。常见的查询类型包括：</p><ul><li>查询所有：查询出所有数据，一般测试试用。例如：match_all</li><li>全文检索（full text）查询：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如<ul><li>match_query</li><li>multi_match_query</li></ul></li><li>精确查询：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：<ul><li>ids</li><li>range</li><li>term</li></ul></li><li>地理(geo)查询：根据经纬度查询。例如：<ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li>复合（compound）查询：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：<ul><li>bool</li><li>function_score</li></ul></li></ul><h2 id="2-查询所有">2.查询所有</h2><p>查询的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;查询类型&quot;: &#123;</span><br><span class="line">      &quot;查询条件&quot;: &quot;条件值&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 查询所有</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-全文检索查询">3.全文检索查询</h2><p><code>全文检索查询</code>，会对用户输入内容分词，常用于搜索框搜索：</p><p><code>match查询</code>：全文检索查询的一种，会对用户输入内容分词，然后去倒排索引库检索，语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;FIELD&quot;: &quot;TEXT&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># match查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;all&quot;: &quot;如家外滩&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>multi_match</code>查询：与match查询类似，只不过允许同时查询多个字段语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;TEXT&quot;</span><br><span class="line">      &quot;FIELD&quot;: [&quot;FIELD1&quot;, &quot;FIELD2&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># multi_match查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;外滩如家&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;brand&quot;, &quot;name&quot;, &quot;business&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-精确查询">4.精确查询</h2><p><code>精确查询</code>一般是查找keyword、数值、日期、boolean等类型字段。所以不会对搜索条件分词。常见的有：</p><ul><li><code>term</code>：根据词条精确值查询</li><li><code>range</code>：根据值的范围查询</li></ul><p>语法如下：</p><p><strong>term查询：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;FIELD&quot;; &#123;</span><br><span class="line">        &#x27;value&#x27;: &quot;VALUE&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># term查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;上海&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>range查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;FIELD&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 10,</span><br><span class="line">        &quot;lte&quot;: 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># range查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 100,</span><br><span class="line">        &quot;lte&quot;: 300</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-地理查询">5. 地理查询</h2><p>根据<code>经纬度查询</code>。常见的使用场景包括：</p><ul><li><code>携程</code>：搜索我附近的酒店</li><li><code>滴滴</code>：搜索我附近的出租车</li><li><code>微信</code>：附近的人</li></ul><p><strong>种类：</strong></p><ul><li><code>geo_bounding_box</code>：查询<code>geo_point</code>值落在某个矩形范围的所以文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;geo_bounding_box&quot;: &#123;</span><br><span class="line">      &quot;FILED&quot;: &#123;</span><br><span class="line">        &quot;top_left&quot;: &#123;</span><br><span class="line">          &quot;lat&quot;: 31.1,</span><br><span class="line">          &quot;lon&quot;: 121.5</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;bottom_right&quot;: &#123;</span><br><span class="line">          &quot;lat&quot;: 30.9,</span><br><span class="line">          &quot;lon&quot;: 121.7</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>geo_distance</code>：查询到指定中心点小于某个距离值的所有文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;geo_distance&quot;: &#123;</span><br><span class="line">      &quot;distance&quot;: &quot;15km&quot;,</span><br><span class="line">      &quot;FIELD&quot;: &quot;31.21,121.5&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># distance查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;geo_distance&quot;: &#123;</span><br><span class="line">      &quot;distance&quot;: &quot;15km&quot;,</span><br><span class="line">      &quot;location&quot;: &quot;31.21,121.5&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-复合查询">6. 复合查询</h2><p><code>复合（compound）查询</code>：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑，例如：</p><ul><li><code>function_score</code>：算分函数查询，可以控制文档相关性算分，控制文档排名。例如百度竞价</li></ul><p>相关性算分：当我们利用<code>match查询</code>时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p><p>TF(词条频率) = 词条出现次数 / 文档中词条总数</p><blockquote><p>TF-IDF算法</p><p>IDF(逆文档频率) = log(文档总数 / 包含词条的文档总数)</p><p>score = 求和（TF(词条频率)） * IDF (逆文档频率)</p></blockquote><blockquote><p>BM25: Score(Q,d) = 求和(log(1 + ((N - n + 0.5) / (n + 0.5)))) * f(i) / (f(i) + k1 * (1 - b + b * (dl/avgdl)))</p></blockquote><p>使用<code>function score query</code>。可以修改文档的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &#123;&quot;match&quot;: &#123;&quot;all&quot;: &quot;外滩&quot;&#125;&#125;, # 原始查询条件，搜索文档并根据相关性打分（query score）</span><br><span class="line">        &quot;functions&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;&quot;term&quot;: &#123;&quot;id&quot;: &quot;1&quot;&#125;&#125;, # 过滤条件，复合条件的文档才会被重新算分</span><br><span class="line">            &quot;weight&quot;: 10 # 算分函数，算分函数的结果称为function score，将来会与query score运算，得到新算分，常见的算分函数有： 1 weight 给一个常量值，作为函数结果（function score）2.field_value_factor:用文档中的某个字段值作为函数结果 3.random_score:随机生成一个值，作为函数结果 4.script_score:自定义计算公式，公式结果作为函数结果 </span><br><span class="line">          &#125;  </span><br><span class="line">        ],</span><br><span class="line">        &quot;boost_mode&quot;: &quot;multiply&quot; # 加权模式，定义function score与query score的运算方式，包括: 1. multiply:两者相乘。默认就是这个 2.replace:用function score替换query score。 3. 其它:sum.avg.max、min</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong> 给&quot;如家&quot;这个品牌的酒店排名靠前一些</p><p>把这个问题翻译一下，<code>function score</code>需要的三要素：</p><ul><li>1.哪些文档需要算分加权<ul><li>品牌为如家的酒店</li></ul></li><li>2.算分函数是什么？<ul><li>weight就可以</li></ul></li><li>3.加权模式是什么？<ul><li>求和</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;all&quot;: &quot;外滩&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;brand&quot;: &quot;如家&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 10</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-复合查询-Boolean-Query">7. 复合查询 Boolean Query</h2><p><code>布尔查询</code>是一个或多个查询子句的组合。子查询的组合方式有：</p><ul><li><code>must</code>：必须匹配每个子查询，类似<code>与</code></li><li><code>should</code>：选择性匹配子查询，类似于<code>或</code></li><li><code>must_not</code>：必须不匹配，不参与算分，类似<code>非</code>‘</li><li><code>filter</code>：必须匹配，不参与算分</li></ul><p><strong>案例：</strong> 利用<code>bool</code>查询实现功能</p><p>需求：搜索包含如家，价格不高于400，在坐标31.21，121.5周围10km范围内的酒店</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;如家&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gt&quot;: 400</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_distance&quot;: &#123;</span><br><span class="line">            &quot;distance&quot;: &quot;10km&quot;,</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;lat&quot;: 31.21,</span><br><span class="line">              &quot;lon&quot;: 121.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1>2. 搜索结果处理</h1><h2 id="1-排序">1. 排序</h2><p><code>elasticsearch</code>支持对搜索结果排序，默认是根据相关度算分(_score)来排序。可以排序字段类型有: <code>keyword类型</code>、<code>数值类型</code>、<code>地理坐标类型</code>、<code>日期类型</code>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;FIELD&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_geo_distance&quot;: &#123;</span><br><span class="line">        &quot;FIELD&quot;: &#123;</span><br><span class="line">          &quot;lat&quot;: 40,</span><br><span class="line">          &quot;lon&quot;: -70</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;,</span><br><span class="line">        &quot;unit&quot;: &quot;km&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例1：</strong> 对酒店数据按照用户评价降序排序，评价相同的按照价格升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># sort排序</span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;score&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;score&quot;: &quot;asc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong> 实现对酒店数据按照你的位置坐标距离升序排序</p><p>获取经纬度的方式: <a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 找到121.612282，31.034661周围的酒店，距离升序排序</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_geo_distance&quot;: &#123;</span><br><span class="line">        &quot;location&quot;: &#123;</span><br><span class="line">          &quot;lat&quot;: 31.034661,</span><br><span class="line">          &quot;lon&quot;: 121.612282</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;,</span><br><span class="line">        &quot;unit&quot;: &quot;km&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-分页">2. 分页</h2><p><code>elasticsearch</code>默认情况下只返回<code>top10</code>的数据。而如果要查询更多数据就需要修改分页参数了。</p><p><code>elasticsearch</code>中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 990,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &quot;asc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>深度分页问题：</strong> ES是分布式的，所以会面临深度分页问题。例如按price排序后，获取from = 990， size = 10的数据：</p><ul><li>1.首先在每个数据分片上都排序并查询前1000条文档。</li><li>2.然后将所有节点的结果聚合，在内存中重新排序选出前1000条文档。</li><li>3.最后从这1000条中，选取从990开始的10条文档</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/ES_%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5.jpg" alt="深度分页"></p><p>如果搜索页数过深，或者结果集( from + siz,)越大，对内存和CPU的消耗也越高。因此ES设定结果集查询的上限是10000</p><p><strong>深度分页解决方案：</strong></p><p>针对深度分页，ES提供了两种解决方案：</p><ul><li><code>search after</code>:分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式</li><li><code>scroll</code>:原理将排序数据形成快照，保存在内存。官方已经不推荐使用。</li></ul><h2 id="3-高亮">3.高亮</h2><p><code>高亮</code>：就是在搜索结果中把搜索关键字突出显示</p><p>原理是这样的：</p><ul><li>将搜索关键字用标签标记出来</li><li>在页面中给标签添加CSS样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;FIELD&quot;: &quot;TEXT&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;FILED&quot;: &#123;</span><br><span class="line">        &quot;pre_tags&quot;: &quot;&lt;em&gt;&quot;,</span><br><span class="line">        &quot;post_tags&quot;: &quot;&lt;/em&gt;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 高亮查询，默认情况下，ES搜索字段必须与高亮字段一致</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;all&quot;: &quot;如家&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;pre_tags&quot;: &quot;&lt;em&gt;&quot;,</span><br><span class="line">        &quot;post_tags&quot;: &quot;&lt;/em&gt;&quot;,</span><br><span class="line">        &quot;require_field_match&quot;: &quot;false&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>3. RestClient查询文档</h1><h2 id="1-快速入门">1.快速入门</h2><p>通过<code>match_all</code>来演示下基本API，先看请求DSL的组织：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们通过<code>match_all</code>来演示下基本的API，再看结果的解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>RestAPI</code>中其中构建<code>DSL</code>是通过<code>HighLevelRestClient</code>中的<code>resource()</code>来实现的，其中包含了查询、排序、分页、高亮等</p></blockquote><h2 id="2-全文检索查询">2.全文检索查询</h2><p><code>全文检索</code>的<code>match</code>和<code>multi_match</code>查询与<code>match_all</code>的<code>API</code>基本一致。差别是查询条件，也就是<code>query</code>的部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-精确查询">3.精确查询</h2><p><code>精确查询</code>常见的有<code>term查询</code>和<code>range查询</code>，同样利用<code>QueryBuilders</code>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//词条查询</span></span><br><span class="line">QueryBuilders.termQuery ( <span class="string">&quot;city&quot;</span>，<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line"><span class="comment">//范围查询</span></span><br><span class="line">QueryBuilders.rangeQuery( <span class="string">&quot;price&quot;</span>).gte(<span class="number">100</span>).lte( <span class="number">150</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-复合查询">4.复合查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建布尔查询</span></span><br><span class="line"><span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();s</span><br><span class="line"><span class="comment">//添加must条件</span></span><br><span class="line">boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;杭州&quot;</span>))boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line"><span class="comment">//添加filter条件</span></span><br><span class="line">boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1 准备BooleanQuery</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 2.2 添加 term</span></span><br><span class="line">        boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;杭州&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.3 添加 ranger</span></span><br><span class="line">        boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line">        request.source().query();</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        handleResponse(searchHits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-排序和分页">5.排序和分页</h2><p>搜索结果的<code>排序</code>和<code>分页</code>是与<code>query</code>同级的参数，对应的API如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">request.source( ).query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">request.source() .from(<span class="number">0</span> ).size(<span class="number">5</span>);</span><br><span class="line">/价格排序</span><br><span class="line">request.source().sort(<span class="string">&quot;price&quot;</span>,SortOrder.ASC);</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testPageAndSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 页码 ，每页大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">1</span>, size = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1 准备Query</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="comment">// 2.2 排序 sort</span></span><br><span class="line">        request.source().sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">        <span class="comment">// 2.3 分页 from ， size</span></span><br><span class="line">        request.source().from((page - <span class="number">1</span>) * size).size(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        handleResponse(searchHits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-高亮">6. 高亮</h2><p><code>高亮</code>API包括请求DSL构建和结果解析两部分。我们先看请求的DSL构建:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">request.source ( ).highlighter( <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>()&#123;</span><br><span class="line">    .field ( <span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="comment">//是否需要与查询字段匹配</span></span><br><span class="line">    .requireFieldMatch(<span class="literal">false</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//获取source</span></span><br><span class="line"><span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(hit.getSourceAsString()，HotelDoc.class);</span><br><span class="line"><span class="keyword">if</span> ( !collectionUtils.isEmpty(highlightFields) ) &#123;</span><br><span class="line">    <span class="comment">//获取高亮字段结果</span></span><br><span class="line">    <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get( <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (highlightField != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//取出高亮结果数组中的第一个，就是酒店名称</span></span><br><span class="line">        <span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string( );</span><br><span class="line">        hotelDoc.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">// 示例代码    </span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1 准备Query</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.2 高亮</span></span><br><span class="line">        request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        handleResponse(searchHits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 获取高亮结果</span></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields))&#123;</span><br><span class="line">                <span class="comment">// 根据字段名称获取高亮结果</span></span><br><span class="line">                <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (highlightField != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">// 获取高亮值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                    <span class="comment">// 覆盖非高亮结果</span></span><br><span class="line">                    hotelDoc.setName(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>五 旅游案例</h1><h2 id="案例一：-实现旅游的酒店搜索功能，完成关键字搜索和分页">案例一： 实现旅游的酒店搜索功能，完成关键字搜索和分页</h2><p>实现关键字搜索功能，实现步骤如下：</p><ul><li>1.定义实体类，接收前端请求</li><li>2.定义<code>controller</code>接口，接收页面请求，调用<code>IHotelService</code>的<code>search</code>方法</li><li>3.定义定义<code>lHotelService</code>中的<code>search</code>方法，利用<code>match</code>查询实现根据关键字搜索酒店信息</li></ul><h3 id="步骤1：定义类，接收-前端请求参数">步骤1：定义类，接收  前端请求参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤2：定义controller接口，接收前端请求">步骤2：定义controller接口，接收前端请求</h3><p>定义一个<code>HotelController</code>，声明查询接口，满足下列要求:<br>请求方式:Post</p><ul><li>请求路径: <code>/hotel/list</code></li><li>请求参数:对象，类型为<code>RequestParam</code></li><li>返回值:<code>PageResult</code>，包含两个属性：<ul><li><code>Long total</code>:总条数</li><li><code>List&lt;HotelDoc&gt; hotels</code>:酒店数据</li></ul></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HotelDoc&gt; hotels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.mapper.HotelMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 准备Request</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 关键字搜索</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">                request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2 分页</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">            request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4.解析响应</span></span><br><span class="line">            <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">            <span class="keyword">return</span> handleResponse(searchHits);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>记得注入<code>RestHighLevelClient</code></p></blockquote><h2 id="案例二：添加品牌、城市、星级、价格等过滤功能">案例二：添加品牌、城市、星级、价格等过滤功能</h2><p>步骤：</p><ul><li>1．修改<code>RequestParams</code>类，添加<code>prand</code>、<code>city</code>、<code>starName</code>、<code>minPrice</code>、<code>maxPrice</code>等参数</li><li>2．修改<code>search</code>方法的实现，在关键字搜索时，如果<code>brand</code>等参数存在，对其做过滤</li></ul><h3 id="步骤1：拓展IUserService的search方法的参数列表">步骤1：拓展IUserService的search方法的参数列表</h3><p>修改<code>RequestParams</code>类，接收所有参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤2：修改search方法，在match查询基础上添加过滤条件">步骤2：修改search方法，在match查询基础上添加过滤条件</h3><p>过滤条件包括：</p><ul><li>city精确匹配</li><li>brand精确匹配</li><li>starName精确匹配</li><li>price范围过滤</li></ul><blockquote><p>注意事项:</p><ul><li>多个条件之间是<code>AND</code>关系，组合多条件用<code>BooleanQuery</code></li><li>参数存在才需要过滤，做好非空判断</li></ul></blockquote><h2 id="案例三：我附近的酒店">案例三：我附近的酒店</h2><p>前端页面点击定位后，会将所在的位置发送到后台<br>，我们要根据这个坐标，将酒店结果按照到这个点的距离升序排序。</p><p>实现思路：</p><ul><li>修改<code>RequestParams</code>参数，接收<code>location</code>字段</li><li>修改<code>search</code>方法业务逻辑，如果<code>location</code>有值，添加根据<code>geo_distance</code>排序的功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.mapper.HotelMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.geo.GeoPoint;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.DistanceUnit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 准备Request</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 关键字搜索</span></span><br><span class="line">            buildBasicQuery(params, request);</span><br><span class="line">            <span class="comment">// 2.2 分页</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">            request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">            <span class="comment">// 2.3排序</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> params.getLocation();</span><br><span class="line">            <span class="keyword">if</span> (location != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(location))&#123;</span><br><span class="line">                request.source().sort(SortBuilders</span><br><span class="line">                        .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">                        .order(SortOrder.ASC)</span><br><span class="line">                        .unit(DistanceUnit.KILOMETERS)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4.解析响应</span></span><br><span class="line">            <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">            <span class="keyword">return</span> handleResponse(searchHits);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建BooleanQuery</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 关键字搜索</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 条件过滤</span></span><br><span class="line">        <span class="comment">// 城市条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 星级条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>)&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders</span><br><span class="line">                    .rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line">        &#125;</span><br><span class="line">        request.source().query(boolQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 获取排序值</span></span><br><span class="line">            Object[] sortValues = hit.getSortValues();</span><br><span class="line">            <span class="keyword">if</span> (sortValues.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">sortValue</span> <span class="operator">=</span> sortValues[<span class="number">0</span>];</span><br><span class="line">                hotelDoc.setDistance(sortValue);</span><br><span class="line">            &#125;</span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例四：让指定的酒店在搜索结果中排名置顶">案例四：让指定的酒店在搜索结果中排名置顶</h2><p>我们给需要置顶的酒店文档添加一个标记。然后利用<code>function score</code>给带有标记的文档增加权重。</p><p>实现步骤分析:</p><ul><li>1.给<code>HotelDoc类</code>添加<code>isAD</code>字段，<code>Boolean</code>类型</li><li>2.挑选几个你喜欢的酒店，给它的文档数据添加<code>isAD</code>字段，值为<code>true</code></li><li>3．修改<code>search</code>方法，添加<code>function score</code>功能，给<code>isAD</code>值为<code>true</code>的酒店增加权重</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.mapper.HotelMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.PageResult;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.RequestParams;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.geo.GeoPoint;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.DistanceUnit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 准备Request</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 关键字搜索</span></span><br><span class="line">            buildBasicQuery(params, request);</span><br><span class="line">            <span class="comment">// 2.2 分页</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">            request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">            <span class="comment">// 2.3排序</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> params.getLocation();</span><br><span class="line">            <span class="keyword">if</span> (location != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(location))&#123;</span><br><span class="line">                request.source().sort(SortBuilders</span><br><span class="line">                        .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">                        .order(SortOrder.ASC)</span><br><span class="line">                        .unit(DistanceUnit.KILOMETERS)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4.解析响应</span></span><br><span class="line">            <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">            <span class="keyword">return</span> handleResponse(searchHits);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建BooleanQuery</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 关键字搜索</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 条件过滤</span></span><br><span class="line">        <span class="comment">// 城市条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 星级条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>)&#123;</span><br><span class="line">            boolQuery.filter(QueryBuilders</span><br><span class="line">                    .rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 算分控制</span></span><br><span class="line">        <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">                QueryBuilders.functionScoreQuery(</span><br><span class="line">                        <span class="comment">// 原生查询 相关性算分</span></span><br><span class="line">                        boolQuery,</span><br><span class="line">                        <span class="comment">// function score 数组</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line"><span class="comment">//                                其中一个function score</span></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                        <span class="comment">// 过滤条件</span></span><br><span class="line">                                        QueryBuilders.termQuery(<span class="string">&quot;AD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                        <span class="comment">// 算分函数</span></span><br><span class="line">                                        ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">                                )</span><br><span class="line">                        &#125;);</span><br><span class="line">        request.source().query(functionScoreQueryBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchHits searchHits)</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1获取总条数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 4.2 文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 4.3 遍历</span></span><br><span class="line">        List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 获取排序值</span></span><br><span class="line">            Object[] sortValues = hit.getSortValues();</span><br><span class="line">            <span class="keyword">if</span> (sortValues.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">sortValue</span> <span class="operator">=</span> sortValues[<span class="number">0</span>];</span><br><span class="line">                hotelDoc.setDistance(sortValue);</span><br><span class="line">            &#125;</span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch基础操作</title>
      <link href="/2023/01/11/elasticsearch%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/11/elasticsearch%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1>一 初识elasticsearch</h1><h2 id="1-什么是elasticsearch？">1.什么是elasticsearch？</h2><p><code>elasticsearch</code>是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</p><p><code>elasticsearch</code>结合<code>kibana</code>、<code>Logstash</code>、<code>Beats</code>，也就是<code>elastic stack（ELK）</code>。被广泛应用在日志数据分析、实时监控等领域。</p><p><code>elasticsearch</code>是<code>elastic stack（ELK）</code>的核心，负责存储、搜索分析数据。</p><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_elasticsearch%E7%BB%93%E6%9E%84.jpg" alt="elasticsearch结构"></p><h2 id="2-elasticsearch的发展">2.elasticsearch的发展</h2><p><code>Lucene</code>是一个<code>Java</code>语言的搜索引擎类库，是<code>Apache</code>公司的顶级项目，由DougCutting于1999年研发。<br><a href="https://lucene.apache.org/">官网地址</a>：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a></p><p>Lucene的优势：</p><ul><li>易拓展</li><li>高性能（基于倒排索引）</li></ul><p>Lucene的缺点：</p><ul><li>只限于<code>Java</code>语言开发</li><li>学习曲线陡峭</li><li>不支持水平拓展</li></ul><p>2004年Shay Banon基于<code>Lucene</code>开发了<code>Compass</code></p><p>2010年Shay Banon重写了<code>Compass</code>，取名为<code>Elasticsearch</code>。<a href="https://www.elastic.co/cn/">官网地址</a>: <a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p>相比与<code>lucene</code>,<code>elasticsearch</code>具备下列优势:</p><ul><li>支持分布式，可水平扩展</li><li>提供<code>Restful接口</code>，可被任何语言调用</li></ul><h2 id="3-为什么学习elasticsearch？">3.为什么学习elasticsearch？</h2><p>搜索引擎技术排名：</p><ul><li>1.<code>Elasticsearch</code>：开源的分布式搜索引擎</li><li>2.<code>Splunk</code>：商业项目</li><li>3.<code>Solr</code>：<code>Apache</code>的开源搜索引擎</li></ul><h2 id="4-正向索引和倒排索引">4.正向索引和倒排索引</h2><p>传统数据库（如MySQL）采用正向索引，例如给下表（tb_goods）中的id创建索引：</p><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E6%AD%A3%E5%90%91%E7%B4%A2%E5%BC%95.jpg" alt="正向索引"></p><p>倒排索引：</p><ul><li><code>文档（document）</code>：每条数据就是一个文档</li><li><code>词条（term）</code>：文档按照语义分成的词语</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%951.jpg" alt="倒排索引1"></p><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%952.jpg" alt="倒排索引2"></p><h2 id="5-与MySQL的对比">5.与MySQL的对比</h2><p><strong>文档</strong></p><p><code>elasticsearch</code>是面向文档存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为<code>json格式</code>后存储在<code>elasticsearch</code>中。</p><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E6%96%87%E6%A1%A3.jpg" alt="文档"></p><p><strong>索引</strong></p><ul><li><code>索引（index)</code>：相同类型的文档的集合</li><li><code>映射（mapping）</code>：索引中文档的字段约束信息，类似表的结构约束</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E7%B4%A2%E5%BC%95.jpg" alt="索引"></p><p><strong>概念对比</strong></p><table><thead><tr><th style="text-align:center">MySQL</th><th style="text-align:center">Elasticsearch</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Table</td><td style="text-align:center">Index</td><td style="text-align:center">索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td style="text-align:center">Row</td><td style="text-align:center">Document</td><td style="text-align:center">文档（Document)，就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td style="text-align:center">Column</td><td style="text-align:center">Field</td><td style="text-align:center">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column)</td></tr><tr><td style="text-align:center">Schema</td><td style="text-align:center">Mapping</td><td style="text-align:center">DSL是elasticsearch提供的JSON风格的请求语句，用来操作的表结构( Schema)</td></tr><tr><td style="text-align:center">SQL</td><td style="text-align:center">DSL</td><td style="text-align:center">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><p><strong>架构</strong></p><p><code>MySql</code>：擅长事务类型操作，确保数据的安全和一致性</p><p><code>Elasticsearch</code>：擅长海量数据的搜索、分析、计算</p><p><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_%E6%9E%B6%E6%9E%84.jpg" alt="架构"></p><h1>二 安装elasticsearch</h1><h2 id="1-单点部署es">1.单点部署es</h2><p><strong>(1)创建网络</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><p><strong>(2)加载镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch</span><br><span class="line"><span class="comment"># 图形化插件</span></span><br><span class="line">docker pull kibana </span><br></pre></td></tr></table></figure><p><strong>(3)运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name es\</span><br><span class="line">  -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">  -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">  -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network es-net\</span><br><span class="line">  -p 9200:9200 \</span><br><span class="line">  -p 9300:9300 \</span><br><span class="line">  elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><h2 id="2-单点部署kibana">2.单点部署kibana</h2><p><strong>运行docker命令，部署kibana</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name kibana \</span><br><span class="line">  -e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">  --network=es-net \</span><br><span class="line">  -p 5601:5601 \</span><br><span class="line">  kibana:7.12.1</span><br></pre></td></tr></table></figure><h1>三 分词器</h1><h2 id="1-为什么要分词器？">1.为什么要分词器？</h2><p><code>es</code>在创建倒排索引时，需要对文档分词；在搜索时，需要对用户输入内容分词。但默认的分词规则对中文处理并不友好。</p><p>在<code>kibana</code>的<code>DevTools</code>中测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;你的java真是太棒了！&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>语法说明:</strong></p><ul><li><code>POST</code>:请求方式</li><li><code>/_analyze</code>:请求路径，这里省略了http://192.168.127.131:9200，有kibana帮我们补充</li><li>请求参数，json风格:<br>语法说明:<ul><li><code>analyzer</code>:分词器类型，这里是默认的<code>standard</code>分词器</li><li><code>text</code>:要分词的内容</li></ul></li></ul><h2 id="2-中文分词IK分词器安装">2.中文分词IK分词器安装</h2><p>处理中文分词，一般会使用IK分词器。<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p><strong>安装ik插件（在线较慢）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入让其内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elasticsearch /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><p><strong>离线安装</strong></p><ol><li>查看数据卷目录</li></ol><p>安装插件需要知道<code>elasticsearch</code>的<code>plugins</code>目录位置，而我们用了数据卷挂载，因此需要查看<code>elasticsearch</code>的数据卷目录，通过下面命令查看:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><ol start="2"><li>上传<code>ik分词器</code>文件夹并命名为<code>ik</code></li><li>重启容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart es</span><br><span class="line"><span class="comment"># 查看es日志</span></span><br><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure><p>4)测试</p><p>IK分词器包含两者模式：</p><ul><li><code>ik_smart</code>: 最少切分</li><li><code>ik_max_word</code>：最细切分</li></ul><h2 id="3-拓展词库">3.拓展词库</h2><p>要扩展<code>ik分词器</code>的词库，只需要修改一个ik分词器目录中的<code>config</code>目录的<code>IKAnalyzer.cfg.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">﻿<span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-停用词库">3.停用词库</h2><p>要禁用某些敏感词条，只需要修改修改一个ik分词器目录中的<code>config</code>目录的<code>IKAnalyzer.cfg.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">﻿<span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>四 索引库操作</h1><h2 id="1-mapping映射">1.mapping映射</h2><p><strong>mapping属性</strong></p><p><code>mapping</code>是对索引库中文档的约束，常见的<code>mapping属性</code>包括：</p><ul><li><code>type</code>：字段数据类型，常见的简单类型有：<ul><li>字符串： t<code>ext（可分词的文本）</code>、<code>keyword</code>（精确值，例如：品牌、国家、IP地址）</li><li>数值：<code>long</code>、<code>integer</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float</code></li><li>布尔：<code>boolean</code></li><li>日期：<code>date</code></li><li>对象：<code>object</code></li></ul></li><li><code>index</code>：是否创建索引，默认为<code>true</code></li><li><code>analyzer</code>：使用哪种分词器</li><li><code>properties</code>：该字段的子字段</li></ul><h2 id="2-创建索引库">2.创建索引库</h2><p>ES中通过Restful请求操作索引库、文档。请求内容用DSL语句来表示。创建索引库和mapping的DSL语法如下:<br>中通过RESTful请求操作索引库、文档.请求内容用DSL语句来表示.创建索引库和映射的DSL语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mapprings&quot;:&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;字段名&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名2&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名3&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;子字段&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建索引库</span><br><span class="line">PUT /test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;firstName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;lastName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="3-查询、删除索引库">3.查询、删除索引库</h2><p>查看索引库语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名</span><br><span class="line"># 示例</span><br><span class="line">GET /test</span><br></pre></td></tr></table></figure><p>删除索引库语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名</span><br><span class="line"># 示例</span><br><span class="line">DELETE /test</span><br></pre></td></tr></table></figure><h2 id="4-修改索引库">4.修改索引库</h2><p>索引库和<code>mapping</code>一旦创建无法修改，但是可以添加新的字段，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;新字段名&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 示例</span><br><span class="line"># 修改索引库</span><br><span class="line">PUT /test/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>五 文档操作</h1><h2 id="1-新增文档">1.新增文档</h2><p>新增文档的DSL语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">  &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">  &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">  &quot;字段3&quot;: &#123;</span><br><span class="line">      &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">      &quot;子属性2&quot;: &quot;值4&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 示例</span><br><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;Java讲师&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;hh@163.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;云&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;赵&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-查询删除文档">2.查询删除文档</h2><p>查看文档语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_doc/文档id</span><br><span class="line"># 示例</span><br><span class="line">GET /test/_doc/1</span><br></pre></td></tr></table></figure><p>删除文档语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名/_doc/文档id</span><br><span class="line"># 示例</span><br><span class="line">DELETE /test/_doc/1 </span><br></pre></td></tr></table></figure><h2 id="3-修改文档">3.修改文档</h2><p><strong>方式一：</strong> 全量修改，会删除旧文档，添加新文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">  &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">  &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">  &quot;字段3&quot;: &#123;</span><br><span class="line">      &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">      &quot;子属性2&quot;: &quot;值4&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 示例</span><br><span class="line">PUT /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;Java讲师&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;hh@163.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;云&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;赵&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong> 增量修改，修改指定字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;字段名&quot;: &quot;新的值&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 示例</span><br><span class="line">POST /heima/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;email&quot;: &quot;ZY@163.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>六 RestClient操作索引</h1><h2 id="1-什么是RestClient">1.什么是RestClient?</h2><p>ES官方提供了各种不同语言的客户端，用来操作ES。<br>这些客户端的本质就是组装DSL语句，通过<code>http</code>请求发送给ES。<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官方文档地址:</a> <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><h2 id="2-RestClient操作案例">2.RestClient操作案例</h2><p><strong>案例：</strong> 利用<code>JavaRestClient</code>实现创建、删除索引库，判断索引库是否存在</p><p>根据课前资料提供的酒店数据创建索引库，索引库名为<code>hotel</code>，<code>mapping属性</code>根据数据库结构定义。</p><p>基本步骤如下:</p><ul><li><p>1.导入课前资料Demo</p></li><li><p>2.分析数据结构，定义<code>mapping属性</code></p><ul><li><code>mapping</code>要考虑的问题：字段名、数据类型、是否参与搜索、是否分词、如果分词，分词器是什么？</li></ul><blockquote><p>tip:ES中支持两种地理坐标数据类型:</p><p><code>geo_point</code>:由纬度( latitude）和经度(lorhgitude)确定的一个点。例如:“32.8752345,120.2981576”</p><p><code>geo_shape</code>:有多个geo_point组成的复杂几何图形。例如一条直线，“LINESTRING(-77.03653 38.897676,-77.009051 38.889939)”</p></blockquote><blockquote><p>tip: 字段拷贝可以使用<code>copy_to</code>属性将当前字段拷贝到指定字段示例：<br><img src="https://qnyoss.lovehao.ren/blog/elasticsearch_copy_to%E5%AD%97%E6%AE%B5.jpg" alt="copy_to字段"></p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 酒店的mapping</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;all&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>3.初始化<code>JavaRestClient</code></p><p>(1)引入es的es的<code>RestHighLevelClient</code>依赖：与服务端版本保持一致</p></li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)因为<code>SpringBoot</code>默认的ES版本是<code>7.6.2</code>所以我们要覆盖默认的ES版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)初始化<code>RestHighLevelClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.131:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4.利用<code>JavaRestClient</code>创建索引库</li></ul><p>创建索引库代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.HotelConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cn.itcast.hotel.constants.HotelConstants.MAPPING_TEMPLATE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备请求的参数：DSL语句</span></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON)</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.131:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>5.利用<code>JavaRestClient</code>删除索引库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cn.itcast.hotel.constants.HotelConstants.MAPPING_TEMPLATE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.131:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>6.利用<code>JavaRestClient</code>判断索引库是否存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cn.itcast.hotel.constants.HotelConstants.MAPPING_TEMPLATE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Request对象</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists ?  <span class="string">&quot;索引库已经存在&quot;</span> : <span class="string">&quot;索引库不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.131:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>七 RestClient操作文档</h1><h2 id="1-RestClient操作文档案例">1.RestClient操作文档案例</h2><p><strong>案例：</strong> 利用JavaRestClient实现文档的CRUD</p><p>去数据库查询酒店数据，导入到hotel索引库，实现酒店数据的CRUD。</p><p>基本步骤如下：</p><ul><li>1.初始化<code>JavaRestClient</code></li></ul><p>新建一个测试类，实现文档相关操作，并且完成<code>JavaRestClient</code>的初始化（与索引操作相同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.利用<code>JavaRestClient</code>新增酒店数据</li></ul><p>先查询酒店数据，然后给这条数据创建倒排索引，即可完成添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据id查询酒店数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">61083L</span>);</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 1. 准备Request对象</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());</span><br><span class="line">        <span class="comment">// 2. 准备json文档</span></span><br><span class="line">        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.利用<code>JavaRestClient</code>根据<code>id</code>查询酒店数据</li></ul><p>根据<code>id</code>查询到的文档数据是<code>json</code>，需要反序列化为<code>java对象</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request</span></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 发送请求，得到响应</span></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 3. 解析响应结构</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(hotelDoc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4.利用<code>JavaRestClient</code>修改酒店数据</li></ul><p><strong>方式一：</strong> 全量修改，会删除旧文档，添加新文档<br><strong>方式二：</strong> 增量修改，修改指定字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式2，方式一与新增同</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备request对象</span></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备请求参数</span></span><br><span class="line">        request.doc(</span><br><span class="line">                <span class="string">&quot;price&quot;</span>, <span class="string">&quot;952&quot;</span>,</span><br><span class="line">                <span class="string">&quot;startName&quot;</span>, <span class="string">&quot;四钻&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>5.利用<code>JavaRestClient</code>删除酒店数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 准备request对象</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 发送请求</span></span><br><span class="line">        client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>八 JavaRestClient批量导入数据</h1><h2 id="利用JavaRestClient批量导入酒店数据到ES">利用JavaRestClient批量导入酒店数据到ES</h2><p><strong>案例</strong> 利用<code>JavaRestClient</code>批量导入酒店数据到ES</p><p><strong>需求:</strong> 批量查询酒店数据，然后批量导入索引库中</p><p><strong>思路:</strong></p><ul><li>1.利用<code>mybatis-plus</code>查询酒店数据</li><li>2.将查询到的酒店数据（Hotel)转换为文档类型数据（HotelDoc)</li><li>3.利用<code>JavaRestClient</code>中的<code>Bulk</code>批处理，实现批量新增文档</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.HotelDoc;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量查询酒店数据</span></span><br><span class="line">        List&lt;Hotel&gt; hotels = hotelService.list();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 创建Request</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        <span class="comment">// 2. 准备参数，添加多个新增的Request</span></span><br><span class="line">        <span class="keyword">for</span> (Hotel hotel : hotels) &#123;</span><br><span class="line">            <span class="comment">// 转换为文档类型HotelDoc</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">            <span class="comment">// 创建新增文档Request对象</span></span><br><span class="line">            request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotel.getId().toString())</span><br><span class="line">                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 发送请求</span></span><br><span class="line">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.127.132:9200&quot;</span>)</span><br><span class="line"><span class="comment">//                集群可写多个</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;),</span></span><br><span class="line"><span class="comment">//                HttpHost.create(&quot;http://192.168.127.131:9200&quot;)</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ基础操作</title>
      <link href="/2023/01/08/RabbitMQ%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/08/RabbitMQ%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1>一 同步通信</h1><h2 id="1-同步通信的问题">1.同步通信的问题</h2><p>微服务间基于Feign的调用就属于同步方式，存在一些问题</p><ul><li>耦合度高：每次加入新的需求，都需要修改原来党的代码</li><li>性能下降：调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和</li><li>资源浪费：调用链中的每个服务在等待响应的过程中，不能释放请求占用的资源，高并发场景下会极度浪费资源</li><li>级联失败：如果服务提供者出现问题，所有调用方法都会跟着出问题，如同多米诺骨牌一样，迅速导致整个微服务群故障</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/RabbitMQ_%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98.jpg" alt="同步调用的问题"></p><h2 id="2-同步调用的优点">2.同步调用的优点</h2><ul><li>时效性强，可以立即得到结果</li></ul><h1>二 异步调用</h1><p>异步调用常见实现就是事件驱动模式</p><p><img src="https://qnyoss.lovehao.ren/blog/RabbitMQ_%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E6%A1%88.jpg" alt="异步调用的方案"></p><h2 id="1-异步通信的优点">1.异步通信的优点</h2><ul><li>服务解耦</li><li>性能提升，吞吐量提高</li><li>服务没有强依赖，不担心级联失败问题</li><li>流量削峰</li></ul><h2 id="2-异步通信的缺点">2.异步通信的缺点</h2><ul><li>依赖于<code>Broker</code>的可靠性、安全性、吞吐能力</li><li>架构复杂了，业务没有明显的流程线，不好追踪管理</li></ul><h1>三 RabbitMQ 快速入门</h1><h2 id="1-什么是MQ？">1.什么是MQ？</h2><p><code>MQ（MessageQueue）</code>中文是消息队列，字面看来就是存放消息的队列。也就是事件驱动架构中的<code>Broker</code>。</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">RabbitMQ</th><th style="text-align:center">ActiveMQ</th><th style="text-align:center">RocketMQ</th><th style="text-align:center">Kafka</th></tr></thead><tbody><tr><td style="text-align:center">公司/社区</td><td style="text-align:center">Rabbit</td><td style="text-align:center">Apache</td><td style="text-align:center">阿里</td><td style="text-align:center">Apache</td></tr><tr><td style="text-align:center">开发语言</td><td style="text-align:center">Erlang</td><td style="text-align:center">Java</td><td style="text-align:center">Java</td><td style="text-align:center">Scala&amp;Java</td></tr><tr><td style="text-align:center">协议支持</td><td style="text-align:center">AMQP,XMPP.SMTP,STOMP</td><td style="text-align:center">OpenWire,STOMP,REST,XMPP,AMQP</td><td style="text-align:center">自定义协议</td><td style="text-align:center">自定义协议</td></tr><tr><td style="text-align:center">可用性</td><td style="text-align:center">高</td><td style="text-align:center">一般</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">单机吞吐量</td><td style="text-align:center">一般</td><td style="text-align:center">差</td><td style="text-align:center">高</td><td style="text-align:center">非常高</td></tr><tr><td style="text-align:center">消息延迟</td><td style="text-align:center">微秒级</td><td style="text-align:center">毫秒级</td><td style="text-align:center">毫秒级</td><td style="text-align:center">毫秒以内</td></tr><tr><td style="text-align:center">消息可靠性</td><td style="text-align:center">高</td><td style="text-align:center">一般</td><td style="text-align:center">高</td><td style="text-align:center">一般</td></tr></tbody></table><h2 id="2-RabbitMQ-概述">2.RabbitMQ 概述</h2><p><code>RabbitMQ</code>是基于<code>Erlang</code>语言开发的消息通信中间件，<a href="https://www.rabbitmq.com">RabbitMQ官网地址</a>：<a href="https://www.rabbitmq.com">https://www.rabbitmq.com</a>。</p><h2 id="3-单机部署RabbitMQ">3.单机部署RabbitMQ</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取RabbitMQ镜像</span></span><br><span class="line">docker pull rabbitmq:3-management</span><br><span class="line"><span class="comment"># 运行MQ容器</span></span><br><span class="line">docker run \</span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=itcast \</span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line">  --name mq \</span><br><span class="line">  --hostname mql \</span><br><span class="line">  -p 15672:15672 \</span><br><span class="line">  -p 5672:5672 \</span><br><span class="line">  -d \</span><br><span class="line">  rabbitmq:3-management</span><br></pre></td></tr></table></figure><h2 id="4-RabbitMQ概述">4.RabbitMQ概述</h2><p><code>RabbitMQ</code>概念和结构<br><img src="https://qnyoss.lovehao.ren/blog/RabbitMQ_RabbitMQ%E6%A6%82%E5%BF%B5%E5%92%8C%E7%BB%93%E6%9E%84.jpg" alt="RabbitMQ概念和结构"></p><h2 id="5-RabbitMQ中的几个概念">5.RabbitMQ中的几个概念</h2><ul><li><code>channel</code>：操作MQ的工具</li><li><code>exchange</code>：路由消息到队列中</li><li><code>queue</code>：缓存消息</li><li><code>virtual host</code>：虚拟主机，是对<code>queue</code>、<code>exchange</code>等资源的逻辑分组</li></ul><h2 id="6-常见消息模型（参考链接">6.常见消息模型（<a href="https://www.rabbitmq.com/getstarted.html">参考链接</a>)</h2><ul><li>基本消息队列（BasicQueue）</li><li>工作消息队列（WorkQueue）</li><li>发布订阅（Publish、Subscribe），又根据交换机类型不同分为三种：<ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topic Exchange：主题</li></ul></li></ul><h3 id="1-HelloWorld案例">(1) HelloWorld案例</h3><p>HelloWorld是基于组基础的消息队列模型来实现的，只包括三个角色：</p><ul><li><code>publisher</code>：消息发布者，将消息发送到队列queue</li><li><code>queue</code>：消息队列，负责接受并缓存消息</li><li><code>consumer</code>：订阅队列，处理队列中的消息</li></ul><p>基本消息队列的消息发送流程：</p><ul><li>1.建立<code>connection</code></li><li>2.创建<code>channel</code></li><li>3.利用<code>channel</code>声明队列</li><li>4.利用<code>channel</code>向队列发送消息</li></ul><p>基本消息队列的消息接收流程：</p><ul><li>1.建立<code>connection</code></li><li>2.创建<code>channel</code></li><li>3.利用<code>channel</code>声明队列</li><li>4.定义<code>consumer</code>的消费行为<code>handleDelivery()</code></li><li>5.利用<code>channel</code>将消费者与队列绑定</li></ul><h1>四 SpringAMQP</h1><h2 id="1-什么是SpringAMQP？">1.什么是SpringAMQP？</h2><p><strong>AMQP(Advance Message Queuing Protocol)</strong> 是用于在应用程序之间传递业务<br>消息的开发标准。该协议与语言和平台无关，更符合微服务中独立性的要求</p><p><strong>SpringAMQP</strong> 是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。<br>包含两部分，其中spring、-amqp是基础抽象。spring-rabbit是底层默认实现。</p><h2 id="2-Basic-Queue工作队列">2.Basic Queue工作队列</h2><p>基本思路：</p><ul><li>1.在父工程中引入<code>spring-amqp</code>的依赖</li><li>2.在<code>publisher服务</code>中利用<code>RabbitTemplate</code>发送消息到<code>simple.queue</code>这个队列</li><li>3.在<code>consumer服务</code>中编写消费逻辑，绑定<code>simple.queue</code>这个队列</li></ul><p>步骤：</p><ul><li>1.引入AMQP依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.在publisher服务中编写application.yml,添加mq连接信息：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># publisher的application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.127</span><span class="number">.131</span> <span class="comment">#rabbitMQ的IP地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2SimpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>在<code>consumer</code>中编写消费逻辑，监听<code>simple.queue</code>。<br>在<code>consumer</code>服务中编写<code>application.yml</code>，添加<code>mq</code>连接信息</li></ol></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.127</span><span class="number">.131</span> <span class="comment">#rabbitMQ的IP地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>在<code>consumer</code>服务中新建一个类，编写消费逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息是：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Work-Queue工作队列">3.Work Queue工作队列</h2><p>基本思路：</p><ul><li>1.在<code>publisher服务</code>中定义测试方法，每秒产生<code>50条消息</code>，发送到<code>simple.queue</code></li><li>2.在<code>consumer服务</code>中定义两个消息监听者，每秒都监听<code>simple.queue</code>队列</li><li>3.<code>消费者1</code>每秒处理<code>50条消息</code>，<code>消费者2</code>处理<code>10条消息</code></li></ul><p>步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// publisher服务 代码</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2WorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message__&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// consumer服务代码</span></span><br><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1接收到消息是：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;消费者2接收到消息是：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码无法实现预取效果，消息会被两个消费者平均分配<br><strong>消息预取限制</strong> 修改application.yml文件，设置preFetch这个值，可以控制预取消息的上限。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.127</span><span class="number">.131</span> <span class="comment">#rabbitMQ的IP地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只获取1条消息</span></span><br></pre></td></tr></table></figure><h1>五 Work Queue工作队列</h1><h2 id="1-发布-Publish-、订阅-Subscribe">1.发布(Publish)、订阅(Subscribe)</h2><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了<code>exchange（交换机）</code>。<br>常见<code>exchange</code>类型包括：</p><ul><li><code>Fanout</code>：广播</li><li><code>Direct</code>：路由</li><li><code>Topic</code>：话题</li></ul><p><img src="https://qnyoss.lovehao.ren/blog/RabbitMQ_%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.jpg" alt="发布订阅模型"></p><blockquote><p>注意：<code>exchange</code>负责消息路由，而不是存储，路由失败则消息丢失</p></blockquote><h2 id="2-发布订阅-FanoutExchange">2.发布订阅 FanoutExchange</h2><p><code>Fanout Exchange</code>会将接收到的消息路由到每一个跟其绑定的<code>queue</code></p><p>实现思路：</p><ul><li>1.在<code>consumer服务</code>中，利用代码声明队列、交换机、并将两者绑定</li><li>2.在<code>consumer服务</code>中，编写两个消费者方法，分别监听<code>fanout.queue1</code>和<code>fanout.queue2</code></li><li>3.在<code>publisher服务</code>中编写测试方法，向<code>itcast.fanout（交换机）</code>发送消息</li></ul><p>步骤：</p><ul><li>1.在<code>consumer服务</code>服务声明<code>Exchange</code>、<code>Queue</code>、<code>Binding</code></li></ul><p>在<code>consumer服务</code>常见一个类，添加<code>@configuration</code>注解，并声明<code>FanoutExchange</code>、<code>Queue</code>和绑定关系对象<code>Binding</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaboutConfig</span> &#123;</span><br><span class="line">    <span class="comment">// itcast.fanout</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fanout.queue1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    绑定队列1到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fanout.queue2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue2)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.在<code>consumer服务</code>声明两个消费者</li></ul><p>在<code>consumer服务</code>的<code>SpringRabbitListener</code>类中，添加两个方法，分别监听<code>fanout.queue1</code>和<code>fanout.queue2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue1的消息是：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到fanout.queue2的消息是：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>在<code>publisher服务</code>发送消息到<code>FanoutExchange</code></li></ol></li></ul><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, every one!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>交换机的作用是什么？</strong></p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><h2 id="2-发布订阅-DirectExchange">2.发布订阅 DirectExchange</h2><p><code>Direct Exchange</code>会将接收到的消息根据规则路由到指定的<code>Queue</code>，因此称为<code>路由模式(routes)</code>。</p><ul><li>每一个<code>Queue</code>都与<code>Exchange</code>设置一个<code>BindingKey</code></li><li>发布者发送消息时，指定消息的<code>RoutingKey</code></li><li><code>Exchange</code>将消息路由到<code>BindingKey</code>与消息<code>RoutingKry</code>一致的队列</li></ul><p>实现思路：</p><ul><li>1.利用<code>@RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>2.在<code>consumer服务</code>中，编写两个消费者方法，分别监听<code>direct.queue1</code>和<code>direct.queue2</code></li><li>3.在<code>publisher服务</code>中编写测试方法，向<code>itcast.fanout（交换机）</code>发送消息</li></ul><p>步骤：</p><ul><li>1.在<code>consumer服务</code>声明<code>Exchange</code>、<code>Queue</code></li></ul><p>(1)在<code>consumer服务</code>中，编写两个消费者方法，分别监听<code>direct.queue1</code>和<code>direct.queue2</code><br>(2)并利用<code>@RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息是【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.在<code>publisher服务</code>发送消息到<code>DirectExchange</code></li></ul><p>在<code>publisher服务</code>的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, every blue!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-发布订阅-TopicExchange">3.发布订阅 TopicExchange</h2><p><code>TopicExchange</code>与<code>DirectExchange</code>类似，区别在于<code>routingKey</code>必须是多个单词的列表，并且以<code>.</code>分割。</p><p><code>Queue</code>与<code>Exchange</code>指定<code>BindingKey</code>时可以使用通配符：</p><p><code>#</code>：指代0个或多个单词</p><p><code>*</code>：指代一个单词</p><p><img src="https://qnyoss.lovehao.ren/blog/RabbitMQ_TopicExchange.jpg" alt="TopicExchange"></p><p>实现思路：</p><ul><li>1.利用<code>@RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>2.在<code>consumer服务</code>中，编写两个消费者方法，分别监听<code>topic.queue1</code>和<code>topic.queue2</code></li><li>3.在<code>publisher服务</code>中编写测试方法，向<code>itcast.topic（交换机）</code>发送消息</li></ul><p>步骤：</p><ul><li>1.在<code>consumer服务</code>声明<code>Exchange</code>、<code>Queue</code></li></ul><p>(1)在<code>consumer服务</code>中，编写两个消费者方法，分别监听<code>topic.queue1</code>和<code>topic.queue2</code><br>(2)并利用<code>@RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(&quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息是【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(&quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息是【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.在<code>publisher服务</code>发送消息到<code>TopicExchange</code></li></ul><p>在<code>publisher服务</code>的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;中国新闻！&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>六 SpringAMQP消息转换器</h1><p><strong>案例</strong> 测试发送Object类型消息</p><p>说明：在<code>SpringAMQP</code>的发送方法中。接收消息的类型是<code>Object</code>，也就是说我们可以发送任意对象类型的消息，<code>SpringAMQP</code>会帮我们序列号为<code>字节</code>后发送。</p><p>我们在<code>consumer</code>中利用<code>@Bean</code>声明一个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaboutConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ObjectQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在publisher中发送消息以测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendObjectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><code>Spring</code>的对消息对象的处理是由<code>org.springframework.amqp.support.converter.MessageConverter</code>来处理的。<br>而默认实现是<code>SimpleMessageConverter</code>，基于<code>JDK</code>的<code>ObjectOutputStream</code>完成序列化。</p><p>如果要修改只需要定义一个<code>MessageConverter</code>类型的<code>Bean</code>即可。推荐用<code>JSON</code>方式序列化，步骤如下:</p><ul><li>在<code>publisher服务</code>中引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在<code>publisher服务</code>声明<code>MessageConvert</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在配置类中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>接收消息</strong></p><ul><li>1.我们在<code>consumer服务</code>中引入Jackson依赖:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.在<code>consumer服务</code>声明<code>MessageConvert</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在配置类中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>3.监听消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;\</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String, Object&gt; msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到object.queue的消息【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用基础</title>
      <link href="/2023/01/08/Docker%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/08/Docker%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>一 项目部署的问题</h1><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul><blockquote><p>简单来说：Docker是一个快速交付应用、运行应用的技术</p><ol><li>可以将程序及依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ol></blockquote><h1>二 什么是Docker？</h1><p><code>Docker</code> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的<code>Linux</code>或<code>Windows</code>操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。(From 百度百科)</p><h1>三 Docker如何解决依赖兼容性问题？</h1><ul><li>将应用的<code>Libs（函数库）</code>、<code>Deps（依赖）</code>、配置与应用一起打包</li><li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免相互干扰</li></ul><h1>四 Docker如何解决不同系统环境的问题？</h1><ul><li>Docker将用户程序与所需要调用的系统（比如<code>Ubuntu</code>）函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><h1>五 Docker如何解决开发、测试、生产环境差异的问题？</h1><ul><li><code>Docker镜像</code>中包含完整运行环境，包括系统函数库，仅依赖系统的<code>Linux</code>内核，<br>因此可以在任意<code>Linux</code>操作系统上运行</li></ul><h1>六 Docker 与虚拟机</h1><p><code>虚拟机（vurtual machine）</code>是在操作系统中模拟硬件设备，然后运行<br>另一个操作系统，比如在<code>Windows</code>系统里面运行<code>Ubuntu</code>系统，这样就可以运行任意的<code>Ubuntu</code>应用了</p><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">Docker</th><th style="text-align:center">虚拟机</th></tr></thead><tbody><tr><td style="text-align:center">性能</td><td style="text-align:center">接近原生</td><td style="text-align:center">性能较差</td></tr><tr><td style="text-align:center">硬盘占用</td><td style="text-align:center">一般为MB</td><td style="text-align:center">一般为GB</td></tr><tr><td style="text-align:center">启动</td><td style="text-align:center">秒级</td><td style="text-align:center">分钟级</td></tr></tbody></table><h1>七 镜像和容器</h1><p><strong>镜像（Image）：</strong> Docker将应用程序及其所需的依赖、函数库、环境<br>配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）：</strong> 镜像中的应用程序运行后形成的进程就是 <strong>容器</strong> ，只是Docker会给容器做隔离，对外不可见。<br><img src="https://qnyoss.lovehao.ren/Docker_%E9%95%9C%E5%83%8F%E5%92%8C%E5%AE%B9%E5%99%A8.jpg" alt="镜像和容器的关系"></p><h1>八 Docker 和 DockerHub</h1><ul><li><code>DockerHub</code>：<code>DockerHub</code>是一个<code>Docker镜像的托管平台</code>。这样的平台称为<code>Docker Registy</code>。</li></ul><h1>九 Docker 架构</h1><p>Docker是一个CS架构的程序，由两步分组成：</p><ul><li><p><code>服务端（server）</code>： <code>Docker</code>的守护进程，负责处理<code>Docker指令</code>，<br>管理镜像、容器等。</p></li><li><p><code>客户端（client）</code>：通过命令或<code>RestAPI</code>向<code>Docker</code>服务端发送指令。<br>可以在本地或远程向服务端发生指令。<br><img src="https://qnyoss.lovehao.ren/blog/Docker_Docker%E6%9E%B6%E6%9E%84.jpg" alt="Docke架构"></p></li></ul><h1>十 Docker 的卸载、安装与启动（Linux）</h1><h2 id="1-卸载-Docker">1. 卸载 Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="2-安装Docker">2. 安装Docker</h2><p>首先虚拟机要联网，安装<code>yum</code>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">            device-mapper-persistent-data \</span><br><span class="line">            1vm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：(有问题，作者在走流程的时候，总是有问题，未知原因)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置docker镜像源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com \/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>然后输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><h2 id="3-启动Docker">3.启动Docker</h2><p><code>Docker</code>应用需要到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！（此处建议是在虚拟机，服务器不能关闭！）</p><p>启动dockers前，一定要关闭防火墙后！！<br>启动dockers前，一定要关闭防火墙后！！<br>启动dockers前，一定要关闭防火墙后！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 查看docker是否启动成功</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="4-配置镜像加速（aliyun）">4.配置镜像加速（aliyun）</h2><p>参考<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云的镜像加速文档</a></p><p>您可以通过修改<code>daemon</code>配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://f60pc39m.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1>十一 Docker基本操作</h1><h2 id="1-镜像相关命令">1.镜像相关命令</h2><ul><li>镜像名称一般分两部分组成：[repository]:[tag]。</li><li>没有指定<code>tag</code>时，默认是<code>latest</code>，代表最新版本的镜像</li></ul><h2 id="2-镜像操作命令">2.镜像操作命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build</span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi</span><br><span class="line"><span class="comment"># 从服务拉起镜像</span></span><br><span class="line">docker pull</span><br><span class="line"><span class="comment"># 推送镜像到服务</span></span><br><span class="line">docker push</span><br><span class="line"><span class="comment"># 保持镜像为压缩包</span></span><br><span class="line">docker save</span><br><span class="line"><span class="comment"># 加载压缩包为镜像</span></span><br><span class="line">docker load</span><br><span class="line"><span class="comment"># 查看帮助文档</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><img src="https://qnyoss.lovehao.ren/blog/Docker_%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.jpg" alt="Docker操作命令"></p><h2 id="DockerHub">DockerHub</h2><p><a href="https://hub.docker.com/">DockerHub网址：</a> <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1>十二 容器相关命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行 </span></span><br><span class="line">docker run</span><br><span class="line">docker run --name mn  -p 80:80 -d nginx</span><br><span class="line"><span class="comment"># 暂停</span></span><br><span class="line">docker pause</span><br><span class="line"><span class="comment"># 恢复暂停</span></span><br><span class="line">docker unpause</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker stop</span><br><span class="line"><span class="comment"># 恢复停止</span></span><br><span class="line">docker start</span><br><span class="line"><span class="comment"># 查看容器状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看容器运行日志</span></span><br><span class="line">docker logs</span><br><span class="line"><span class="comment"># 持续监控日志</span></span><br><span class="line">docker logs -f</span><br><span class="line"><span class="comment"># 进入容器执行命令</span></span><br><span class="line">docker <span class="built_in">exec</span></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><p><img src="https://qnyoss.lovehao.ren/blog/Docker_%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C.jpg" alt="容器操作"></p><h1>十三 数据卷</h1><h2 id="1-容器与数据耦合的问题">1.容器与数据耦合的问题</h2><ul><li>不便于修改：当我们要修改<code>Nginx</code>的<code>html</code>内容时，需要进入容器内部修改，很不方便。</li><li>数据不可复用：在容器内的修改对外是不可见的。所有修改对新建的容器是不可复用的。</li><li>升级维护困难：数据在容器内，如果需要升级容器必然删除旧容器，所有数据都跟着删除了。</li></ul><h2 id="2-什么是数据卷？">2.什么是数据卷？</h2><p><strong>数据卷（volume）</strong> 是一个虚拟目录，指向宿主机文件系统的某个目录。<br><img src="https://qnyoss.lovehao.ren/blog/%E6%95%B0%E6%8D%AE%E5%8D%B7.jpg" alt="数据卷"></p><h2 id="3-数据卷的操作命令">3.数据卷的操作命令</h2><p>数据卷操作的基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure><p><code>docker volume</code>命令是数据卷操作，根据命令后跟随的<code>command</code>来确定下一步操作：`</p><ul><li><code>create</code>  创建一个volume</li><li><code>inspect</code> 显示一个或者多个volume的信息</li><li><code>ls</code>      列出所有的volume</li><li><code>prune</code>   删除未使用的volume</li></ul><h2 id="4-挂载数据卷">4.挂载数据卷</h2><p>我们在创建容器时，可以通过<code>-v</code>参数来挂载一个数据卷到某个容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  nginx</span><br><span class="line"><span class="comment"># 目录挂载与数据卷挂载语法类似</span></span><br><span class="line">-v [宿主机目录]:[容器内目录]</span><br><span class="line">-v [宿主机文件]:[容器内文件]</span><br></pre></td></tr></table></figure><h1>十四 Dockerfile自定义镜像</h1><h2 id="1-镜像的分层结构">1.镜像的分层结构</h2><ul><li><code>BaseImage层</code>：包含基本的系统函数库、环境变量系统文件</li><li><code>EntryPoint层</code>：入口，是镜像中启动的命令</li><li>其他：在<code>BaseImage</code>基础上添加依赖、安装程序、完成整个应用 的安装和配置</li></ul><h2 id="2-什么是Dockerfile？">2.什么是Dockerfile？</h2><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令（Instruction）</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层<code>Layer</code>。</p><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center"><code>FROM</code></td><td style="text-align:center">指定基础镜像</td><td style="text-align:center">FROM centos:7</td></tr><tr><td style="text-align:center"><code>ENV</code></td><td style="text-align:center">设置环境变量，可在后面指令使用</td><td style="text-align:center">ENV key value</td></tr><tr><td style="text-align:center"><code>COPY</code></td><td style="text-align:center">拷贝本地文件到镜像的指定目录</td><td style="text-align:center">COPY ./mysql-5.7.rpm /temp</td></tr><tr><td style="text-align:center"><code>RUN</code></td><td style="text-align:center">执行<code>Linux</code>的<code>shell</code>命令，一般是安装过程的命令</td><td style="text-align:center">RUN yum install gcc</td></tr><tr><td style="text-align:center"><code>ENTRYPOINT</code></td><td style="text-align:center">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:center">ENTRY java -jar xxx.jar</td></tr></tbody></table><p>更详细的语法说明，请参考<a href="https://docs.docker.com/engine/reference/builder">官方文档</a>：<a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h1>十五 DockerCompose</h1><h2 id="1-什么是DockerCompose">1.什么是DockerCompose</h2><ul><li><code>Docker Compose</code>可以基于<code>Compose文件</code>帮我们快速的部署分部式应用，而无需手动一个一个创建和运行容器！</li><li><code>Compose文件(yaml文件)</code>是一个文本文件，可以通过指令集定义集群中的每个容器如何运行。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/mysql/data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/mysql/conf/hmy.cnf:/ect/mysql/conf.d/hmy.cnf</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8090</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-安装DockerCompose">2.安装DockerCompose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/dowmload/1.29.1/docker-compose-<span class="string">&#x27;uname -s&#x27;</span>-<span class="string">&#x27;uname -m&#x27;</span> &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 2.修改文件权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 3.Base自动补全命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt; /etc/hosts</span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><h1>十六 Docker 镜像仓库</h1><h2 id="1-常见镜像仓库服务">1.常见镜像仓库服务</h2><p><code>镜像仓库（Docker Registry）</code>有公共的和私有的两种形式：</p><ul><li>公共仓库：例如<code>Docker</code>官方的Docker Hub，国内也有一些云服务商提供类似于DockerHub的公开服务，比如网易云镜像服务、DaoCloud镜像服务、阿里云镜像服务等。</li><li>除了使用公开仓库外，用户还可以在本地搭建私有Docker Registry。企业自己的镜像最好是采用私有Docker Registry来实现。</li></ul><h2 id="2-简化版搭建（无图形化界面，不推荐）">2.简化版搭建（无图形化界面，不推荐）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h2 id="3-带图形化界面版本">3.带图形化界面版本</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-配置Docker信任地址">4.配置Docker信任地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加修改内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl docker reload</span><br></pre></td></tr></table></figure><h2 id="5-在私有镜像仓库推送或拉取镜像">5.在私有镜像仓库推送或拉取镜像</h2><p>推送镜像到私有镜像必先<code>tag</code>，步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 重新tag本地镜像，名称前缀为私有仓库的地址：192.167.150.101：8080、</span></span><br><span class="line">docker tag nginx:latest 192.168.127.131:8080/nginx:1.0</span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push 192.168.127.131:8080/nginx:1.0</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull 192.168.127.131:8080/nginx:1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220607)</title>
      <link href="/2022/06/07/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220607/"/>
      <url>/2022/06/07/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220607/</url>
      
        <content type="html"><![CDATA[<h1>最长公共前缀II</h1><p><strong>题目：</strong> 已知某二叉树的先序序列和中序序列，编程计算并输出该二叉树的后序序列。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串数组</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前缀字符串</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>思路：</strong><br>用一个变量来保存最长的前缀，将第一个数组字符串作为基串，逐个匹配后面元素的字符串。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt; &amp;strs)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs.<span class="built_in">empty</span>() || strs.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            vector&lt;string&gt;::iterator t;</span><br><span class="line">            string prefix;</span><br><span class="line">            <span class="type">char</span> stemp;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                stemp = strs[<span class="number">0</span>][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; strs.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(stemp != strs[j][i])</span><br><span class="line">                        <span class="keyword">return</span> prefix;</span><br><span class="line">                &#125;</span><br><span class="line">                prefix += stemp;</span><br><span class="line">                i++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> prefix;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; strs;</span><br><span class="line"><span class="comment">//    strs.push_back(&quot;flower&quot;);</span></span><br><span class="line"><span class="comment">//    strs.push_back(&quot;flow&quot;);</span></span><br><span class="line"><span class="comment">//    strs.push_back(&quot;flight&quot;);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    strs.push_back(&quot;dog&quot;);</span></span><br><span class="line"><span class="comment">//    strs.push_back(&quot;racecar&quot;);</span></span><br><span class="line"><span class="comment">//    strs.push_back(&quot;car&quot;);</span></span><br><span class="line"></span><br><span class="line">    strs.<span class="built_in">push_back</span>(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    strs.<span class="built_in">push_back</span>(<span class="string">&quot;dogracecar&quot;</span>);</span><br><span class="line">    strs.<span class="built_in">push_back</span>(<span class="string">&quot;docar&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Solution s;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">longestCommonPrefix</span>(strs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220602)</title>
      <link href="/2022/06/02/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220602/"/>
      <url>/2022/06/02/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220602/</url>
      
        <content type="html"><![CDATA[<h1>盛最多水的容器 I</h1><p><strong>题目：</strong> 给定 <code>n</code> 个非负整数 <code>a1</code>，<code>a2</code>，<code>...</code>，<code>an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code>。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><blockquote><p>说明：你不能倾斜容器，且 <code>n</code> 的值至少为 <code>2</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E4%B9%98%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A81.png" alt="容器示意图" title="图中垂直线代表输入数组[1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49"></p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由方括号包裹以逗号分隔的整型数组</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整型数字</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,8,6,2,5,4,8,3,7]</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">49</span><br></pre></td></tr></table></figure><p><strong>思路：</strong><br>双重循环暴力破解</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> s;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="comment">// 解析输入的字符串 </span></span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            res = res * <span class="number">10</span> + s - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(res);</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(res);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    获取最大面积 </span></span><br><span class="line">    <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j&lt;nums.<span class="built_in">size</span>(); j++)</span><br><span class="line">            maxArea = <span class="built_in">max</span>(maxArea, <span class="built_in">min</span>(nums[i], nums[j]) * (j - i));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxArea;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度面试总结</title>
      <link href="/2022/04/10/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/10/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>和CSS相关求字体的大小 主要问css的权重</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* ...这里还有一部分，具体的记不清楚了，和c没关 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a</span>, <span class="selector-class">.b</span>, <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span><br><span class="line">    i am here</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>js代码分析(太紧张代码没看清)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a =<span class="number">0</span>, b = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  A = <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(a+b++)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">alert</span>(a++)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">A</span>(<span class="number">2</span>) <span class="comment">// 答的3实际 4</span></span><br></pre></td></tr></table></figure><h1>从输入一个URL到拿到页面的整个流程</h1><h1>写一个使用Promise的示例</h1><h1>JWT是什么</h1><h1>你了解过ES6的哪些新特性</h1><h1>Vue2 和 Vue3 的区别</h1><h1>什么是 RBAC 模型</h1><h1>什么是WebSocket协议</h1><h1>了解过HTTPS吗</h1><h1>这个私钥和公钥是什么原理</h1><h1>你在大学是怎么学习前端知识的</h1><h1>箱子里有100个球，我和你一起在拿球，一人拿一次，每次可以拿1～5个，你先拿，怎么保证你拿到最后一个球</h1><h1>Vue 的响应式是怎么实现的</h1><h1>实现 Promise.all()</h1>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2022/04/09/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2022/04/09/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1>函数节流(throttle)</h1><p><strong>节流：</strong> 让函数<strong>有节制</strong>地执行，而不是毫无节制的触发一次就执行一次。什么叫有节制呢？就是在<strong>一段时间内，只执行一次</strong></p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fun 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; delay 间隔触发的时间 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fun, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>, timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      flag = <span class="literal">true</span></span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景：</strong></p><ul><li>鼠标的点击事件</li><li>监听滚动事件</li></ul><h1>函数防抖(debounce)</h1><p><strong>防抖：</strong> 在事件被触发<code>n</code>秒后再执行回调，如果在这<code>n</code>秒内又被触发，则重新计时。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fun, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fun.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景：</strong></p><ul><li>搜索框提示</li><li>调整窗口大小</li><li>防止多次表单提交</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现水平垂直居中的几种方式</title>
      <link href="/2022/04/09/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/09/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>实现水平垂直居中的几种方式</h1><h2 id="基本页面代码">基本页面代码</h2><p><strong>代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent-text</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:blueviolet;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent-text&quot;</span>&gt;</span>我是父元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面示意图：</strong><br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F(%E5%9B%BE%E4%B8%80).png" alt="水平垂直居中的几种方式"></p><h2 id="Mode-One-Flex-布局">Mode One Flex 布局</h2><p><code>flex</code> 布局的方式需要将父元素变为 <code>flex</code> 布局，再设置父元素的垂直居中和水平居中。</p><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/* 新增flex的样式 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent-text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F_%E5%9B%BE%E4%BA%8C.png" alt="水平垂直居中的几种方式_图二"></p><h2 id="Mode-Two-绝对定位">Mode Two 绝对定位</h2><p>绝对定位主要利用定位和平移实现元素的水平垂直居中</p><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent-text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:blueviolet;</span><br><span class="line">  <span class="comment">/* 新增的绝对定位的样式 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F_%E5%9B%BE%E4%B8%89.png" alt="水平垂直居中的几种方式_图三.png"></p><blockquote><p>注意：使用此方法一定要父元素相对定位</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌套数组的扁平化处理</title>
      <link href="/2022/04/08/%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/08/%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>JavaScript 实现数组的扁平化处理</h1><h2 id="什么是数组的扁平化处理">什么是数组的扁平化处理</h2><p><strong>数组的扁平化处理</strong>指将一个<strong>多维数组</strong>变成<strong>一维数组</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, [2, 3, [4, 5]]] ---&gt; [ 1, 2, 3, 4, 5 ]</span><br></pre></td></tr></table></figure><h2 id="Mode-One-方式一-ES6-的-flat">Mode One (方式一) <code>ES6</code> 的 <code>flat()</code></h2><p><code>ES6</code> 提供了数组方法 <code>flat(depth)</code> 对数组进行扁平化处理。</p><p>参数：</p><ul><li><code>depth</code> 被扁平化的数组的层级，默认值为 <code>1</code> 可以为 <code>Infinity</code> ，表示完全扁平化<br>返回值：</li><li>一个扁平化处理后的新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h2 id="Mode-Two-方式二-ES6-的-拓展运算符">Mode Two (方式二) <code>ES6</code> 的 拓展运算符</h2><p><code>...[]</code> 能用于拓展数组，将一个数组转为用逗号分隔的参数序列。</p><p><strong>思想：</strong> 通过<code>arr.some()</code>判断数组是否还嵌套数组，嵌套就对嵌套在最外层的数组进行拓展运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓展运算符扁平化处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; arr 可展开的数组结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 展开后的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatDeep</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">while</span>(arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)))&#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatDeep</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mode-Three-方式三-Array-reduce-进行拓展">Mode Three (方式三) Array.reduce() 进行拓展</h2><p><code>Array.reduce(pre, next)</code> 能够对数组进行累计处理</p><p><strong>参数：</strong></p><ul><li><code>pre</code> 方法的前一个返回结果</li><li><code>next</code> 当前数组元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 reduce() 方法进行扁平化处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; arr 数组对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduceFlatDeep</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next) ? <span class="title function_">reduceFlatDeep</span>(next) : next), []) <span class="comment">// Array.isArray(next) ? pre.concat(reduceFlatDeep(next)) : pre.concat(next)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reduceFlatDeep</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h2 id="Mode-Four-方式四-递归实现">Mode Four (方式四) 递归实现</h2><p><strong>思想：</strong> 对每一层的每一个数组进行处理，使其变成一维数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归进行数组扁平化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diGuiFlat</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(<span class="title function_">diGuiFlat</span>(item))</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">diGuiFlat</span>(arr))  <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h2 id="Mode-five-方式五-toStirng-和-split">Mode five (方式五) toStirng() 和 split()</h2><p><code>toString()</code> 能够将数组转为以 <code>,</code> 分割的字符串.</p><p><code>splt(flag)</code> 能够将字符串以 <code>flag</code> 进行分割</p><p><strong>参数：</strong></p><ul><li><code>flag</code> 指定的字符串分割字符</li></ul><p><strong>思想：</strong> 先通过 <code>toString()</code> 方法将数组转为字符串，再通过 <code>split()</code> 方法将字符串转为数组，再通过 <code>map()</code> 函数改变转变后的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * toStirng() 和 split() 扁平化处理数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; arr 嵌套数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toStringAndSplitFLat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toStringAndSplitFLat</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这个方法会改变原数据的数据类型，谨慎使用</p></blockquote><h2 id="Mode-Six-方式六-join-和-split">Mode Six (方式六) join() 和 split()</h2><p><code>join(flag)</code> 方法能够以 <code>flag</code> 连接数组元素</p><p><strong>参数：</strong></p><ul><li><code>flag</code> 指定的字符串连接字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; arr 嵌套数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">joinAndSpltFlat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">joinAndSpltFlat</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组扁平化处理 </tag>
            
            <tag> 算法技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的双向绑定原理</title>
      <link href="/2022/04/08/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
      <url>/2022/04/08/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>Vue 的双向绑定原理</h1><p><strong>主页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 文本内容：&lt;input id=&quot;#input&quot; type=&quot;text&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/complie.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> selfVue = <span class="keyword">new</span> <span class="title class_">SelfVue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;哈哈哈&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        selfVue.<span class="property">title</span> = <span class="string">&quot;你好&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(selfVue.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>SelfVue</code> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; data 数据对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; el dom节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; prop 字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SelfVue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">methods</span> = options.<span class="property">methods</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">data</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">proxyKeys</span>(key))</span><br><span class="line">  <span class="title function_">observe</span>(<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Compile</span>(options.<span class="property">el</span>, <span class="variable language_">this</span>)</span><br><span class="line">  options.<span class="property">mounted</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SelfVue</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key 属性名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">proxyKeys</span>(<span class="params">key</span>)&#123; <span class="comment">// 省略掉 .data 的操作</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>[key] = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Observer</code> 观察者对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; data 需要被观察的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">data</span>) &#123; <span class="comment">// 观察者</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">walk</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Observer</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为对象的所有属性进行劫持</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; data 需要绑定的对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">definReactive</span>(data, key, data[key]))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 进行数据属性劫持</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; object 当前对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key 属性名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; val 属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">definReactive</span>(<span class="params">object, key, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="title function_">observe</span>(val) <span class="comment">// 递归劫持</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(object, key, &#123; <span class="comment">// 访问器属性</span></span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123; <span class="comment">// 如果是Watcher第一次获取属性值，保存在 dep 中</span></span><br><span class="line">          dep.<span class="title function_">addSubs</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val <span class="comment">// 返回需要取的值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == newValue) &#123; <span class="comment">// 值为改变，不触发更新视图</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        val = newValue</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性：&#x27;</span> + key + <span class="string">&#x27;的值已被监听，当前值为：&#x27;</span> + newValue);</span><br><span class="line">        dep.<span class="title function_">notify</span>() <span class="comment">// 跟新值后通知 watcher 更新试图</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为对象，是否应该劫持</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; object 需要被监听的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">object</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!object || <span class="keyword">typeof</span> object !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observer</span>(object)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储watcher的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">subs</span>: [],</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Watcher</span>&#125; sub 订阅者实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">addSubs</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通知watcher更新视图</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> sub.<span class="title function_">update</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span> <span class="comment">// 静态属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Watcher</code> 订阅者对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">SelfVue</span>&#125; selfVue vue实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; prop 属性名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">selfVue, prop, callback</span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">callback</span> = callback <span class="comment">// 获取订阅后的回调函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">prop</span> = prop <span class="comment">// 属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">selfVue</span> = selfVue <span class="comment">// selfVue 实例</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>() <span class="comment">// 获取当前观察者的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123; <span class="comment">// 更新视图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123; <span class="comment">// 更新视图的流程</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">selfVue</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">prop</span>] <span class="comment">// 获取到 selfVue 的属性</span></span><br><span class="line">    <span class="keyword">let</span> oldVal = <span class="variable language_">this</span>.<span class="property">value</span> <span class="comment">// 获取旧的值</span></span><br><span class="line">    <span class="keyword">if</span> (value !== oldVal) &#123; <span class="comment">// 新旧值不相等</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value <span class="comment">// 更新旧值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callback</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">selfVue</span>, value, oldVal) <span class="comment">// 更新视图</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取当前值并缓存</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">selfVue</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">prop</span>]</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>complie</code> <strong>dom</strong>编译器对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译器对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; el 元素节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">SelfVue</span>&#125; selfVue selfVue实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Compile</span>(<span class="params">el, selfVue</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el) <span class="comment">// 获取当前元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">selfVue</span> = selfVue <span class="comment">// 获取 selfVue</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fragment</span> = <span class="literal">null</span> <span class="comment">// 文档片段置空</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>() <span class="comment">// 初始化文档片段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Compile</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fragment</span> = <span class="variable language_">this</span>.<span class="title function_">nodeToFragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(<span class="variable language_">this</span>.<span class="property">fragment</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">fragment</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Dom元素不存在&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 元素节点变成文档片段</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; el 元素节点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">nodeToFragment</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">let</span> child = el.<span class="property">firstChild</span></span><br><span class="line">    <span class="keyword">while</span> (child) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(el, child);</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(child) <span class="comment">// 会将元素在原位置移除</span></span><br><span class="line">      child = el.<span class="property">firstChild</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; el 元素节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = el.<span class="property">childNodes</span>;</span><br><span class="line">    [...childNodes].<span class="title function_">slice</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">      <span class="keyword">const</span> text = node.<span class="property">textContent</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node) &amp;&amp; reg.<span class="title function_">test</span>(text)) &#123; <span class="comment">// 处理文本节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node, reg.<span class="title function_">exec</span>(text)[<span class="number">1</span>]) <span class="comment">// reg.exec(text)[1] -&gt; 正则匹配&#123;&#123;&#125;&#125;的变量</span></span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123; <span class="comment">// 处理元素节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">complie</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">complie</span>(<span class="params">node</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> nodeAttrs = node.<span class="property">attributes</span>; <span class="comment">// 获取当前元素上的属性</span></span><br><span class="line">    [...nodeAttrs].<span class="title function_">forEach</span>(<span class="function"><span class="params">attr</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span> <span class="comment">// 获取属性名称</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123; <span class="comment">// 判断是否有 v- 开头</span></span><br><span class="line">        <span class="keyword">let</span> prop = attr.<span class="property">value</span> <span class="comment">// 获取属性值</span></span><br><span class="line">        <span class="keyword">let</span> dir = attrName.<span class="title function_">substring</span>(<span class="number">2</span>) <span class="comment">// 得到去掉 v- 之后的字符串</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEventDirective</span>(dir)) &#123; <span class="comment">// 判断是否为绑定事件</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">complieEvent</span>(node, <span class="variable language_">this</span>.<span class="property">selfVue</span>, prop, dir) <span class="comment">// 添加事件</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">complieModel</span>(node, <span class="variable language_">this</span>.<span class="property">selfVue</span>, prop, dir) <span class="comment">// 数据的双向绑定</span></span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(attrName) <span class="comment">// 移除属性名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; prop selfVue 的属性名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node, prop</span>) &#123; <span class="comment">// 处理文本节点</span></span><br><span class="line">    <span class="keyword">let</span> initText = <span class="variable language_">this</span>.<span class="property">selfVue</span>[prop] <span class="comment">// 获取 selfVue 中的属性名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateText</span>(node, initText) <span class="comment">// 处理文本节点的值</span></span><br><span class="line">    <span class="keyword">new</span>  <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">selfVue</span>, prop, <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">updateText</span>(node, value)) <span class="comment">// 为该属性设置观察者</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理事件绑定</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">SelfVue</span>&#125; selfVue selfVue实例</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; prop 属性名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; dir 去掉 v- 之后的事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">complieEvent</span>(<span class="params">node, selfVue, prop, dir</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> eventType = dir.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>] <span class="comment">// 获取事件类型</span></span><br><span class="line">    <span class="keyword">let</span> cb = selfVue?.<span class="property">methods</span>?.[prop]  <span class="comment">//获取事件回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (eventType &amp;&amp; cb) &#123; <span class="comment">// 判断事件名称和回调函数是否都不为空</span></span><br><span class="line">      node.<span class="title function_">addEventListener</span>(eventType, cb.<span class="title function_">bind</span>(selfVue), <span class="literal">false</span>) <span class="comment">// 问当前元素绑定事件</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`事件类型不可以为<span class="subst">$&#123;eventType&#125;</span>或<span class="subst">$&#123;prop&#125;</span>不可以为<span class="subst">$&#123;cb&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">SelfVue</span>&#125; selfVue vue实例</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; exp 属性名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; dir </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">complieModel</span>(<span class="params">node, selfVue, prop, dir</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = selfVue[prop] <span class="comment">// 获取当前属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">modelUpdater</span>(node, val) <span class="comment">// 处理节点内部的值</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(selfVue, prop, <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">modelUpdater</span>(node, value)) <span class="comment">// 为当前属性绑定观察者</span></span><br><span class="line">    node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 这里只处理了输入框的事件</span></span><br><span class="line">      <span class="keyword">let</span> newValue = e.<span class="property">target</span>.<span class="property">value</span> <span class="comment">// 得到输入的值</span></span><br><span class="line">      <span class="keyword">if</span>(val == newValue)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      selfVue[prop] = newValue <span class="comment">// 进行渲染</span></span><br><span class="line">      val = newValue <span class="comment">// 不可去掉，会出现BUG</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; value 数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">updateText</span>(<span class="params">node, value</span>) &#123; <span class="comment">// 处理未定义的文本节点为空字符串</span></span><br><span class="line">    node.<span class="property">textContent</span> = <span class="keyword">typeof</span> value == <span class="string">&quot;undefined&quot;</span> ? <span class="string">&#x27;&#x27;</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; value </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; oldValue </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, value, oldValue</span>) &#123; <span class="comment">// 处理未定义的节点的内容的值为空字符串</span></span><br><span class="line">    node.<span class="property">value</span> = <span class="keyword">typeof</span> value == <span class="string">&quot;undefined&quot;</span> ? <span class="string">&#x27;&#x27;</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否有 v- 开头</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; attr 属性名称</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 是否有 v- 开头</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">attr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> attr.<span class="title function_">indexOf</span>(<span class="string">&#x27;v-&#x27;</span>) == <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否 on: 开头</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; dir 去掉 v- 后的字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 是否 on: 开头</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isEventDirective</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dir.<span class="title function_">indexOf</span>(<span class="string">&#x27;on:&#x27;</span>) == <span class="number">0</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123; <span class="comment">// 判断是否为元素节点</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> == <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Node</span>&#125; node 元素节点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isTextNode</span>(<span class="params">node</span>) &#123; <span class="comment">// 判断是否为文本节点</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> == <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>TODO 由于时间关系，日后再详细分解讨论双向绑定的实现，先记录代码，有详细的注释</h1>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220403)</title>
      <link href="/2022/04/03/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220403/"/>
      <url>/2022/04/03/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220403/</url>
      
        <content type="html"><![CDATA[<h1>西安电子科技大学上机题（五）</h1><p><strong>题目：</strong> 已知某二叉树的先序序列和中序序列，编程计算并输出该二叉树的后序序列。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">仅一组数据，分为两行输入，第一行表示指定二叉树的先序序列，第二行表示该</span><br><span class="line"></span><br><span class="line">二叉树的中序序列，序列元素均为大写英文字符，表示二叉树的结点。</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一行上输出该二叉树的后序序列</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABDGCEFH</span><br><span class="line">DGBAECHF</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDBEHFCA</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识总结</title>
      <link href="/2022/04/02/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/02/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>前端知识总结</h1><h2 id="网络相关">网络相关</h2><h3 id="HTTP-、-HTTP-0-9-、-HTTP-1-0-、-HTTP-1-1-和-HTTP-1-1">HTTP 、 HTTP 0.9 、 HTTP 1.0 、 HTTP 1.1 和 HTTP 1.1</h3><p>HTTP 是一种协议，全称<strong>超文本传输协议(英文：Hyper Text Transfer Protocol)</strong>。它是一种构建在 <code>TCP/IP</code> 之上的应用层协议。主要用于实现客户端和服务端的沟通。</p><blockquote><p>五层网络结构主要包括：应用层、传输层、网络层、数据链路层、物理层。</p></blockquote><p><strong>HTTP的报文结构</strong><br><code>HTTP</code> 是基于 <code>TCP</code> 的，而 <code>TCP</code> 在传输时分为： <code>TCP</code> 头和数据部分。</p><p><code>HTTP</code> 请求报文由四部分组成：</p><ul><li>请求行</li><li>头部</li><li>空行</li><li>请求体</li></ul><p><strong>请求行</strong><br>请求行由三部分组成：</p><ul><li>请求方法</li><li>请求<code>url</code>(不包括域名)</li><li><code>HTTP</code> 协议版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /home HTTP/1.1</span><br></pre></td></tr></table></figure><p><em>请求方法</em>：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th><th>定义方法的协议</th></tr></thead><tbody><tr><td>1</td><td><code>GET</code></td><td>请求指定页面的信息，返回实体主体</td><td><code>HTTP 1.0</code></td></tr><tr><td>2</td><td><code>HEAD</code></td><td>类似于<code>GET</code>请求，只不过返回的响应没有具体内容，用于获取报头</td><td><code>HTTP 1.0</code></td></tr><tr><td>3</td><td><code>POST</code></td><td>向指定资源提交数据进行处理请求，数据包含在请求体中。<code>POST</code>请求可能会导致新的资源的建立或已有资源的修改</td><td><code>HTTP 1.0</code></td></tr><tr><td>4</td><td><code>PUT</code></td><td>从客户端向服务器传送的数据取代指定文档的内容</td><td><code>HTTP 1.1</code></td></tr><tr><td>5</td><td><code>DELETE</code></td><td>请求服务器删除指定的页面</td><td><code>HTTP 1.1</code></td></tr><tr><td>6</td><td><code>CONNECT</code></td><td><code>HTTP 1.1</code> 协议中预留给能够将连接改为管道方式的代理服务器</td><td><code>HTTP 1.1</code></td></tr><tr><td>7</td><td><code>OPTIONS</code></td><td>允许客户端查看服务器的性能</td><td><code>HTTP 1.1</code></td></tr><tr><td>8</td><td><code>TRACE</code></td><td>回显服务器收到的请求，主要用于测试或诊断</td><td><code>HTTP 1.1</code></td></tr><tr><td>9</td><td><code>PATCH</code></td><td>是对<code>PUT</code>方法的补充，用来对已知资源进行局部更新</td><td><code>HTTP 1.1</code></td></tr></tbody></table><p><strong>请求头部</strong><br>主要由键值对组成，每行一对。主要有：</p><ul><li><code>User-Agent</code>: 产生请求的浏览器类型</li><li><code>Accept</code>：客户端希望接受的数据类型</li><li><code>Content-Type</code>：发送端发送的实体的数据类型</li><li><code>Host</code>：请求的主机名</li></ul><p>常见的<code>Content-Type</code>:</p><table><thead><tr><th><code>Content-Type</code></th><th>解释</th></tr></thead><tbody><tr><td><code>text/html</code></td><td><code>html</code>格式</td></tr><tr><td><code>text/plain</code></td><td>纯文本格式</td></tr><tr><td><code>text/css</code></td><td><code>css</code>格式</td></tr><tr><td><code>text/javascript</code></td><td><code>JavaScript</code>格式</td></tr><tr><td><code>image/gif</code></td><td><code>gif</code>图片格式</td></tr><tr><td><code>image/jepg</code></td><td><code>jpg</code>图片个式</td></tr><tr><td><code>image/png</code></td><td><code>png</code>图片格式</td></tr><tr><td><code>application/x-www-form-urlencoded</code></td><td><code>POST</code>提交表单的默认方式，from表单序列化成键值对发送到服务器</td></tr><tr><td><code>application/json</code></td><td><code>POST</code>用来告诉服务端消息的主体是序列化后的JSON字符串</td></tr><tr><td><code>text/xml</code></td><td><code>POST</code>发送<code>xml</code>数据</td></tr><tr><td><code>multipart/from-data</code></td><td><code>POST</code>发送二进制数据，主要用于文件上传</td></tr></tbody></table><p><strong>空行</strong><br>请求头之后是空行，告诉服务端不再有请求头，用来区分头部和实体</p><p><strong>请求体</strong> 对应的就是具体的数据，就是<code>body</code>部分。</p><p><code>HTTP</code> 响应报文由三部分组成：</p><ul><li>状态行</li><li>响应头部</li><li>空行</li><li>内容实体</li></ul><p><strong>状态行</strong></p><ul><li>服务器 HTTP 协议版本</li><li>响应状态码</li><li>状态码文本描述</li></ul><p><code>HTTP</code> 响应状态码分类</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td><code>1**</code></td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td><code>2**</code></td><td>成功，操作成功接收并处理</td></tr><tr><td><code>3**</code></td><td>重定向，需要进一步的操作以完成</td></tr><tr><td><code>4**</code></td><td>客户端错误，请求包含语法错误，无法完成请求</td></tr><tr><td><code>5**</code></td><td>服务器错误，服务器在处理请求的过程中发送了错误</td></tr></tbody></table><p>常见 HTTP 状态码列表</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td><code>100</code></td><td><code>Continue</code></td><td>继续，客户端应继续其请求</td></tr><tr><td><code>101</code></td><td><code>Switch Protocols</code></td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td><code>200</code></td><td><code>OK</code></td><td>请求成功。一般用于 GET 和 POST 请求</td></tr><tr><td><code>202</code></td><td><code>Accepted</code></td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td><code>300</code></td><td><code>Multiple Choices</code></td><td>多种选择。请求的资源可包括多个位置，相应的可返回一个资源特征与地址的列表用于用户终端(例如：浏览器)选择</td></tr><tr><td><code>301</code></td><td><code>Moved Permanently </code></td><td>永久移动。请求的资源已被永久的移动到新 URI ，返回的信息会包括新的 URI ， 浏览器会自动定向到新的 URI ，今后任何新的请求都应使用新的 URI 代替</td></tr><tr><td><code>302</code></td><td><code>Found</code></td><td>临时移动。与 301 类似，但资源只是临时被移动。客户端应继续使用原 URI</td></tr><tr><td><code>303</code></td><td><code>See Other</code></td><td>表示资源存在着另一个 URL，应使用 GET 方法获取资源（对于301/302/303响应，几乎所有浏览器都会删除报文主体并自动用GET重新请求）</td></tr><tr><td><code>400</code></td><td><code>Bad Request</code></td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td><code>401</code></td><td><code>Unauthorized</code></td><td>表示发送的请求需要有通过 HTTP 认证的认证信息</td></tr><tr><td><code>403</code></td><td><code>Forbidden</code></td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td><code>404</code></td><td><code>Unauthorized</code></td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td><code>500</code></td><td><code>Internal Server Error</code></td><td>服务器内部错误，无法完成请求</td></tr><tr><td><code>502</code></td><td><code>Bad Gateway</code></td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td><code>503</code></td><td><code>Service Unavailable</code></td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr></tbody></table><p><strong>HTTP 0.9</strong></p><ul><li><code>1991 年</code>，原型版本，功能简陋，只有一个命令 <code>GET</code> ，只支持纯文本内容。</li></ul><p><strong>HTTP 1.0</strong></p><ul><li>任何格式的内容都可以发送，使得互联网不仅可以传输文字，还可以传输图像、视频、二进制等文件。</li><li>除了 <code>GET</code> 方法，还引入了 <code>POST</code> 方法 和 <code>HEAD</code> 命令</li><li>http 请求和回应的格式改变，除了数据部分，每次通信都必须包括头信息，用来描述元数据</li><li>只使用 <code>header</code> 中的 <code>if-Modified-Since</code> 和expires 作为缓存失效的标志</li><li>不支持断点续传，也就是说，每次都会传送全部的页面和数据</li><li>通常每台计算机只能绑定一个<code>IP</code>，所有请求消息的<code>URL</code>并没有传递主机名</li></ul><p><strong>HTTP 1.1</strong></p><ul><li>引入<strong>持久连接</strong>， <code>TCP</code> 连接默认不关闭，可以被多个请求复用，不用声明 <code>Connection: keep-alive</code>。长连接的连接时长可以通过请求头中的 <code>keep-alive</code> 来设置</li><li>引入<strong>管道机制</strong>，在同一个 <code>TCP</code> 连接里，客户端可以同时发送多个请求，进一步改进了<code>HTTP</code>协议的效率</li><li><code>HTTP 1.1</code> 中增加了 <code>E-tag</code> ， <code>If-Unmodified-Since</code> ， <code>If-Match</code> ， <code>If-None-Mathch</code> 等缓存控制标头来控制缓存失败</li><li>支持<strong>断电续传</strong>，通过使用请求头中的 <code>Range</code> 来实现</li><li>使用了<strong>虚拟网络</strong>，在一台物理服务器上可以存在多个虚拟主机，共享一个 <code>IP</code> 地址</li><li>新增 <code>PUT</code> 、 <code>PATCH</code> 、 <code>OPTIONS</code> 、 <code>DELETE</code> 方法</li></ul><p><strong>HTTP 1.x版本问题</strong></p><ul><li>在传输数据过程中，所有内容都是明文，客户端和服务器端都无法验证对象的身份，无法保证数据的安全性</li><li><code>HTTP 1.1</code> 版本默认允许复用 <code>TCP</code> 连接，但是在同一个 <code>TCP</code> 连接里，所有数据通信是按次序进行的，服务器通常在处理完一个回应后，才会继续处理下一个，造成队头阻塞</li><li><code>HTTP 1.x</code> 版本支持 <code>keep-alive</code> ，用此方案来弥补创建多次产生的延迟，但同样会给服务器带来压力。</li></ul><p><strong>HTTP 2.0</strong></p><ul><li><strong>二级制帧</strong>。这是一次彻底的二进制协议，头信息和数据体都是二进制，并且统称为<strong>数据帧</strong></li><li><strong>头部压缩</strong>。<code>HTTP 1.1</code> 版本会出现头部，头部会占用几百甚至几千字节，而请求体经常只有几十字节，导致头部偏重的情况，<code>HTTP 2.0</code> 采用 <code>HPACK</code> 算法进行压缩</li><li><strong>多路复用</strong>。复用 <code>TCP</code> 连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，不用按顺序一一对应，解决队头阻塞的问题</li><li><strong>服务器推送</strong>，允许服务器未经请求，主动向客户端发送资源，即服务器推送</li><li><strong>请求优先级</strong>，可以设置数据帧的<strong>优先级</strong>，让服务端先处理重要资源，优化用户体验</li></ul><blockquote><p><strong><code>TCP</code> 三次握手</strong></p><ul><li>第一次握手：客户端发送初始序号<code>seq = x</code>和<code>SYN=1</code>的请求标志。此时服务器得知客户端发送正常，自己接收正常。</li><li>第二次握手：服务器发送请求标志<code>SYN=1</code>,确认标志<code>ACK=1</code>，自己的序号<code>seq=y</code>，发送客户端的确认信号<code>ack=x+1</code>。客户端知道自己发送、接收正常，服务器接收、发送正常。</li><li>第三次握手：客户端发送确认信号<code>ACK=1</code>，发送自己的序号<code>seq=x+1</code>，发送对方的确认号<code>ack=y+1</code>。服务器知道客户端发送、接收正常，自己接收、发送也正常。</li></ul></blockquote><blockquote><p><strong><code>TCP</code> 四次分手</strong></p><ul><li>第一次挥手：客户端发出释放<code>FIN=1</code>，自己序列号<code>seq=u</code>，进入<code>FIN-WAIT-1</code>状态，是客户端的请求断开。</li><li>第二次挥手：服务器收到客户端的请求后，发出<code>ACK=1</code>确认标志和客户端的确认号<code>ack=u+1</code>，自己的序列号<code>seq=v</code>，进入<code>CLOSE-WAIT</code>状态，服务器确认客户端的断开请求。</li><li>第三次挥手：客户端收到服务器确认结果后，进入<code>FIN-WAIT-2</code>状态。此时服务器发送释放<code>FIN=1</code>信号，确认标志<code>ACK=1</code>，确认序号<code>ack=u+1</code>，自己序号<code>seq=w</code>，服务器进入<code>LAST-ACK</code>（最后确认态），服务器请求断开。</li><li>第四次挥手：客户端收到回复后，发送确认<code>ACK=1</code>，<code>ack=w+1</code>，自己的<code>seq=u+1</code>，客户端进入<code>TIME-WAIT</code>（时间等待）。客户端经过<code>2</code>个最长报文段寿命后，客户端<code>CLOSE</code>；服务器收到确认后，立刻进入<code>CLOSE</code>状态，客户端确认服务器断开。</li></ul></blockquote><blockquote><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p><p>连接时，当服务端收到客户端的<code>SYN</code>连接请求报文后，可以直接发送<code>SYN+ACK</code>报文，对应用于同步+应答。连接关闭时，当服务端收到<code>FIN</code>报文时，也许还有话要说，并不会立即关闭<code>SOCKET</code>，所以不会立即返回一个<code>FIN</code>，而是先回复一个<code>ACK</code>报文，告诉客户端自己已经收到了<code>FIN</code>，而只有等服务端把要说的话说完，才能发送<code>FIN</code>，因此需要四步。</p></blockquote><p><strong>Connection:keep-alive 是什么</strong></p><p>keep-alive 能够使客户端到服务器的连接持续有效。</p><h3 id="websocket-知识">websocket 知识</h3><p><code>websocket</code> 是 <code>HTML5</code> 开始提供的一种浏览器与服务器进行<strong>全双工通信</strong>的网络技术，属于应用层协议。它基于 <code>TCP</code> 传输协议，复用 <code>HTTP</code> 的握手通道。</p><p><code>websocket</code> 的优点：</p><ul><li>支持双向通信，实时性更强</li><li>更好的二进制支持</li><li>较少的开销</li><li>支持拓展</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端建立 websocket 连接</span></span><br><span class="line"><span class="keyword">const</span> websocket = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123;</span><br><span class="line">    websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://ip:port/test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">websocket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">websocket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;退出连接&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">websocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息&quot;</span>+event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">websocket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接出错&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    websocket.<span class="title function_">close</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端搭建 websocket</span></span><br><span class="line"><span class="comment">// 已连接的客户端</span></span><br><span class="line"><span class="keyword">let</span> clients = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>)</span><br><span class="line"><span class="comment">// 启动端口为8888</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8001</span> &#125;);</span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;listening&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;【开始监听】：websocket server&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws, request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> id = request.<span class="property">url</span>.<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    id = <span class="built_in">parseInt</span>(id)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    ws.<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">headers</span>[<span class="string">&#x27;sec-websocket-protocol&#x27;</span>]);</span><br><span class="line">  clients[id + <span class="string">&#x27;s&#x27;</span>] = ws</span><br><span class="line">  <span class="comment">// 用户连接的提醒</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;【建立连接】：当前连接用户数量为：&#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">keys</span>(clients).<span class="property">length</span>);</span><br><span class="line">  <span class="comment">// 监听客户端的消息</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;【收到消息】：&quot;</span> + msg)</span><br><span class="line">    <span class="keyword">let</span> message = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      message = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msg)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">      clients[id + <span class="string">&#x27;s&#x27;</span>].<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">fromUId</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">toUId</span>: id,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">comtent</span>: <span class="string">&#x27;您发送的消息格式有误！&#x27;</span></span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(clients[<span class="string">`<span class="subst">$&#123;message.toUId&#125;</span>s`</span>]);</span><br><span class="line">    <span class="keyword">if</span> (message.<span class="property">type</span> == <span class="string">&quot;private&quot;</span> &amp;&amp; !clients[<span class="string">`<span class="subst">$&#123;message.toUId&#125;</span>s`</span>]) &#123;</span><br><span class="line">      </span><br><span class="line">      ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">fromUId</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">toUId</span>: id,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">comtent</span>: <span class="string">&#x27;当前用户不在线&#x27;</span></span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    message.<span class="property">fromUId</span> = id</span><br><span class="line">    <span class="keyword">if</span> (message.<span class="property">type</span> == <span class="string">&#x27;private&#x27;</span>) &#123;</span><br><span class="line">      clients[<span class="string">`<span class="subst">$&#123;message.toUId&#125;</span>s`</span>].<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">type</span> == <span class="string">&#x27;group&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> clients) &#123;</span><br><span class="line">        clients[key].<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听客户端错误</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听客户端断开连接</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 客户端断开连接,删除</span></span><br><span class="line">    <span class="keyword">delete</span> clients[id + <span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;【退出连接】: 当前连接用户数量为：&#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">keys</span>(clients).<span class="property">length</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听服务关闭</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wss close&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="DNS">DNS</h3><p><code>DNS</code> 协议提供的是一种主机名到 <code>IP</code> 地址的转换服务，就是我们常说的域名系统。是应用层的协议，通常该协议允许在<code>UDP</code>协议之上，使用的是<code>53</code>端口</p><p><code>DNS</code>在本地<code>DNS</code>服务器的查询过程(递归查询)<br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/DNS%E6%9F%A5%E6%89%BE%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B.png" alt="DNS查找递归查询过程"></p><p>本地 <code>DNS</code> 服务器向其他域名服务器请求的过程(迭代查询)<br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/DNS%E8%BF%AD%E4%BB%A3%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B.png" alt="DNS迭代查找过程"></p><blockquote><p><strong><code>DNS</code> 为什么使用 <code>UDP</code> 协议作为传输层协议？</strong></p><p><code>DNS</code> 使用 <code>UDP</code> 协议作为传输层协议的主要原因是为了避免使用 <code>TCP</code> 协议时造成的连接时延</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220402)</title>
      <link href="/2022/04/02/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220402/"/>
      <url>/2022/04/02/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220402/</url>
      
        <content type="html"><![CDATA[<h1>西安电子科技大学上机题（四）</h1><p><strong>题目：</strong> 对于给定的字符序列，从左至右将所有的数字字符取出拼接成一个无符号整数（字符序列长度小于<code>100</code>，拼接出的整数小于<code>2^31</code>），计算并输出该整数的最大因子（如果是素数，则其最大因子为自身）。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有多组数据，输入数据的第一行为一个正整数，表示字符序列的数目，每组数据为一行字符序列。</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个字符序列，取出所得整数的最大因子，若字符序列中没有数字或者找出的整数为0，则输出0，每个整数占一行输出。</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">qwq24</span><br><span class="line">3dnh5</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>思路：</strong><br>主要在于分三步完成</p><ul><li>首先获取用户输入，并用变量保存好</li><li>拆分出用户输入的字符串中的无符号数字保存在数组中</li><li>通过类似于求素数的方式求函数的因子(不同点在于不要从 sqrt(num) 开始，而应该从 num / 2 开始，因为 2 是最小的素数，而最大的因子除本身外应该是除 2 得到的数)，从大到小遍历</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNumArray</span><span class="params">(string strs[], <span class="type">int</span> nums[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(strs[i][j] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i][j] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; strs[i][j] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                num = num * <span class="number">10</span> + strs[i][j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMaxYinZi</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> maxYinZiArray[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = nums[i] / <span class="number">2</span>; j &gt; <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] % j == <span class="number">0</span>)&#123;</span><br><span class="line">                maxYinZiArray[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">1</span>)</span><br><span class="line">            maxYinZiArray[i] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string strs[n];</span><br><span class="line">    <span class="type">int</span> nums[n];</span><br><span class="line">    <span class="type">int</span> maxYinZiArray[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; strs[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getNumArray</span>(strs, nums, n);</span><br><span class="line">    <span class="built_in">getMaxYinZi</span>(nums, maxYinZiArray, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        cout &lt;&lt;  maxYinZiArray[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路(六) 函数表达式</title>
      <link href="/2022/04/01/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E5%85%AD)%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/04/01/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E5%85%AD)%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>定义函数</h1><p>函数定义的两种方式：</p><ul><li>函数声明式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">arg0, arg1, ...</span>)&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">function</span> (<span class="params">arg0, arg1, ...</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明式的特性：<strong>函数声明提升</strong>。</p><p><strong>函数声明提升</strong>是指在执行代码之前，会先读取函数声明。这样函数的调用就不必放在函数声明之后。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明提升 示例 先调用在声明</span></span><br><span class="line"><span class="title function_">sayHi</span>() <span class="comment">// Hi! </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>递归</h1><p><strong>递归函数</strong>是指应该函数通过函数名调用自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归经典示例： 乘阶</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="title function_">factorial</span>(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上例函数如果这样调用就会出现报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherFactorial = factorial</span><br><span class="line">factorial = <span class="literal">null</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherFactorial</span>(<span class="number">5</span>)) <span class="comment">// 出错</span></span><br></pre></td></tr></table></figure><p><strong>原因：</strong> 在 <code>factorial</code> 的函数体中，递归调用是通过调用函数名调用的方式，由于函数指向时 <code>factorial</code> 指向 <code>null</code> ，所有无法找到 <code>factorial</code> 并执行，因此会报错。</p><p><strong>解决方法：</strong> 将函数递归调用变成 <code>arguments.callee</code> 的方式，<code>arguments.callee</code> 指向当前正在执行的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>闭包</h1><p><strong>闭包</strong>是指有权访问另一个函数作用域的变量函数。</p><p><strong>创建闭包的常见方式：</strong> 在一个函数内部创建另一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createComparisonFunction</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value1 = object1[propertyName]</span><br><span class="line">    <span class="keyword">let</span> value2 = object2[propertyName]</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的使用</span></span><br><span class="line"><span class="keyword">const</span> compareFunction = <span class="title function_">createComparisonFunction</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compareFunction</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>因为闭包会携带函数的执行环境(函数的作用域)，因此会比其他函数占用更多的内存资源。所有需要谨慎使用闭包。</p></blockquote><h2 id="闭包与变量">闭包与变量</h2><p>闭包只能取得包含函数中任何变量的最后一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    res[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">0</span>]()) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">1</span>]()) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">2</span>]()) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>上面例子中的函数应该返回应该函数数组，表面上看，函数中的每个函数执行后应该返回它的索引值，但是实际上每个函数返回的都是 <code>10</code> 。原因在于每个函数中所引用的变量 <code>i</code> 都是同一个变量 <code>i</code> 。当 <code>createFunction()</code> 执行完成后， <code>i</code> 的值等于 <code>10</code> ，所有数组中每个函数返回的都是同一个变量的值 <code>10</code> 。我们可以通过创建另一个匿名函数强制让闭包的行为符合预期( <code>var</code> 定义的变量在函数内有块级作用域)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    res[i] = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">0</span>]()) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">1</span>]()) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createFunction</span>()[<span class="number">2</span>]()) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>当然上面的问题也与 <code>var</code> 定义的变量没有块级作用域有关，在 <code>ES6</code> 语法中可以通过 <code>let</code> 关键字定义变量 <code>i</code> 解决这个问题。</p></blockquote><h2 id="关于-this-对象">关于 this 对象</h2><p>this 对象是在运行时基于函数的执行环境绑定的：在全局函数中， this 等于 window ，而在函数被作为对象的方法调用时， this 等于当前调用方法的对象。匿名函数的执行具有全局性，它 this 对象通常指向 window 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getName</span>()()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>这里和书上写的不太一样，暂不清楚什么原因</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220401)</title>
      <link href="/2022/04/01/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220401/"/>
      <url>/2022/04/01/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220401/</url>
      
        <content type="html"><![CDATA[<h1>西安电子科技大学上机题（三）</h1><p><strong>题目：</strong> 请写一个程序，对于一个m行m列的（1 &lt; m &lt; 10）的方阵，求其每一行，每一列及主对角线元素之和，最后按照从大到小的顺序依次输出。</p><p>输入说明：共一组数据，输入的第一行为一个正整数，表示m，接下来的m行，每行m个整数表示方阵元素。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字方阵</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从大到小排列的一行整数，每个整数后跟一个空格，最后换行</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24 18 15 15 15 12 6</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ul><li>最优的算法在于用最少的循环做最多的事</li><li>本题简单，直接硬算，注意策略即可</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getSun</span><span class="params">(<span class="type">int</span> mat[][<span class="number">10</span>], <span class="type">int</span> m, <span class="type">int</span> *res)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line">            res[i] +=  mat[i][j];</span><br><span class="line">            res[i + m] += mat[j][i];</span><br><span class="line">            <span class="keyword">if</span>(i == j)</span><br><span class="line">                res[<span class="number">2</span> * m] += mat[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> mat[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> res[<span class="number">2</span> * m + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; mat[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getSun</span>(mat, m, res);</span><br><span class="line">    <span class="built_in">sort</span>(res, res + (<span class="number">2</span> * m + <span class="number">1</span>), compare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">2</span> * m + <span class="number">1</span>; i++)</span><br><span class="line">        cout &lt;&lt; res[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> C语言中，在函数中定义的数组有作用域限制，无法直接 <code>return</code> 需要先初始化再传入函数中操作，或者在函数中使用 <code>new</code> 开辟空间，再 <code>return</code> 返回。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220331)</title>
      <link href="/2022/03/31/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220331/"/>
      <url>/2022/03/31/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220331/</url>
      
        <content type="html"><![CDATA[<h1>西安电子科技大学上机题（二）</h1><p><strong>题目：</strong> 写一个程序，给出指定整数范围<code>[a ,b]</code>内所有的<strong>完数</strong>，一个数如果恰好等于除它本身外的<strong>所有因子之和</strong>，这个数就称为<strong>完数</strong>，例如<code>6</code>是<strong>完数</strong>，因为<code>6=1+2+3</code>。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">共一组数据，为两个正整数，分别表示a和b（1&lt;a&lt;b&lt;10^5）</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定范围内的所有完数，每个数占一行</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">28</span><br><span class="line">原题样例应该有误：是闭区间[6, 100]应当输出：</span><br><span class="line">6</span><br><span class="line">28</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ul><li>循环遍历范围内所有的数</li><li>求出每个数的因子有哪些</li><li>求出因子的和看是否会等于当前数</li><li>等于则保存在数组或者 <code>vector</code> 中</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getYinZi</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123; <span class="comment">// 求数的因子</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; yinzi;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = num/<span class="number">2</span>; i&gt;=<span class="number">2</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)</span><br><span class="line">            yinzi.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> yinzi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isWanShu</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123; <span class="comment">// 判断是否为完数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; yinzi = <span class="built_in">getYinZi</span>(num);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator t;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(t = yinzi.<span class="built_in">begin</span>(); t != yinzi.<span class="built_in">end</span>(); t++) &#123;</span><br><span class="line">        sum += *t;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum == num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; begin;</span><br><span class="line">    cin &gt;&gt; end;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = begin; i&lt;=end; i++)&#123; <span class="comment">// 循环获取区间内的完数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isWanShu</span>(i))</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong></p><ul><li>可以使用 <code>map</code> 数据类型记录前面已经遍历过的数的因子，减少计算因子需要的时间，但同时会带来巨大的内存资源消耗，<strong>不建议使用</strong>。</li><li>因子一定是属于素数和1组成，因此可以先计算出一定量的素数数组或者 vector ，再通过循环对素数列表进行求余，得到当前数的因子列表，再判断是否为完数。</li></ul><p><strong>注意点：</strong><br>本题一定要<strong>先求因子</strong>，再<strong>求和计算</strong>，如果先求求和的数再判断是否为因子将计算量翻很多倍，算法效率极低。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日编程(20220330)</title>
      <link href="/2022/03/30/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220330/"/>
      <url>/2022/03/30/%E6%AF%8F%E6%97%A5%E7%BC%96%E7%A8%8B-20220330/</url>
      
        <content type="html"><![CDATA[<h1>西安电子科技大学上机题（一）</h1><p><strong>题目：</strong> 编写一个程序，从键盘输入 <code>n</code> 个非零常数(<code>0 &lt; n &lt; 1000</code>),将这 <code>n</code> 个数中每个数的各位数字取出来相加，并按照从小到大的次序输出这些数字和。</p><p><strong>输入格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的整数之间以空格分割，输入为 0 时结束</span><br></pre></td></tr></table></figure><p><strong>输出格式：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一行上从小到大输出计算结果，整数之间用一个空格分割，最后换行</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">56 12 789 521 0</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 8 11 24</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ul><li>先获取内存缓冲区中的输入值，对得到的空格分隔的字符串一个一个进行处理。</li><li>将每个字符串按索引相加，得到值，并存入向量中。</li><li>对向量进行排序。</li><li>按照固定格式输出向量里面的值</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">while</span>((cin &gt;&gt; s) &amp;&amp; s != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 56 12 789 521 0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;s.<span class="built_in">length</span>(); i++)</span><br><span class="line">            val += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator t;</span><br><span class="line">    <span class="keyword">for</span>(t = res.<span class="built_in">begin</span>(); t != res.<span class="built_in">end</span>(); t++)</span><br><span class="line">        cout &lt;&lt; *t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路(五)面向对象程序设计</title>
      <link href="/2022/03/28/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%BA%94)%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/03/28/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%BA%94)%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>理解对象</h1><p>创建自定义对象最简单的方式就是创建一个<code>Object</code>的实例，再为实例添加属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Object 实例 person</span></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">person.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">person.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="属性类型">属性类型</h2><p><code>ECMAScirpt</code> 中有两种属性类型： <code>数据属性类型</code> 和 <code>访问器属性</code></p><h3 id="数据属性">数据属性</h3><p>数据属性包含一个数值的位置。在这个位置可以读取和写入值。数据属性有<code>4</code>个描述其行为的特征：</p><ul><li><strong>[[Configurable]]</strong>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。直接在对象上定义属性，这个属性的默认值为 <code>true</code>。</li><li><strong>[[Enumerable]]</strong>：表示能否通过 for-in 循环返回属性。直接在对象上定义属性，这个属性的默认值为 <code>true</code>。</li><li><strong>[[Writable]]</strong>：表示能否修改属性的值。直接在对象上定义属性，这个属性的默认值为 <code>true</code>。</li><li><strong>[[Value]]</strong>：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性的时候，把新值保存在这个位置。这个属性的默认值为 <code>undefined</code> 。</li></ul><p>要修改属性默认的特性，必须使用 <code>ECMAScript 5</code> 的 <code>Object.defineProperty()</code> 方法。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。描述符对象的属性必须是： <code>configurable</code> 、<code>enumerable</code>、 <code>writable</code> 和 <code>value</code>。设置其中的一个或多个值，可以修改对象的特性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// zs</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;ls&#x27;</span> <span class="comment">// writable 为 false 不可修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// zs</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;gender&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 男</span></span><br><span class="line">person.<span class="property">gender</span> = <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h3 id="访问器属性">访问器属性</h3><p>访问器属性不包含数据值：它们包含一对 getter 和 setter 函数(不过这两个函数不是必须的)。在<strong>读取</strong>访问器属性时，会调用 getter 函数，这个函数负责返回有效的值，在<strong>写入</strong>访问器属性时，会调用 setter 函数并传入新值，这个函数负责决定如何处理数据。</p><p>访问器的4个特性：</p><ul><li><strong>[[Configurable]]</strong>：表示能否通过 delete 删除属性，从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。直接在对象上定义属性，这个属性的默认值为 <code>true</code>。</li><li><strong>[[Enumerable]]</strong>：表示能否通过 for-in 循环返回属性。直接在对象上定义属性，这个属性的默认值为 <code>true</code>。</li><li><strong>[[Get]]</strong>：在读取属性时调用的函数。默认值为 undefined。</li><li><strong>[[Set]]</strong>：在写入属性时调用的函数。默认值为 undefined。</li></ul><p>访问器属性不能直接定义使用，必须使用 <code>Object.defineProperty()</code> 来定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">_idcard</span>: <span class="number">123456789</span> <span class="comment">// _idcard 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;idcard&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = newValue - <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_idcard</span> = newValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.<span class="property">idcard</span> = <span class="number">123456791</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>访问器属性的常见作用是设置一个属性的值会导致其他属性发送变化。</p><blockquote><p>在<code> Object.defineProperty()</code> 方法之前，要创造访问器属性一般都使用两个非标准方法：<code>__defineGetter__()</code> 和 <code>__definedSetter__()</code>。</p></blockquote><h2 id="定义多个属性">定义多个属性</h2><p><code>ECMAScript 5</code> 中对象定义多个属性可以使用 <code>Objetc.denfineProperties()</code> 方法。利用这个方法可以通过描述符一次性定义多个属性。参数：第一个参数是需要修改对象，第二个需要的参数是第一个参数中需要添加或者修改的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义多个属性</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">  <span class="attr">_idcard</span>: &#123; <span class="comment">// 数据属性</span></span><br><span class="line">    <span class="attr">value</span>: <span class="number">123456789</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">idcard</span>: &#123; <span class="comment">// 访问器属性</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = newValue - <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_idcard</span> = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="读取属性的特性">读取属性的特性</h2><p><code>ECMAScript 5</code> 的 <code>Object.getOwnPropertyDescriptor()</code> 方法，可以取得给定属性的描述符。参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对，如果是访问器属性，这个对象的属性有： <code>configurable</code> 、 <code>enumerable</code> 、 <code>get</code> 和 <code>set</code> 。如果是数据属性，这个对象的属性有： <code>configurable</code> 、 <code>enumerable</code> 、 <code>writable</code> 和 <code>value</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取属性的特性</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">  <span class="attr">_idcard</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">123456789</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">idcard</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = newValue - <span class="variable language_">this</span>.<span class="property">_idcard</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_idcard</span> = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor1 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;_idcard&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor1) <span class="comment">// &#123;value: 123456789, writable: false, enumerable: false, configurable: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor2 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;idcard&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor2) <span class="comment">// &#123;enumerable: false, configurable: false, get: ƒ, set: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h1>创建对象</h1><p><code>Object</code> 构造函数和对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。</p><h2 id="工厂模式">工厂模式</h2><p>ECMAScript 中无法创建类，开发人员发明了一种函数，用函数来封装以特定的接口创建对象的细节。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  object.<span class="property">name</span> = name</span><br><span class="line">  object.<span class="property">age</span> = age</span><br><span class="line">  object.<span class="property">gender</span> = gender</span><br><span class="line">  object.<span class="property">sayName</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zs = <span class="title function_">createPerson</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs) <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 18, gender: &#x27;男&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br><span class="line"><span class="keyword">const</span> ls = <span class="title function_">createPerson</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ls) <span class="comment">// &#123; name: &#x27;ls&#x27;, age: 18, gender: &#x27;女&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="构造函数模式">构造函数模式</h2><p>构造函数创建特定类型的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs) <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 18, gender: &#x27;男&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br><span class="line"><span class="keyword">const</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ls) <span class="comment">// &#123; name: &#x27;ls&#x27;, age: 18, gender: &#x27;女&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br></pre></td></tr></table></figure><p>与工厂模式不同的是：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋值给了 <code>this</code> 对象</li><li>没有 <code>return</code> 语句</li></ul><blockquote><p>构造函数的函数名的首字母最好大写，以区分其他函数，构造函数也是函数，只不过可以用来创建对象。</p></blockquote><p>创建新实例必须使用 <code>new</code> 操作符。有以下四个步骤：</p><ul><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象(因此 this 就指向看这个新对象)</li><li>执行构造函数中的代码(为新对象添加属性)</li><li>返回新对象</li></ul><p><code>person1</code> 和 <code>person2</code> 都分别保存着 <code>Person</code> 的不同实例。这两个对象都拥有 <code>constructor(构造函数)</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">constructor</span> = <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">constructor</span> = <span class="title class_">Person</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="构造函数当作函数">构造函数当作函数</h3><p>构造函数和其他函数的不同在于调用的方式。构造函数也是函数的一种，不存在定义构造函数的特殊语法。任何函数只要通过 <code>new</code> 操作符来调用，那么她就可以作为沟站是；而任何函数，如果不通过 <code>new</code> 操作符来调用，那他跟普通函数没什么区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当作构造函数使用</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">person.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br><span class="line"><span class="comment">// 当作普通函数调用</span></span><br><span class="line"><span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>) <span class="comment">// 在浏览器添加到 window 对象</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">sayName</span>() <span class="comment">// ls</span></span><br><span class="line"><span class="comment">// 在另一个对象的作用域中调用</span></span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">sayName</span>.<span class="title function_">call</span>(object, <span class="string">&#x27;ww&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">object.<span class="title function_">sayName</span>() <span class="comment">// ww</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的问题">构造函数的问题</h3><p>构造函数模式的问题在于：每个方法都要在实例上重新创建。在 <code>ECMAScript</code> 中的函数的对象，因此每定义一个函数，也就是实例化一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑上构造函数的定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;console.log(this.name)&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种创建函数，会导致不同的作用域链和标识符解析，但创建 <code>Function</code> 新实例的机制仍然是先天的，不同的实例上的同名函数是不相等的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明不同实例上的同名函数是不相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayName</span> == person.<span class="property">sayName</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以通过将函数定义转移到构造函数外来解决这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将函数定义转移到构造函数解决重复创建函数的问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayName</span> = sayName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123; <span class="comment">// 函数提升</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">sayName</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zs = <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs) <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 18, gender: &#x27;男&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br><span class="line"><span class="keyword">const</span> ls = <span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ls) <span class="comment">// &#123; name: &#x27;ls&#x27;, age: 18, gender: &#x27;女&#x27;, sayName: [Function (anonymous)] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">sayName</span> == ls.<span class="property">sayName</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这样做解决了重复创建函数的问题，但是又带来了一个新问题：在全局作用域中定义的函数只能被某个对象调用，这样让全局作用域很尴尬，而且更严重的问题是：如果需要定义很多方法，那么需要在全局作用域定义很多全局函数，这样引用类型没有封装性了。这个问题需要通过原型链模式解决。</p><h2 id="原型链模式">原型链模式</h2><p>我们创建的每一个函数都有 <code>peototype(原型)</code> 属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。简单的说： <code>peototype</code> 通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处在于让所有对象共享它的属性和方法。不需要再构造方法总定义对象的实例信息，而将信息直接添加到原型对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型模式的使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person2.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><h3 id="理解原型对象">理解原型对象</h3><p>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 <code>peototype</code> 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 <code>constructor(构造函数)</code> 属性，这个属性指向 <code>peototype</code> 属性所在函数的指针。对于前一个例子， <code>Person.peototype</code> ， <code>constructor</code> 指向 <code>Person</code> 。而通过这个构造函数，我们还可以继续为原型对象添加属性和方法。</p><p>创造自定义的构造函数之后，其原型对象默认只会取得 <code>constructor</code> 属性；至于其他方法，则都是从 Object 继承而来。调用构造函数创建一个新实例后，该实例内部包含一个指针(内部属性)，指向构造函数的原型对象。在脚本中没有标准的方式访问 <code>[[Prototype]]</code><br>，在各大浏览器中在每个对象上都支持 <code>__proto__</code>；在其他实现中，这个属性对脚本是完全不可见的。需要明确的是：连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p><p><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E5%AE%9E%E4%BE%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="实例与原型之间的关系图，图片来自于书本"></p><p>从图中可以看出<strong>实例</strong>和<strong>构造函数</strong>没有直接的关系，虽然两个实例都不包含属性和方法，但我们可以调用 <code>person1.sayName()</code> 。这个是通过查找对象属性的过程来实现的。</p><p>虽然在所有实现中都无法访问到 <code>[[Prototype]]</code> ， 但可以通过 <code>isPrototypeOf()</code> 方法来确定对象之间是否存在这种关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断实例和对象是否存在关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1)) <span class="comment">// true 表示存在关系，false 表示不存在关系</span></span><br></pre></td></tr></table></figure><p>调用原型对象的 <code>isPrototypeOf()</code> 方法测试 <code>person1</code>  。因为它们内部都有一个指向 <code>Person.prototype</code> 的指针，因此都返回了 <code>true</code> 。</p><p>在 <code>ECMAScript 5</code> 中有 <code>Object.getPrototypeOf()</code> 方法能够返回 <code>[[Prototype]]</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.getPrototypeOf() 获取原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1).<span class="property">name</span>) <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><p>使用 <code>Object.getPrototypeOf()</code> 可以方便的获取一个对象的原型，这在利用原型实现继承的情况下是非常重要的。</p><blockquote><p>当代码读取某个对象的属性时，会执行一次搜索，目标是给定名字的属性。搜索先从对象实例本身开始，通过实例中找到了给定名称的属性，则返回属性值，如果没有找到，则继续搜索实例的原型对象，在原型对象中查找具有给定名称的属性，在原型中找到则返回原型中该属性名称的值。</p></blockquote><blockquote><p>原型最初只包含 constructor 属性，而该属性也是共享的，因此可以通过对象实例访问。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明搜索属性的存在</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;ww&#x27;</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// ww 来着实例的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person2.<span class="title function_">sayName</span>() <span class="comment">// zs  来着原型的属性</span></span><br></pre></td></tr></table></figure><p>上述例子造成一个问题，当我们设置了与原型相同属性名的属性，会阻止访问原型中的属性，就算将实例的中的属性赋值为 <code>null</code> 仍然会阻止访问原型中的属性，如果我们仍然需要访问原型中的属性，我们可以通过 <code>delete</code> 操作符删除实例中的属性，再访问原型中的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现实例属性已存在访问原型的属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;ww&#x27;</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// ww 来着实例的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">person2.<span class="title function_">sayName</span>() <span class="comment">// zs  来着原型的属性</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="literal">null</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// null 实例中的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// zs 原型中的属性</span></span><br></pre></td></tr></table></figure><p>使用 <code>hasOwnProperty()</code> 方法可以检测一个属性是存在于实例中，还是存在于原型中。这个方法只在给定属性存在于对象实例中，才会返回 <code>true</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;ww&#x27;</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// ww 来着实例的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">person2.<span class="title function_">sayName</span>() <span class="comment">// zs  来着原型的属性</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// null 实例中的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// zs 原型中的属性</span></span><br></pre></td></tr></table></figure><p>下图可以便于大家理解(由于自己敲了一遍验证，因此与原文不太一样了，原理是相同的)：<br><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E5%B1%9E%E6%80%A7%E6%9D%A5%E8%87%AA%E4%BA%8E%E5%AE%9E%E4%BE%8B%E8%BF%98%E6%98%AF%E5%8E%9F%E5%9E%8B.jpg" alt="属性来自于实例还是原型，图片来自于书本"></p><blockquote><p><code>Object.getOwnPropertyDescriptor()</code> 方法只能用于实例属性，要取得原型的描述符，必须直接在原型对象调用 <code>Object.getOwnPropertyDescriptor()</code> 方法。</p></blockquote><h3 id="原型与-in-操作符">原型与 in 操作符</h3><p>使用 <code>in</code> 操作符的两种方式：单独使用和在 <code>for-in</code> 循环中使用。 单独使用 <code>in</code> 操作符会在通过对象能够访问给定属性是返回 <code>true</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1) <span class="comment">// true</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;ww&#x27;</span></span><br><span class="line">person1.<span class="title function_">sayName</span>() <span class="comment">// ww 来着实例的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1) <span class="comment">// true</span></span><br><span class="line">person2.<span class="title function_">sayName</span>() <span class="comment">// zs  来着原型的属性</span></span><br></pre></td></tr></table></figure><p>同时使用 hasOwnProperty() 和 in 操作符可以判断属性存在于对象还是原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断属性存在于对象还是原型的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; object 需要判断的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; name 需要判断的属性名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasPrototypeProperty</span>(<span class="params">object, name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> object.<span class="title function_">hasOwnProperty</span>(name) &amp;&amp; name <span class="keyword">in</span> object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 for-in 循环时，返回的是所有能够通过对象访问的，可枚举的(enumerated)属性，包括存在于对象实例和原型中的属性。屏蔽了原型中不可枚举的属性(**[[Enumerable]]**为 <code>false</code> 的属性)的实例属性也会在 for-in 循环中返回。开发人员自己定义的属性属于可枚举属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for-in 枚举属性</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;I am object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(prop); <span class="comment">// name, toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中， <code>object</code> 的 <code>toString()</code> 方法屏蔽了原型中不可枚举的 <code>toString()</code> 方法。除了  <code>toString()</code> 方法， <code>hasOwnProperty()</code> 、 <code>propertyIsEnumerable()</code> 、 <code>toLocalString()</code> 和 <code>valueOf()</code> 方法也是不可枚举的。</p><p><code>ECMAScript 5</code> 也将 <code>constructor</code> 和 <code>prototype</code> 属性的 <code>[[Enumerable]]</code> 特性特性设置为 <code>false</code> ，但不是所有的浏览器都是这样实现的。</p><p>要取得对象上所有可枚举的实例属性，可以使用 <code>ECMAScript 5</code> 的 <code>Object.keys()</code> 方法，参数: 需要枚举属性的对象， 返回：一个包含所有可枚举属性的字符串数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Object.keys() 获取属性名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> perKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Person</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perKeys) <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> perProKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perProKeys) <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;, &#x27;sayName&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">ls.<span class="property">name</span> = <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">ls.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> lsKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(ls) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lsKeys) <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure><p>获取所有的实例属性(包括不可枚举属性)，可以使用 <code>Object.getOwnPropertyNmaes()</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allPerKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Person</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allPerKeys) <span class="comment">// [ &#x27;length&#x27;, &#x27;name&#x27;, &#x27;arguments&#x27;, &#x27;caller&#x27;, &#x27;prototype&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allPerProKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allPerProKeys) <span class="comment">// [ &#x27;constructor&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;, &#x27;sayName&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ls = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">ls.<span class="property">name</span> = <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">ls.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allLsProKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(ls)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allLsProKeys) <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="更简单的原型语法">更简单的原型语法</h3><p>为了简化减少输入和更好的封装原型变量，可以使用字面量的方式重写整个原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量的方式重写整个原型对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123; </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的方法中虽然以字面量的方式创建了新对象，但是 <code>constructor</code> 属性不再指向 <code>Person</code> 。当我们每创建一个函数，就会同时创建它的 <code>prototype</code> 对象，并且 <code>prototype</code> 对象的 <code>constructor</code> 属性也会自动指向这个<code>函数(Person)</code>。使用字面量的形式等同于重写了默认的 <code>prototype</code> 对象，因此原型对象的 <code>constructor</code> 属性指向了 <code>Object的构造函数</code> ， 不指向 <code>Person</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量形式原型的 constructor 指向问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Person</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果 <code>constructor</code> 属性的值非常重要，不可缺失，可以使用 <code>Object.defineProperty()</code> 设置 <code>constructor</code> 属性的指向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 恢复字面量方式原型的 constructor 属性指向问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;constructor&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="title class_">Person</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不要在使用字面量时直接指定原型的 <code>constructor</code> 属性的指向，这样会造成 <code>constructor</code> 属性可枚举(<strong>[[Enumerable]]</strong> 的值为 <code>true</code> )</p></blockquote><h3 id="原型的动态性">原型的动态性</h3><p>由于在原型中查找值的过程是一次搜索，因此我们对原型对象所作的任何修改都能够立即从实例上反映。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明原型的动态性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi!&#x27;</span>)</span><br><span class="line">person.<span class="title function_">sayHi</span>() <span class="comment">// hi!</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写已经有实例的对象的原型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHi</span>() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>实例中的指针仅指向原型，而不指向构造函数。重写原型等于切断已有实例和原型之间的关系</p><p><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E9%87%8D%E5%86%99%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.jpg" alt="重写原型对象示意图"></p></blockquote><h3 id="原生对象的原型">原生对象的原型</h3><p><strong>原型模式</strong>的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式创建的。所有的原生引用类型(<code>Object</code> 、 <code>Array</code> 、 <code>String</code> 等)都在其构造函数的原型上定义了方法。</p><p>通过原生对象的原型，可以获得所有默认方法的引用，并且可以定义新方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义原生对象的方法</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addLogo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 这里不可以使用箭头函数，this的指向会有问题</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;MyString:&#x27;</span> + <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;you are best!&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">addLogo</span>()) <span class="comment">// MyString:you are best!</span></span><br></pre></td></tr></table></figure><blockquote><p>尽管可以对原生对象增加新的方法，但是不推荐这样做，因这么做可能会导致明明冲突。并且有可能会意外的重写原生方法。</p></blockquote><h3 id="原型对像的问题">原型对像的问题</h3><p>原型对象的问题在于：它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下将取得相同的属性值。 原型模式最大的问题是由其共享的本性导致的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Person</span>, <span class="comment">// 这里constructor可枚举</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>],</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="property">friend</span>.<span class="title function_">push</span>(<span class="string">&quot;yxl&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">friend</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;yxl&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">friend</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;yxl&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">friend</span> == p2.<span class="property">friend</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面的例子造成了 <code>p1</code> 和 <code>p2</code> 共有 <code>friend</code> 的情况。而真实情况下应该是 <code>p1</code> 有自己的朋友， <code>p2</code> 也有自己的朋友。这就是单独原型模式所带来的问题。</p><h2 id="组合使用构造函数模式和原型模式">组合使用构造函数模式和原型模式</h2><p>创建自定义类型的常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享属性。最终的结果就是：每个实例都会有这就的一份实例属性的副本，但同时又共享着对方法的引用，最大限度的节省了内存。这两种混成模式还支持向构造函数传递参数，结合了两种模式的长处。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数模式和原型模式创建对象实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Person</span>, <span class="comment">// 可枚举</span></span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> atm = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"></span><br><span class="line">zs.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;yxl&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">friends</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;yxl&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(atm.<span class="property">friends</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">friends</span> == atm.<span class="property">friends</span>) <span class="comment">// false 不同的实例的属性具有不同的指向</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">sayName</span> == atm.<span class="property">sayName</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这种构造函数和原型混成的模式，是目前在 <code>ECMAScript</code> 中最广泛使用、认同度最高的一种创建自定义类型的方法。</p><h2 id="动态原型模式">动态原型模式</h2><p>其他有面向对象语言经验的开发人员看到独立的构造函数和原型时，会感到很疑惑。动态原型模式正是致力于解决这个问题的方案，它把所有的信息都封装在构造函数里面，通过在构造函数中初始化原型(仅在必要的情况下)，又保持了同时使用构造函数和原型的优点。可以检查某个应该存在的方法是否有效来决定是否需要初始化原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态原型模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayName</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">zs.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><blockquote><p>使用动态原型模式时，不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断所有实例与新原型之间的联想(原型的地址变化)。</p></blockquote><h2 id="寄生构造函数模式">寄生构造函数模式</h2><p>在前面几种模式的不适合的情况下，可以使用寄生(parasitic)构造函数模式。这种模式的思想是：创建应该函数，函数的作用是封装对象的代码，再返回新建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生构造函数模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  object.<span class="property">name</span> = name</span><br><span class="line">  object.<span class="property">age</span> = age</span><br><span class="line">  object.<span class="property">gender</span> = gender</span><br><span class="line">  object.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 不可以使用箭头函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">zs.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><p>这个模式可以在特殊情况下用来为对象创建构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建特殊在数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SpecialArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建数组</span></span><br><span class="line">  <span class="keyword">const</span> values = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">  <span class="comment">// 添加元素</span></span><br><span class="line">  values.<span class="property">push</span>.<span class="title function_">apply</span>(values, <span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  values.<span class="property">toPipedString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回数组</span></span><br><span class="line">  <span class="keyword">return</span> values</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = <span class="keyword">new</span> <span class="title class_">SpecialArray</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">toPipedString</span>()) <span class="comment">// zs|ls|ww</span></span><br></pre></td></tr></table></figure><blockquote><p>关于寄生构造函数模式的注意点： 返回对象与构造函数或者与构造函数的原型属性之间没有关系。因此不能使用 <code>instanceof</code> 操作符来确定对象类型。</p></blockquote><h2 id="稳妥构造函数模式">稳妥构造函数模式</h2><p>稳妥对象是指没有公共属性，而且其方法也不引用 this 的对象。稳妥构造函数模式和寄生构造函数类似，但是有两个不同点：</p><ul><li>新创建对象的实例方法不引用 <code>this</code></li><li>不使用 <code>new</code> 操作符调用构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 稳妥构造函数模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建对象</span></span><br><span class="line">  <span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="comment">// 定义私有变量和函数</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  object.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回对象</span></span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>) </span><br><span class="line">p1.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><blockquote><p>与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间也没有关系，因此 <code>instanceof</code> 操作符对这种对象也没用意义</p></blockquote><h1>继承</h1><p><strong>继承</strong>是面向对象语言的一个最为人津津乐道的概念。许多面向对象语言都支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。由于函数没有签名，在 <code>ECMAScript</code> 种无法实现接口继承。 <code>ECMAScript</code> 只支持实现继承，而且实现继承主要是依靠原型链来实现的。</p><h2 id="原型链">原型链</h2><p><code>ECMAScript</code> 中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p><p><strong>构造函数、原型和实例的关系：</strong> 每个构造函数都有一个原型对象，原型对象包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p><p>如果我们让原型对象等于另一个类型的实例，结果会怎么样？此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上诉关系依然成立，如此层层递进，就构成了实例与原型的链条。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型链体验</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承了 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>()) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面的代码中定义了两个类型： <code>SuperType</code> 和 <code>SubType</code> 。每个类型分别有一个属性和一个方法。主要的区别在于 <code>SubType</code> 继承了 <code>SuperType</code> ， 而继承是通过创建 <code>SuperType</code> 的实例，并将该实例给 <code>SubType.prototype</code> 实现的。实现的本质是重写原型对象，用一个新类型的实例替代，也就是原来存在于 <code>SuperType</code> 的实例中的所有方法和属性也存在与 <code>SubType.prototype</code> 中。在确立了继承关系之后，我们给 <code>SubType.prototype</code> 添加了一个方法，主要就在继承了 <code>SuperType</code> 的属性和方法的基础上又添加了一个新方法。</p><p><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%A1%88%E4%BE%8B.jpg" alt="原型链案例图"></p><p>对于上面代码，调用 <code>instance.getSuperValue()</code> 的三个步骤：</p><ul><li>搜索实例</li><li>搜索 <code>SubType.prototype</code></li><li>搜索 <code>SuperType.prototype</code> (在这一步找到了方法)</li></ul><h3 id="别忘记默认的原型">别忘记默认的原型</h3><p>所有的引用类型都默认继承了 <code>Object</code> ， 而这个继承也是通过原型链实现的。所有函数的默认原型都是 <code>Object</code> 的实例，因此默认原型都会包含一个内部指针，指向 <code>Object.prototype</code> 。 这也是所有自定义类型都会继承 <code>toString()</code> 、 <code>valueOf()</code> 等默认方法的根本原因。</p><p><img src="https://cdn.jsdelivr.net/gh/chen-lihao/picgo_images/images/%E5%AE%8C%E6%95%B4%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%A1%88%E4%BE%8B.jpg" alt="完整原型链案例"></p><h3 id="确定原型和实例的关系">确定原型和实例的关系</h3><p>有两种方式：</p><ul><li>第一种使用 <code>instanceof</code> 操作符，这个操作符能够测试实例与原型链中出现过的构造函数。<strong>结果：</strong> 如果出现了就会返回 <code>true</code> 否在会返回 <code>false</code> 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instanceof 操作符确定实例是否由构造方法派生</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">SuperType</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">SubType</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SubType</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true 构造函数的原型的 constructor 指向 Function</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>isPrototypeOf(object)</code> 方法。只要是原型链中出现过的原型，都是该原型链所派生的实例的原型。<strong>参数：</strong> <code>object</code> : 需要检测的对象， <strong>返回值：</strong> 如果出现了就会返回 <code>true</code> 否在会返回 <code>false</code> 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isPrototypeOf(object) 方法确定实例是否由构造函数派生出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="谨慎地定义方法">谨慎地定义方法</h3><p>子类型有时候需要重写超类型的某个方法，或者需要添加超类型中不存在的某个方法。但是不管是哪种情况，给原型添加方法的代码一定要放在替换原型的语句之后。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写或者添加超类型的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承了 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写超类型中的方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，SubType 重写了 <code>SuperType</code> 中的 <code>getSuperValue()</code> 方法，这样根据原型的搜索原则，会<strong>屏蔽</strong>掉 <code>SuperType</code> 的 <code>getSuperValue()</code> 方法。</p><blockquote><p>注意： 一定要在 <code>SuperType</code> 的实例替换原型之后，再定义两个方法，先定义的话会被 <code>SuperType</code> 的实例<strong>覆盖</strong>掉。使用字面量的方式也是产生类似的效果，会<strong>破坏</strong>原型链</p></blockquote><h3 id="原型链的问题">原型链的问题</h3><p>原型链最主要的问题来自包含引用类型的值的原型。</p><ul><li>引用型值的原型属性会被所有实例共享，在通过原型来继承时，原型实际上会变成另一个类型的实例，这样原先的实例属性就变成了现在的原型属性了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型链的问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承了 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line">instance1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;atm&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">friends</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;atm&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title function_">friends</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">names</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;atm&#x27; ] 共享了 friends 属性</span></span><br></pre></td></tr></table></figure><ul><li>在创建子类型实例时，不能在不影响所有对象实例的情况下向超类型的构造函数传递参数。</li></ul><p>实际使用中<strong>很少单独使用</strong>原型链。</p><h2 id="借用构造函数">借用构造函数</h2><p><strong>借用构造函数：</strong> 在子类型构造函数的内部调用超类型构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借用构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 继承 SuperType</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line">instance1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;atm&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">friends</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;atm&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">friends</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27; ]</span></span><br></pre></td></tr></table></figure><p>通过使用 <code>call()</code> 方法(或 <code>apply()</code> 方法也可以)调用超类型的构造函数，这样会在新的 SubType 对象上执行初始化代码，因此每个实例都会拥有自己的 <code>friends</code> 属性。</p><h3 id="传递参数-2">传递参数</h3><p>构造函数可以在子类型构造函数中向超类型构造函数传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数 传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 继承 SuperType 并传递参数</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">  <span class="comment">// 实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">name</span>) <span class="comment">// zs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>) <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="借用构造函数的问题">借用构造函数的问题</h3><p>借用构造函数的问题</p><ul><li>方法都在构造函数中定义，<strong>函数的复用</strong>就没有意义的</li><li>超类型的原型中定义的方法，对子类而已是<strong>不可见</strong>的，所有类型都只能使用构造函数模式。</li></ul><h2 id="组合继承">组合继承</h2><p>组合继承(经典继承)是将<strong>原型链</strong>和<strong>借用构造函数</strong>的技术组合到一块。使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样保证了原型上定义方法实现了服用，有保证每个实例都有它自己的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;atm&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">instance1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;zsf&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">friends</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;zsf&#x27; ]</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>() <span class="comment">// atm</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>() <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;gx&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">friends</span>) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27; ]</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>() <span class="comment">// gx</span></span><br><span class="line">instance2.<span class="title function_">sayAge</span>() <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h2 id="原型式继承">原型式继承</h2><p>原型式继承并没有使用严格意义上的构造函数，他的想法是借助原型可以基于<strong>已有对象创建新对象</strong>，并且不必因此创建自定义类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherPerson = <span class="title function_">object</span>(person)</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&#x27;atm&#x27;</span></span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;zsf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yetAnotherPerson = <span class="title function_">object</span>(person)</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&#x27;gx&#x27;</span></span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;yg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;zsf&#x27;, &#x27;yg&#x27; ]</span></span><br></pre></td></tr></table></figure><p>上述代码实际上相当于又创建了 <code>person</code> 对象的两个副本</p><p><code>ECMAScript 5</code> 通过新增 <code>Object.create()</code> 方法规范化了原型式继承，这个方法接收两个参数：</p><ul><li>用作新对象原型的对象</li><li>新对象定义额外属性的对象(可选)</li></ul><p>传入一个参数时， <code>Object.create()</code> 与上述 object() 方法的行为相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create() 方法的使用</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&#x27;atm&#x27;</span></span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;zsf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yetAnotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&#x27;gx&#x27;</span></span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;yg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>) <span class="comment">// [ &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;zsf&#x27;, &#x27;yg&#x27; ]</span></span><br></pre></td></tr></table></figure><p><code>Object.create()</code> 的第二个参数格式与 <code>Object.defineProperties()</code> 方法的第二个参数格式相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create() 传递第二个参数</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;atm&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">name</span>) <span class="comment">// atm</span></span><br></pre></td></tr></table></figure><h2 id="寄生式继承">寄生式继承</h2><p>寄生式继承是创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真的是它做了所有工作拥有返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> clone = <span class="title function_">object</span>(original)</span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> anotherPerson = <span class="title function_">createAnother</span>(person)</span><br><span class="line">anotherPerson.<span class="title function_">sayHi</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><blockquote><p>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率，这一点与构造函数模式类似。</p></blockquote><h2 id="寄生组合式继承">寄生组合式继承</h2><p>组合式继承的问题在于：会调用两次超类型构造函数。</p><ul><li>在创建子类型原型的时候</li><li>子类型构造函数内部</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合式继承的问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) <span class="comment">// 第二次调用 SuperType()</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>() <span class="comment">// 第一次调用 SuperType()</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄生组合式继承：通过借用构造函数来继承属性，通过原型链混成形式来继承方法。</p><p>基本思路：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的是超类型原型的一个副本。本质上，就算使用寄生式继承来继承超类型的原型，然后将结果指定给子类型的原型</p><p><code>inheritPrototype()</code> 方法接收两个参数：</p><ul><li>子类型的构造函数</li><li>超类型的构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生组合式继承的基本模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prototype = <span class="title function_">object</span>(superType.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 创建超类型的副本</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = subType <span class="comment">// 为创建的副本添加 constructor 属性，弥补因重写原型而失去默认的 constructor 属性</span></span><br><span class="line">  subType.<span class="property"><span class="keyword">prototype</span></span> = prototype <span class="comment">// 将新创建的对象赋值给子类型的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) <span class="comment">// 第二次调用 SuperType()</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之路(20220326)</title>
      <link href="/2022/03/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF-20220326/"/>
      <url>/2022/03/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF-20220326/</url>
      
        <content type="html"><![CDATA[<p>今日题目：<a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/">将数字变成 0 的操作次数</a>、<a href="https://leetcode-cn.com/problems/richest-customer-wealth/">最富有客户的资产总量</a>、<a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a>、<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a>、<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></p><h1>20220326算法题</h1><h2 id="将数字变成-0-的操作次数">将数字变成 0 的操作次数</h2><p>给你一个非负整数 <code>num</code> ，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。</p><p><strong>示例 1：</strong></p><pre><code>输入： num = 14输出： 6解释： 步骤 1) 14 是偶数，除以 2 得到 7 。步骤 2） 7 是奇数，减 1 得到 6 。步骤 3） 6 是偶数，除以 2 得到 3 。步骤 4） 3 是奇数，减 1 得到 2 。步骤 5） 2 是偶数，除以 2 得到 1 。步骤 6） 1 是奇数，减 1 得到 0 。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： num = 8输出： 4解释：步骤 1） 8 是偶数，除以 2 得到 4 。步骤 2） 4 是偶数，除以 2 得到 2 。步骤 3） 2 是偶数，除以 2 得到 1 。步骤 4） 1 是奇数，减 1 得到 0 。</code></pre><p><strong>示例 3：</strong></p><pre><code>输入： num = 123输出： 12</code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= num &lt;= 10^6</code></li></ul><p><strong>思路：</strong> 由题意可知，在 <code>num</code> 为奇数时需要执行 <code>-1</code> 操作，然后再进行 <code>num/2</code>，需要两步；当 <code>num</code> 为偶数时， 只需要执行 <code>num/2</code> 操作需要一步。循环执行直到 <code>num</code> 为 <code>0</code> 。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfSteps = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">        count += (num&gt;<span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>) + (num &amp; <span class="number">0x01</span>)</span><br><span class="line">        num &gt;&gt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最富有客户的资产总量">最富有客户的资产总量</h2><p>给你一个 <code>m x n</code> 的整数网格 <code>accounts</code> ，其中 <code>accounts[i][j]</code> 是第 <code>i​​​​​​​​​​​​</code> 位客户在第<br><code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 <strong>资产总量</strong> 。</p><p>客户的 <strong>资产总量</strong> 就是他们在各家银行托管的资产数量之和。最富有客户就是 <strong>资产总量</strong> 最大的客户。</p><p><strong>示例 1：</strong></p><pre><code>输入： accounts = [[1,2,3],[3,2,1]]输出： 6解释：第 1 位客户的资产总量 = 1 + 2 + 3 = 6第 2 位客户的资产总量 = 3 + 2 + 1 = 6两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： accounts = [[1,5],[7,3],[3,5]]输出： 10解释：第 1 位客户的资产总量 = 6第 2 位客户的资产总量 = 10 第 3 位客户的资产总量 = 8第 2 位客户是最富有的，资产总量是 10</code></pre><p><strong>示例 3：</strong></p><pre><code>输入： accounts = [[2,8,7],[7,1,3],[1,9,5]]输出： 17</code></pre><p><strong>提示：</strong></p><ul><li><code>m == accounts.length</code></li><li><code>n == accounts[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li></ul><p><strong>思路：</strong> 遍历 <code>accounts</code> 进行各项求和，得到和之后求出最大值就是最富有的客户的资产总量</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">accounts</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximumWealth = <span class="keyword">function</span>(<span class="params">accounts</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sumArray = []</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">of</span> accounts)&#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(j <span class="keyword">of</span> i) &#123;</span><br><span class="line">            sum += j</span><br><span class="line">        &#125;</span><br><span class="line">        sumArray.<span class="title function_">push</span>(sum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, sumArray)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两数相加">两数相加</h2><p>给你两个  <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照  <strong>逆序</strong>  的方式存储的，并且每个节点只能存储  <strong>一位</strong>  数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt=""></p><pre><code>输入： l1 = [2,4,3], l2 = [5,6,4]输出： [7,0,8]解释： 342 + 465 = 807.</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： l1 = [0], l2 = [0]输出： [0]</code></pre><p><strong>示例 3：</strong></p><pre><code>输入： l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]输出： [8,9,9,9,0,0,0,1]</code></pre><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><p><strong>思路：</strong> 本题首先需要循环遍历两条单链表并且需要考虑 <code>l1</code> 和 <code>l2</code> 长度不一致的情况， 其次需要考虑到两数相加进位的情况，需要保存当前循环因进位留下来的数值，到下一次循环中使用。具体公式表现为： <code>当前节点数 = (l1.val + l2.val + tem) % 10</code>, <code>进位数 = (l1.val + l2.val + tem) / 10 </code>。最最重要的循环结束后需要考虑最后一次产生的进位情况。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">l1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">l2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>, p = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> tem = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> num1 = l1 ? l1.<span class="property">val</span> : <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> num2 = l2 ? l2.<span class="property">val</span> : <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> sum = num1 + num2 + tem </span><br><span class="line">        num1 = sum % <span class="number">10</span> <span class="comment">// 当前数</span></span><br><span class="line">        tem = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>) <span class="comment">// 进位值</span></span><br><span class="line">        <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(num1)</span><br><span class="line">            p = head</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            p.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(num1)</span><br><span class="line">            p = p.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="literal">null</span>)</span><br><span class="line">            l1 = l1.<span class="property">next</span> <span class="comment">// 指针后移</span></span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="literal">null</span>)</span><br><span class="line">            l2 = l2.<span class="property">next</span> <span class="comment">// 指针后移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tem &gt; <span class="number">0</span>) &#123; <span class="comment">// 最后一次循环结束进位的情况</span></span><br><span class="line">        p.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(tem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="无重复字符的最长子串">无重复字符的最长子串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的  **最长子串  **的长度。</p><p><strong>示例  1:</strong></p><pre><code>**输入:** s = &quot;abcabcbb&quot;**输出:** 3 **解释:** 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p><strong>示例 2:</strong></p><pre><code>**输入:** s = &quot;bbbbb&quot;**输出:** 1**解释:** 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p><strong>示例 3:</strong></p><pre><code>**输入:** s = &quot;pwwkew&quot;**输出:** 3**解释:** 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 **子串** 的长度，&quot;pwke&quot; 是一个 _子序列，_ 不是子串。</code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><p><strong>思路：</strong> 首先定义一个变量 <code>maxLength</code> 用来保存最长无重复子串长度，并用另一个变量 <code>str</code> 保存当前的子串，然后遍历循环字符串 <code>s</code> ，每次循环判断当前循环的字符是否以及存在于 <code>str</code> 中，如果存在，截取掉字符串从开头到字串所在位置的字符串，如果不在，将字符加入到 <code>str</code> 中，再计算新子串的长度 <code>maxlength</code> 。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span>; <span class="comment">// 保存最长无重复子串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span> <span class="comment">// 保存当前无重复子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = str.<span class="title function_">indexOf</span>(s[i])</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            str += s[i]</span><br><span class="line">            maxLength = maxLength &gt; str.<span class="property">length</span> ? maxLength : str.<span class="property">length</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str = str.<span class="title function_">substring</span>(index+<span class="number">1</span>)</span><br><span class="line">            str += s[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找两个正序数组的中位数">寻找两个正序数组的中位数</h2><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p><strong>示例 1：</strong></p><pre><code>输入： nums1 = [1,3], nums2 = [2]输出： 2.00000解释： 合并数组 = [1,2,3] ，中位数 2</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： nums1 = [1,2], nums2 = [3,4]输出： 2.50000解释： 合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</code></pre><p><strong>提示：</strong></p><ul><li><code>nums1.length == m</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m &lt;= 1000</code></li><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= m + n &lt;= 2000</code></li><li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li></ul><p><strong>思路：</strong> 本题思路很简单，首先将两个数值合并，然后进行排序，需要考虑负值的情况，再根据排序后的数值的奇偶性来确定中位数的数值。奇数：合并后数组长度 / 2 的结果向下取整就是中位数的索引，偶数：合并后的数组长度 / 2 向下取整的结果对应第二个数的索引，再加上前一个数的和 / 2 就是中位数。</p><blockquote><p>提示：切记排序的时候要指定排序的函数， <code>JavaScript</code> 中数组默认使用<strong>字符编码排序</strong>，当有负数时，结果会异常，笔者已踩坑。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    nums1 = nums1.<span class="title function_">concat</span>(nums2)</span><br><span class="line">    nums1 = nums1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(nums1.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums1.<span class="property">length</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (nums1[mid - <span class="number">1</span>] + nums1[mid]) / <span class="number">2</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums1[mid]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之路(20220319)</title>
      <link href="/2022/03/19/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF-20220319/"/>
      <url>/2022/03/19/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF-20220319/</url>
      
        <content type="html"><![CDATA[<p>今日题目：<a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a>、<a href="https://leetcode-cn.com/problems/palindrome-linked-list/">回文链表</a>、<a href="https://leetcode-cn.com/problems/ransom-note/">赎金信</a>、<a href="https://leetcode-cn.com/problems/fizz-buzz/">Fizz Buzz</a>、<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">链表的中间结点</a>、<a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">矩阵中战斗力最弱的 K 行</a></p><h1>20220319算法题</h1><h2 id="罗马数字转整数">罗马数字转整数</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><pre><code>字符         数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做<br><code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5<br>的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例  1:</strong></p><pre><code>输入:  s = &quot;III&quot;输出: 3</code></pre><p><strong>示例  2:</strong></p><pre><code>输入:  s = &quot;IV&quot;输出: 4</code></pre><p><strong>示例  3:</strong></p><pre><code>输入:  s = &quot;IX&quot;输出: 9</code></pre><p><strong>示例  4:</strong></p><pre><code>输入:  s = &quot;LVIII&quot;输出: 58解释: L = 50, V= 5, III = 3.</code></pre><p><strong>示例  5:</strong><br>输入:  s = “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><p><strong>思路：</strong> 先建立<code>hashMap</code>进行键值映射，然后再从左到右遍历字符串，如果当前字符的值小于右边且不为最后一个字符，则减去当前字符的值，否则加上当前字符的值</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hashMap = &#123; <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; s.<span class="property">length</span> &amp;&amp; hashMap[s[i]] &lt; hashMap[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">            sum -= hashMap[s[i]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += hashMap[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="回文链表">回文链表</h2><p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt=""></p><pre><code>输入： head = [1,2,2,1]输出： true</code></pre><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt=""></p><pre><code>输入： head = [1,2]输出： false</code></pre><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围<code>[1, 105]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li></ul><p><strong>进阶：</strong> 你能否用 <code>O(n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度解决此题？</p><p><strong>思路：</strong> 先将链表转化为数组，再通过对数组的双遍历判断是否符合回文数。</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nHead = head</span><br><span class="line">    <span class="keyword">let</span> headArray = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    <span class="keyword">while</span>(nHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        headArray.<span class="title function_">push</span>(nHead.<span class="property">val</span>)</span><br><span class="line">        nHead = nHead.<span class="property">next</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = headArray.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(headArray[i] != headArray[j])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="赎金信">赎金信</h2><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例 1：</strong></p><pre><code>输入： ransomNote = &quot;a&quot;, magazine = &quot;b&quot;输出： false</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;输出： false</code></pre><p><strong>示例 3：</strong></p><pre><code>输入： ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;输出： true</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li><li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li></ul><p><strong>思路：</strong> 首先判断<code>ransomNote</code>的长度是否大于<code>magazine</code>的长度，如果大于直接返回false，否则，计算<code>magazine</code>中的所有的字母的数量，再通过与<code>ransomNote</code>比较每个字母的数量是否满足判断是否能够构成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ransomNote.<span class="property">length</span> &gt; magazine.<span class="property">length</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> s <span class="keyword">of</span> magazine) &#123;</span><br><span class="line">        words[s.<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> s <span class="keyword">of</span> ransomNote) &#123;</span><br><span class="line">        words[s.<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()]--</span><br><span class="line">        <span class="keyword">if</span>(words[s.<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Fizz-Buzz">Fizz Buzz</h2><p>给你一个整数 <code>n</code> ，找出从 <code>1</code> 到 <code>n</code> 各个整数的 Fizz Buzz 表示，并用字符串数组 <code>answer</code>（ <strong>下标从 1 开始</strong><br>）返回结果，其中：</p><ul><li><code>answer[i] == &quot;FizzBuzz&quot;</code> 如果 <code>i</code> 同时是 <code>3</code> 和 <code>5</code> 的倍数。</li><li><code>answer[i] == &quot;Fizz&quot;</code> 如果 <code>i</code> 是 <code>3</code> 的倍数。</li><li><code>answer[i] == &quot;Buzz&quot;</code> 如果 <code>i</code> 是 <code>5</code> 的倍数。</li><li><code>answer[i] == i</code> （以字符串形式）如果上述条件全不满足。</li></ul><p><strong>示例 1：</strong></p><pre><code>输入： n = 3输出： [&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： n = 5输出： [&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;]</code></pre><p><strong>示例 3：</strong></p><pre><code>输入： n = 15输出： [&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;,&quot;Fizz&quot;,&quot;7&quot;,&quot;8&quot;,&quot;Fizz&quot;,&quot;Buzz&quot;,&quot;11&quot;,&quot;Fizz&quot;,&quot;13&quot;,&quot;14&quot;,&quot;FizzBuzz&quot;]</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><p><strong>思路：</strong> 简单的if-else if-else判断，直接循环即可得到答案</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fizzBuzz = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            str = <span class="string">&quot;FizzBuzz&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            str = <span class="string">&quot;Fizz&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            str = <span class="string">&quot;Buzz&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            str = <span class="string">&quot;&quot;</span> + i</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表的中间节点">链表的中间节点</h2><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1：</strong></p><pre><code>输入： [1,2,3,4,5]输出： 此列表中的结点 3 (序列化形式：[3,4,5])返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。注意，我们返回了一个 ListNode 类型的对象 ans，这样：ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</code></pre><p><strong>示例  2：</strong></p><pre><code>输入： [1,2,3,4,5,6]输出： 此列表中的结点 4 (序列化形式：[4,5,6])由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</code></pre><p><strong>提示：</strong></p><ul><li>给定链表的结点数介于 <code>1</code> 和 <code>100</code> 之间。</li></ul><p><strong>思路：</strong> 先将链表转换为数组，再根据取数组的中间索引，再根据索引得到结果</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> middleNode = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nHead = head</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> array = []</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(nHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        array.<span class="title function_">push</span>(nHead.<span class="property">val</span>)</span><br><span class="line">        nHead = nHead.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(array.<span class="property">length</span> % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        middle = array.<span class="property">length</span> / <span class="number">2</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(array.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    nHead = head</span><br><span class="line">    <span class="keyword">while</span>(nHead) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == middle)</span><br><span class="line">            <span class="keyword">return</span> nHead</span><br><span class="line">        nHead = nHead.<span class="property">next</span></span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="矩阵中战斗力最弱的k行">矩阵中战斗力最弱的k行</h2><p>给你一个大小为 <code>m * n</code> 的矩阵 <code>mat</code>，矩阵由若干军人和平民组成，分别用 1 和 0 表示。</p><p>请你返回矩阵中战斗力最弱的 <code>k</code> 行的索引，按从最弱到最强排序。</p><p>如果第  _ <strong>i</strong>_  行的军人数量少于第  _ <strong>j</strong>_  行，或者两行军人数量相同但 _ <strong>i</strong>_ 小于 <em><strong>j</strong></em> ，那么我们认为第<br>_ <strong>i</strong>_ 行的战斗力比第 _ <strong>j</strong>_ 行弱。</p><p>军人 <strong>总是</strong> 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p><p><strong>示例 1：</strong></p><pre><code>输入： mat = [[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]], k = 3输出： [2,0,3]解释：每行中的军人数目：行 0 -&gt; 2 行 1 -&gt; 4 行 2 -&gt; 1 行 3 -&gt; 2 行 4 -&gt; 5 从最弱到最强对这些行排序后得到 [2,0,3,1,4]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： mat = [[1,0,0,0], [1,1,1,1], [1,0,0,0], [1,0,0,0]], k = 2输出： [0,2]解释：每行中的军人数目：行 0 -&gt; 1 行 1 -&gt; 4 行 2 -&gt; 1 行 3 -&gt; 1 从最弱到最强对这些行排序后得到 [0,2,3,1]</code></pre><p><strong>提示：</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>2 &lt;= n, m &lt;= 100</code></li><li><code>1 &lt;= k &lt;= m</code></li><li><code>matrix[i][j]</code> 不是 0 就是 1</li></ul><p><strong>思路：</strong> 用<code>hashMap</code>存储每一行的战斗力，再用<code>hashMap</code>的值对hashMap进行排序,得到的key就是答案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">mat</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kWeakestRows = <span class="keyword">function</span>(<span class="params">mat, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> array = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> mat) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> mat[i]) &#123;</span><br><span class="line">            sum += j</span><br><span class="line">        &#125;</span><br><span class="line">        array[i] = sum</span><br><span class="line">    &#125;</span><br><span class="line">    keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(array).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[a] - array[b]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(<span class="built_in">parseInt</span>( keys[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路 (四) 引用类型</title>
      <link href="/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E5%9B%9B)%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E5%9B%9B)%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1>Object 类型</h1><p>大多数引用类型都是 <code>Object</code> 类型的实例</p><h2 id="Object-类型示例">Object 类型示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Object 实例的方式</span></span><br><span class="line"><span class="comment">// 1. 使用 new 操作符</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Nicholas&#x27;</span></span><br><span class="line">pserson.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;Nicholas&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;age&quot;: 29</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 对象字面量表示法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;zs&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;age&quot;: 29</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义只包含默认属性和方法的对象</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Nicholas&#x27;</span></span><br><span class="line">pserson.<span class="property">age</span> = <span class="number">29</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;zs&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;age&quot;: 29</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1>Array 类型</h1><p><code>Array</code>类型是JavaScript中最常用的类型。JavaScript中的数组与其他多数语言中的数组有着相当大的区别。与其他不一样的是JavaScript的数组的每一项可以保存任何类型的数据,并且数组的大小是可以动态调整的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="comment">// 方式一：构造函数</span></span><br><span class="line"><span class="keyword">let</span> nums1 = <span class="keyword">new</span> <span class="title class_">Array</span>() <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="comment">// 创建已知长度的字符串</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">20</span>) <span class="comment">// 创建一个长度为20的数组，数组的每一个元素为，undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2.<span class="property">length</span>, num[<span class="number">0</span>]) <span class="comment">// length属性能够得到数组的长度：20 undefined</span></span><br><span class="line"><span class="comment">// 注意：构造函数传数值和其他类型的区别</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>) <span class="comment">// 创建长度为3的空数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;zs&quot;</span>) <span class="comment">// 创建长度为1，仅有字符串类型zs元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：字面量的方式</span></span><br><span class="line"><span class="keyword">let</span> num4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 创建长度为3的数组</span></span><br><span class="line"><span class="keyword">let</span> num5 = [] <span class="comment">// 创建空数组</span></span><br></pre></td></tr></table></figure><h2 id="检测数组">检测数组</h2><p>使用<code>instanceof</code>操作符可以确定某个对象是不是数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instanceof 用法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// 返回布尔值 true/false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>instanceof</code> 操作符在单一的全局执行环境中没有问题，但网页包含多个框架，拥有多个不同的全局执行环境，从而存在不同的Array构造函数，则<code>instanceof</code> 操作符可能无法满足需求。</p></blockquote><p>为了解决<code>instanceof</code>操作符的不足，可以使用<code>Array.isArray()</code>方法。这个方法能够最终确定某个值到底是不是数组，并且不受执行环境的影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.isArray() 方法示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>()) <span class="comment">// 返回布尔值 true/false</span></span><br></pre></td></tr></table></figure><h2 id="转换方法">转换方法</h2><p>所有对象都具有 <code>toLocaleString()</code>、<code>toString()</code>、<code>valueOf()</code> 方法。调用 <code>toString()</code> 方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。调用 <code>valueOf()</code> 返回的还是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换方法</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>] <span class="comment">// 定义名字数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">toString</span>()) <span class="comment">// zs,ls,ww</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">valueOf</span>()) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">toLocaleString</span>()) <span class="comment">//zs,ls,ww</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="栈方法">栈方法</h2><p>JavaScript 数组提供了一种让数组行为类似于栈(LIFO Last-In-First-Out 后进先出)数据结构的方法。数组提供了 <code>push()</code> 和 <code>pop()</code> 方法。</p><p><code>push()</code> 方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后的数组长度。<code>pop()</code>方法则从数组末尾移除最后一项，减少数组的<code>length</code>，并返回移出的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push() 和 pop() 示例</span></span><br><span class="line"><span class="keyword">let</span> names = [] <span class="comment">// 字面量创建空数组</span></span><br><span class="line"><span class="keyword">let</span> count = names.<span class="title function_">push</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>) <span class="comment">// 推入两个元素, count = 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [zs, ls]</span></span><br><span class="line"></span><br><span class="line">count = names.<span class="title function_">push</span>(<span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [zs, ls, ww]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> element = names.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element, names, names.<span class="property">length</span>) <span class="comment">// ww, [zs, ls], 2</span></span><br></pre></td></tr></table></figure><h2 id="队列方法">队列方法</h2><p>队列(FIFO First-In-First-Out 先进先出)数据结构，<br><code>shift()</code>方法能够移除数组中第一个项的元素并返回该元素，数组长度减1，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push() 和 shift() 实现队列操作</span></span><br><span class="line"><span class="keyword">let</span> names = [] <span class="comment">// 字面量创建空数组</span></span><br><span class="line"><span class="keyword">let</span> count = names.<span class="title function_">push</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>) <span class="comment">// 推入两个元素, count = 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [zs, ls]</span></span><br><span class="line"></span><br><span class="line">count = names.<span class="title function_">push</span>(<span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [zs, ls, ww]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> element = names.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element, names, names.<span class="property">length</span>) <span class="comment">// zs, [ls, ww], 2</span></span><br></pre></td></tr></table></figure><p><code>unshift()</code>方法可以在数组前端添加任意项元素，并返回数组的长度，它与<code>shift()</code>方法用途相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pop() 和 unshift() 实现反向队列操作</span></span><br><span class="line"><span class="keyword">let</span> names = [] <span class="comment">// 字面量创建空数组</span></span><br><span class="line"><span class="keyword">let</span> count = names.<span class="title function_">unshift</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>) <span class="comment">// 推入两个元素, count = 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [zs, ls]</span></span><br><span class="line"></span><br><span class="line">count = names.<span class="title function_">push</span>(<span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [ww, zs, ls]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> element = names.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element, names, names.<span class="property">length</span>) <span class="comment">// ls, [ww, zs], 2</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>unshift()</code>传入多个元素项时时，元素项的入队的顺序不会改变</p></blockquote><h2 id="重排序方法">重排序方法</h2><p>重排序数组的方法有：<code>reverse()</code> 和 <code>sort()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// 调用sort方法排序</span></span><br><span class="line"><span class="keyword">const</span> sortNums = nums.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortNums) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 调用reverse()方法实现逆序</span></span><br><span class="line"><span class="keyword">const</span> reverseNums = sortNums.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reverseNums) <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment">// sort() 方法可以传入一个函数（作为参数）实现自定义排序规则</span></span><br><span class="line"><span class="keyword">const</span> sortNums2 = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">value1, value2</span>) =&gt;</span> value2 - value1) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortNums2) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>reverse()</code> 和 <code>sort()</code> 方法的返回值都是经过排序之后的数组，需要使用变量接收。</p></blockquote><h2 id="操作方法">操作方法</h2><p><code>concat()</code> 方法可以基于当前数组中所有的项创建一个新数组。具体方式为：创建当前数组的副本，再将参数添加到副本的末尾，返回新数组。如果<code>concat()</code>传递一个或多个数组，则会将这些数组中的每一项都添加到结果数组中。如果传递的参数不是数组，则会被简单的天骄到数组的末尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> names1 = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> names2 = names1.<span class="title function_">concat</span>(<span class="string">&#x27;zl&#x27;</span>, [<span class="string">&#x27;atm&#x27;</span>, <span class="string">&#x27;gtx&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names1) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names2) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;zl&#x27;, &#x27;atm&#x27;, &#x27;gtx&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>slice()</code> 方法能够基于当前数组中的一个或者多个项创建一个新数组。<code>slice()</code> 方法可以接受一个或者两个参数，即要返回的数组的起始位置和结束位置(不包括结束位置的项)。传递一个参数时，会返回数组从起始位置到数组末尾的项。</p><blockquote><p>注意： <code>slice()</code> 方法返回的是数组的副本，并不会改变原数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> names1 = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> names2 = names1.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names2) <span class="comment">// [&#x27;ls&#x27;, &#x27;ww&#x27;]</span></span><br><span class="line"><span class="keyword">const</span> names3 = names1.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names3) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names1) <span class="comment">// [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 如果<code>slice()</code>方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names1 = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> names2 = names1.<span class="title function_">slice</span>(-<span class="number">2</span>, -<span class="number">1</span>) <span class="comment">// 等价于names1.slice(3-2, 3-1)  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names2) <span class="comment">// [&#x27;ls&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>splice()</code> 方法是数组中最强大的方法，它能够实现数组的删除、插入、替换操作。</p><ul><li><strong>删除：</strong> 可以删除任意数量的项，需要指定两个参数：要删除的第一项的位置和要删除的项数。</li><li><strong>插入：</strong> 可以向指定位置插入任意数量的项，需要三个参数：起始位置(插入的第一个项的位置)、0(表示删除0项)和要插入的项。如果需要插入多个项，可以传递第四、第五、第六…个参数。</li><li><strong>替换：</strong> 可以向指定位置插入任意数量的项，且同时删除任意数量的项，需要指定三个参数：起始位置、删除的项数、插入的项…。插入项可以和删除项不相等。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line"><span class="comment">// 删除：删除ls</span></span><br><span class="line"><span class="keyword">const</span> lsname = names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 删除索引在1的1个元素。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lsname) <span class="comment">// [ &#x27;ls&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ww&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素： 在 zs 后插入 atm gtx zzx</span></span><br><span class="line"><span class="keyword">const</span> insNames = names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;atm&#x27;</span>, <span class="string">&#x27;gtx&#x27;</span>, <span class="string">&#x27;zzx&#x27;</span>) <span class="comment">// 插入三个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(insNames) <span class="comment">// []，插入删除0个元素，返回空数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names); <span class="comment">// [ &#x27;zs&#x27;, &#x27;atm&#x27;, &#x27;gtx&#x27;, &#x27;zzx&#x27;, &#x27;ww&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换元素： 替换 atm 为 zsf</span></span><br><span class="line"><span class="keyword">const</span> repNames = names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;zsf&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(repNames); <span class="comment">// [ &#x27;atm&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names); <span class="comment">// [ &#x27;zs&#x27;, &#x27;zsf&#x27;, &#x27;gtx&#x27;, &#x27;zzx&#x27;, &#x27;ww&#x27; ]</span></span><br></pre></td></tr></table></figure><h2 id="位置方法">位置方法</h2><p>数组中的位置方法有 <code>indexOf()</code> 和 <code>lastIndexOf()</code>。两个方法都需要传递参数：要查找的元素， 查找的起始位置(可选参数)，<code>indexOf()</code> 从数组开头查找符合的元素，返回元素索引，<code>lastIndexOf()</code> 从数组的末尾开始查找符合的元素，返回元素索引， 再比较第一个参数和数组的元素项时必须严格相等(<code>===</code>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line"><span class="comment">// 不指定起始位置查找ww</span></span><br><span class="line"><span class="keyword">const</span> wwNameIndex = names.<span class="title function_">indexOf</span>(<span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wwNameIndex) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 指定位置查找zs</span></span><br><span class="line"><span class="keyword">const</span> zsNameIndex = names.<span class="title function_">indexOf</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zsNameIndex) <span class="comment">// -1， 由于从索引 1 开始，跳过了 zs 因此没找到 zs 返回 -1</span></span><br><span class="line"><span class="comment">// 从末尾寻找ls</span></span><br><span class="line"><span class="keyword">const</span> lsNameIndex1 = names.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lsNameIndex1) <span class="comment">// 3， 找到第一个匹配项</span></span><br><span class="line"><span class="comment">// 从末尾寻找ls，指定从索引 3 开始</span></span><br><span class="line"><span class="keyword">const</span> lsNameIndex2 = names.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lsNameIndex2); <span class="comment">// 1 </span></span><br></pre></td></tr></table></figure><h2 id="迭代方法">迭代方法</h2><p>数组拥有 <code>5</code> 个迭代方法。每个方法接受两个参数：要在每一项上运行的函数、运行该函数的作用域对象 – 影响 <code>this</code> 的值。传入方法的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身。</p><p>迭代方法的作用:</p><ul><li><code>every()</code>：对数组中的每一项运行给定函数，如果函数每一项都返回 <code>true</code>，则返回 <code>true</code>。</li><li><code>filter()</code>对数组中的每一项运行给定函数，返回该函数返回 <code>true</code> 的项组成的数组。</li><li><code>forEach()</code>：对数组中的每一项运行给定函数。无返回值</li><li><code>map()</code>：对数组中的每一项运行给定函数，返回每次调用的结果组成的数组</li><li><code>some()</code>：对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</li></ul><blockquote><p><strong>上面所有方法都不会修改原数组的值。</strong></p><p>对于 <code>every()</code> 和 <code>some()</code> 方法，它们都用来查询数组中的元素是否满足某个条件。 <code>every()</code> 的使用类似于 <code>与</code> 运算，当每一个元素都返回 <code>true</code> 时，这个方法才会返回 <code>true</code> 否则返回 <code>false</code>。而 <code>some()</code> 类似于 <code>或</code> 运算，只要数组中有一个元素返回<code>true</code>，这个方法就会返回 <code>true</code>，当数组中所有元素返回 <code>false</code> 才会返回  <code>false</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">// every() 方法 对每个数组元素进行判断，结果进行与运算</span></span><br><span class="line"><span class="keyword">const</span> everyNums = nums.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyNums) <span class="comment">// false, 只要有一项小于 2 就会返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some() 方法 对每个数组元素进行判断，结果进行或运算</span></span><br><span class="line"><span class="keyword">const</span> someNums = nums.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someNums) <span class="comment">// true， 只要有一项大于 2 就会返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  filter 方法 对数组元素进行过滤，得到符合条件的元素组成的新数组</span></span><br><span class="line"><span class="keyword">const</span> filterNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterNums); <span class="comment">// [3, 4, 6, 8, 7, 5, 5, 6, 9] 返回所有大于 2 的项组成的新数组，原数组不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map() 方法 对数组元素进行操作，得到处理后的元素组成的新数组</span></span><br><span class="line"><span class="keyword">const</span> mapNums = nums.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapNums); <span class="comment">// [2,  4,  6, 8, 12, 16, 14, 10, 2, 10, 12, 18] 返回所有元素 * 2 后的结果组成的新数组，原数组不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach() 对数组元素进行迭代</span></span><br><span class="line"><span class="keyword">const</span> forEachNums = nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="缩小方法">缩小方法</h2><p>数组的缩小方法有：<code>reduce()</code> 和 <code>reduceRight()</code>。这两个方法也会迭代数组的每一项，<code>reduce()</code> 从数组第一项开始遍历，<code>reduceRight()</code> 从数组的最后一项开始遍历。两个方法都接收四个参数：前一个值、当前值、当前项的索引和数组对象。第一次迭代发生在第二个项上，此时第一项作为第一个参数传递到方法中。这个方法会把前一次执行的返回值作为第一个参数传递到方法中执行(方便进行统计运算)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="comment">// reduce() 方法</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> sumNums = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sumNums) <span class="comment">// 15 = ((((1 + 2) + 3) + 4) + 5)</span></span><br><span class="line"><span class="comment">// reduceRight() 方法</span></span><br><span class="line"><span class="keyword">const</span> sumNums2 = nums.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sumNums2) <span class="comment">// 15 = ((((5 + 4) + 3) + 2) + 1)</span></span><br></pre></td></tr></table></figure><h1>Date 类型</h1><p><code>ES5</code> 中的 <code>Date</code> 类型是在早期 <code>Java</code> 中的 <code>java.util.Date</code> 类的基础上构建的。<code>Date</code> 类型使用自 <code>UTC(Coordinated Universal Time， 国际协调时间)</code> <code>1970</code>年<code>1</code>月<code>1</code>日午夜(零时)开始经过的毫秒数来保存日期。<code>Date</code> 类型保存的时间能够精确到<code>1970</code>年<code>1</code>月<code>1</code>之前或者之后的<code>285616</code>年。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node中得到的是美国时间</span></span><br><span class="line"><span class="comment">// 创建一个日期对象</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now) <span class="comment">// 2022-03-23T07:39:32.740Z 得到当前时间</span></span><br><span class="line"><span class="comment">// 创造指定日期和时间的日期对象</span></span><br><span class="line"><span class="keyword">let</span> ago = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-03-23T15:54:00&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ago) <span class="comment">// 2022-03-22T16:00:00.000Z</span></span><br></pre></td></tr></table></figure><p>得到时间的方法有：<code>Date.parse()</code> 和 <code>Date.UTC()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="comment">// Date.UTC()</span></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2000</span>, <span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1); <span class="comment">// 2000-01-01T00:00:00.000Z</span></span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2022</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date2) <span class="comment">// 2022-03-23T16:13:00.000Z</span></span><br><span class="line"><span class="comment">// Date.parse()</span></span><br><span class="line"><span class="keyword">let</span> date3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2022-03-23 16:15:00&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date3) <span class="comment">// 2022-03-23T08:15:00.000Z</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 1648023615403 返回当前时间的时间戳，单位 秒</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在调用Date构造方法时传入日期字符串会自动调用 <code>Date.parse()</code>，在调用<code>Date.UTC()</code>构造日期时，月份是从 <code>0</code> 开始。</p></blockquote><h2 id="继承的方法">继承的方法</h2><p><code>Date</code>类型也重写了 <code>toLocaleString()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法。<code>Date</code>类型的<code>toLocaleString()</code>方法会按照浏览器设置的地区相适应的格式返回日期和时间。<code>toString()</code> 方法会返回带有时区信息的日期和时间。<code>valueOf()</code> 方法可以用于比较日期的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较日期</span></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2020</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1 &lt; date2);</span><br></pre></td></tr></table></figure><h2 id="日期格式化方法">日期格式化方法</h2><p><code>Date</code> 类型有一些专门用将日期格式化为字符串的方法：</p><ul><li><code>toDateString()</code> —— 以特定于实现的格式显示星期几、月、日和年</li><li><code>toTimeString()</code> —— 以特定于实现的格式显示时、分、秒和时区</li><li><code>toLocalDateString()</code> —— 以特定于地区的格式显示星期几、月、日和年</li><li><code>toLocalTimeString()</code> —— 以特定于地区的格式显示时、分、秒</li><li><code>toUTCString()</code> —— 以特定于实现的格式完整的UTC日期</li></ul><p>与 <code>toLocaleString()</code> 和 <code>toString()</code> 方法一样，以上这些字符串格式方法输出也是因浏览器的不同而不同的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toDateString</span>()) <span class="comment">// Wed Mar 23 2022</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toTimeString</span>()) <span class="comment">// 19:20:28 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>()) <span class="comment">// 2022/3/23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleTimeString</span>()) <span class="comment">// 19:20:28</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toUTCString</span>()) <span class="comment">// Wed, 23 Mar 2022 11:20:28 GMT</span></span><br></pre></td></tr></table></figure><h2 id="日期-时间组件方法">日期/时间组件方法</h2><p>Date类型有许多方法，能够帮助开发者获得日期中的特定部分。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>getTime()</code></td><td>返回日期的毫秒数；与<code>valueOf()</code>方法返回的值相同</td></tr><tr><td><code>setTime(毫秒)</code></td><td>以毫秒设置日期，会改变整个日期</td></tr><tr><td><code>getFullYear()</code></td><td>取得4位数年份</td></tr><tr><td><code>getUTCFullYear()</code></td><td>返回UTC日期的4位年份</td></tr><tr><td><code>setFullYear(年)</code></td><td>设置日期的年份，传入的年份值必须是4位数字</td></tr><tr><td><code>setUTCFullYear(年)</code></td><td>设置UTC日期的年份。传入的年份值必须是4位数字</td></tr><tr><td><code>getMonth()</code></td><td>返回日期中的月份，其中0表示一月，11表示十二月</td></tr><tr><td><code>getUTCMonth()</code></td><td>返回UTC日期中的月份，其中0表示一月，11表示十二月</td></tr><tr><td><code>setMonth(月)</code></td><td>设置日期的月份。传入的月份值必必须大于0，超过11则郑家年份</td></tr><tr><td><code>setUTCMonth(月)</code></td><td>设置UTC日期的月份。传入的月份值必必须大于0，超过11则郑家年份</td></tr><tr><td><code>getDate()</code></td><td>返回日期月份中的天数(1到31)。</td></tr><tr><td><code>getUTCDate()</code></td><td>返回UTC日期月份中的天数(1到31)  。</td></tr><tr><td><code>setDate(日)</code></td><td>设置日期的月份中的天数，如果传入的值超过了该月中应有的天数，则增加月份</td></tr><tr><td><code>setUTCDate()</code></td><td>设置UTC日期的月份中的天数，如果传入的值超过了该月中应有的天数，则增加月份</td></tr><tr><td><code>getDay()</code></td><td>返回日期中星期几(其中0表示星期日，6表示星期六)</td></tr><tr><td><code>getUTCDay()</code></td><td>返回UTC日期中星期几(其中0表示星期日，6表示星期六)</td></tr><tr><td><code>getHours()</code></td><td>返回日期中的小时数(0到23)</td></tr><tr><td><code>getUTCHours()</code></td><td>返回UTC日期中的小时数(0到23)</td></tr><tr><td><code>setHours(时)</code></td><td>设置日期中的小时数。传入的值超过了23则增加月份中的天数</td></tr><tr><td><code>setUTCHours(时)</code></td><td>设置UTC日期中的小时数。传入的值超过了23则增加月份中的天数</td></tr><tr><td><code>getMinutes()</code></td><td>返回日期中的分钟数</td></tr><tr><td><code>getUTCMinutes()</code></td><td>返回UTC日期中的分钟数</td></tr><tr><td><code>setMinutes(分)</code></td><td>设置日期中的分钟数，传入的值超过59则增加小时</td></tr><tr><td><code>setUTCMinutes(分)</code></td><td>设置UTC日期中的分钟数，传入的值超过59则增加小时</td></tr><tr><td><code>getSeconds()</code></td><td>返回日期中的秒数(0到59)</td></tr><tr><td><code>getUTCSeconds()</code></td><td>返回UTC日期中的秒数(0到59)</td></tr><tr><td><code>setSeconds(秒)</code></td><td>设置日期中的秒数，传入的值超过59会增加分钟数</td></tr><tr><td><code>setUTCSeconds(秒)</code></td><td>设置UTC日期中的秒数，传入的值超过59会增加分钟数</td></tr><tr><td><code>getMilliseconds()</code></td><td>返回日期中的毫秒数</td></tr><tr><td><code>getUTCMilliseconds()</code></td><td>返回UTC日期中的毫秒数</td></tr><tr><td><code>setMilliseconds(毫秒)</code></td><td>设置日期中的毫秒数</td></tr><tr><td><code>setUTCMilliseconds(毫秒)</code></td><td>设置UTC日期中的毫秒数</td></tr><tr><td><code>getTimezoneOffset()</code></td><td>返回本地时间与UTC时间相差的分钟数</td></tr></tbody></table><h1>RegExp 类型</h1><p><code>JavaScript</code> 通过 <code>RegExp</code> 类型来支持正则表达式。创建正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expression = <span class="regexp">/ pattern /</span> flags</span><br></pre></td></tr></table></figure><p>正则表达式中的<code>模式(pattern)</code>部分可以是任何简单或者复杂的正则表达式，可以包含字符类、限定符、分组、向前查找及反向引用。每个正则表达式都可以带有一胡总多个<code>标志(flag)</code>，用来表示正则表达式的行为。</p><h2 id="正则表达式的修饰符">正则表达式的修饰符</h2><p><strong>正则表达式的匹配模式的3个标志：</strong></p><ul><li>g：表示<code>全局(global)</code>模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止</li><li>i：表示<code>不区分大小写(case-insensitive)</code>模式，即在确定匹配项时忽略模式于字符串的大小写</li><li>m：表示<code>多行(multiline)</code>模式，即在到达一行文本末尾时还会继续查找下一行中舒服存在与模式匹配的项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局模式</span></span><br><span class="line"><span class="keyword">const</span> pattern1 = <span class="regexp">/a/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不区分大小写模式</span></span><br><span class="line"><span class="keyword">const</span> pattern2 = <span class="regexp">/a/i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行模式</span></span><br><span class="line"><span class="keyword">const</span> patterb3 = <span class="regexp">/a/m</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式模式">正则表达式模式</h2><h3 id="方括号">方括号</h3><table><thead><tr><th>表达式</th><th>模式</th></tr></thead><tbody><tr><td><code>[abc]</code></td><td>查找方括号之间的任何字符</td></tr><tr><td><code>[^abc]</code></td><td>查找任何不在方括号之间发字符</td></tr><tr><td><code>[0-9]</code></td><td>查找任何从<code>0</code>至<code>9</code>的数字</td></tr><tr><td><code>[a-z]</code></td><td>查找任何从小写a到小写z的字符</td></tr><tr><td><code>[A-Z]</code></td><td>查找任何从大写A到大写Z的字符</td></tr><tr><td><code>[A-z]</code></td><td>查找任何从大写A到小写z的字符</td></tr><tr><td><code>[adgk]</code></td><td>查找给定集合的任何字符</td></tr><tr><td><code>[^adgk]</code></td><td>查找给定集合外的任何字符</td></tr><tr><td>`(a</td><td>b</td></tr></tbody></table><h3 id="元字符">元字符</h3><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><code>-</code></td><td>查找单个字符，除了换行和行结束符</td></tr><tr><td><code>\w</code></td><td>查找数字、字母及下划线</td></tr><tr><td><code>\W</code></td><td>查找非单词字符</td></tr><tr><td><code>\d</code></td><td>查找数字</td></tr><tr><td><code>\D</code></td><td>查找非数字字符</td></tr><tr><td><code>\s</code></td><td>查找空白字符</td></tr><tr><td><code>\S</code></td><td>查找非空白字符</td></tr><tr><td><code>\b</code></td><td>匹配单词边界</td></tr><tr><td><code>\B</code></td><td>匹配非单词边界</td></tr><tr><td><code>\0</code></td><td>查找<code>NULL</code>字符</td></tr><tr><td><code>\n</code></td><td>查找换行符</td></tr><tr><td><code>\f</code></td><td>查找换页符</td></tr><tr><td><code>\r</code></td><td>查找回车符</td></tr><tr><td><code>\t</code></td><td>查找制表符</td></tr><tr><td><code>\v</code></td><td>查找垂直制表符</td></tr><tr><td><code>\xxx</code></td><td>查找以八进制数 xxx 规定的字符</td></tr><tr><td><code>\xdd</code></td><td>查找十六进制数 dd 规定的字符</td></tr><tr><td><code>\uxxxx</code></td><td>查找十六进制数 xxx 规定的 Unicode 字符</td></tr></tbody></table><h3 id="量词">量词</h3><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td><code>n+</code></td><td>匹配任何包含至少一个n的字符串</td></tr><tr><td><code>n*</code></td><td>匹配任何包含零个或者多个n的字符串</td></tr><tr><td><code>n?</code></td><td>匹配任何包含零个或者一个n的字符串</td></tr><tr><td><code>n&#123;X&#125;</code></td><td>匹配包含X个n的序列字符串</td></tr><tr><td><code>n&#123;X,&#125;</code></td><td>X是一个正整数，前面的秘书n连续出现至少X次时匹配</td></tr><tr><td><code>n&#123;X, Y&#125;</code></td><td>X和Y为正整数，前面的n连续出现至少X次，至多出现Y次时匹配</td></tr><tr><td><code>n$</code></td><td>匹配任何结尾为n的字符串</td></tr><tr><td><code>^n</code></td><td>匹配任何开头为n的字符串</td></tr><tr><td><code>?=n</code></td><td>匹配任何其后紧接字符串n的字符串</td></tr><tr><td><code>?!n</code></td><td>匹配任何其后没有进阶指定字符串n的字符串</td></tr></tbody></table><h2 id="RegExp-实例属性">RegExp 实例属性</h2><p><code>RegExp</code> 的每个实例都具有下列属性：</p><ul><li>global：布尔值，表示是否设置了g标志</li><li>ignoreCase：布尔值，表示是否设置了i标志</li><li>lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从0算起</li><li>multiline：布尔值，表示是否设置了m标志</li><li>source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/a/g</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">global</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">ignoreCase</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">multiline</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">lastIndex</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">source</span>) <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h2 id="RegExp-对象方法">RegExp 对象方法</h2><p><code>exec()</code> 方法是为捕获组设计的，<code>exec()</code> 接收一个参数：要应用模式的字符串，返回包含第一个匹配项信息的数字，在没有匹配项的情况会返回 <code>null</code>。返回的数组虽然是<code>Array</code>实例，但包含另外两个属性：<code>index</code> 和 <code>input</code>。<code>index</code> 表示匹配项在字符串中的位置，<code>input</code> 表示应用正则表达式的字符串。在数组中，第一项是与整个模式匹配的字符串，其他项是与模式中捕获组匹配的字符串(如果模式中没有捕获组，则该数组只包含一项)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;mom and dad and bady&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/mom (and dad (and bady)?)?/gi</span></span><br><span class="line"><span class="keyword">const</span> matches = pattern.<span class="title function_">exec</span>(text)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches); <span class="comment">// [&#x27;mom and dad and bady&#x27;, &#x27;and dad and bady&#x27;, &#x27;and bady&#x27;, index: 0, input: &#x27;mom and dad and bady&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p><code>test()</code> 方法检查字符串中指定的值，他接受一个字符串参数，在模式与该参数匹配的情况下该返回 <code>true</code> 否在 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;123456789@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emailPaatern = <span class="regexp">/^\w+@\w+.[A-z0-9]&#123;2,5&#125;$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emailPaatern.<span class="title function_">test</span>(email)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>toLocaleString()</code> 和 <code>toString()</code> 方法都会返回正则表达式的字面量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;hello .*&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">toString</span>()); <span class="comment">// /hello .*/gi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">toLocaleString</span>()); <span class="comment">// /hello .*/gi</span></span><br></pre></td></tr></table></figure><h1>Function 类型</h1><p>在<code>JavaScript</code>中函数实际上是对象。每个函数都是<code>Function </code>类型的实例，而且都与其他引用类型一样具有属性和方法。</p><p><strong>函数名</strong>实际上是指向函数对象的指针，不会与某个函数绑定。</p><p>声明函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 sum 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面三种方式都可以声明一个函数，但是第三种方式不推荐使用，这种语法会导致解析两次代码(第一次是解析常规<code>ECMAScript</code>代码, 第二次是解析传入构造函数的字符串)，影响代码的性能。</p><h2 id="没有重载">没有重载</h2><p>函数名想象成为指针，可以知道<code>ECMAScript</code>实现重载是不现实的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">90</span>)) <span class="comment">// 300 = 10 + 90 + 200</span></span><br></pre></td></tr></table></figure><p>从上面代码的结果可以看到，第二次声明的sum函数覆盖了第一次声明的sum函数，因此无法实现重载。</p><h2 id="函数声明与函数表达式">函数声明与函数表达式</h2><p>函数声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  retrun a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  retrun a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的例子我们可以看到函数声明和函数表达式的区别，实际上解析器在指向环境加载数据是，对函数声明和函数表达式的操作并不一样。解析器会先读取函数声明，并使其在执行任何代码之前可用(可以访问)；至于函数表达式，则必须要等到解析器执行到它所在的代码行，才会被解释执行。这也就是为什么函数表达式的方式会出现报错的情况，解析器还没执行到函数表达式，但是已经调用函数，环境中此时没有sum函数，因此报错！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明sum函数</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="keyword">function</span> <span class="title function_">sum</span> (a, b) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这种写法不可取，在部分浏览器会报错</p></blockquote><h2 id="作为值的函数">作为值的函数</h2><p>在 <code>ECMAScript</code> 中的函数名是指向该函数的指针变量，因此函数可以作为值来传递。也就是说函数可以作为参数传递给另一个函数执行，也可以作为另一个函数的返回值返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fun, str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">90</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(num) + str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(add, <span class="string">&#x27;元&#x27;</span>) <span class="comment">// 100元</span></span><br></pre></td></tr></table></figure><blockquote><p>在使用<code>Array</code>的<code>sort()</code>方法时，使用的也是同样的原理</p></blockquote><h2 id="函数内部属性">函数内部属性</h2><p>在函数内部有两个特殊的对象：<code>arguments</code> 和 <code>this</code>。<code>arguments</code> 是一个类数组对象，它包含传入函数的所有参数。<code>arguments</code> 还有一个名叫 <code>callee</code> 的属性，该属性是一个指针，指向拥有 <code>arguments</code> 对象的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">5</span>)) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>这样写递归求解阶乘的函数的好处在于，无论函数的名称换成什么，都不影响函数的递归调用。</p><p><code>this</code> 对象与 <code>Java</code> 和 <code>C#</code> 中的 <code>this</code> 大致类似。 <code>this</code> 引用的是函数的执行环境对象(当在网页的全局作用域中调用函数时，<code> this</code> 对象引用的就是<code>window</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node中是没有window对象的 node指向 global</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>() <span class="comment">// window 默认是window调用</span></span><br><span class="line">object.<span class="property">sayName</span> = sayName</span><br><span class="line">object.<span class="title function_">sayName</span>() <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>在上面实例中，当在浏览器直接调用 <code>sayName()</code> 时，默认是由 <code>window</code> 对象调用，因此输出 <code>window</code> 对象的 <code>name</code> 属性，当把这个函数给对象 <code>object</code> 时，用 <code>object.sayName()</code> 调用该函数 此时调用者变成了 object 因此输出的 name 是 <code>object</code> 的 <code>name</code> 属性。</p><blockquote><p>注意：函数名仅仅是指向函数的指针变量，因此，在不同的环境中执行的都是<strong>同一个函数</strong></p></blockquote><p><code>ECMAScript 5</code> 也规范了另一个函数对象的属性： <code>caller</code> 。 除了 <code>Opera</code> 的早期版本不支持，其他浏览器都支持这个 <code>ECMAScript 3</code> 并没有定义属性。这个属性中保存着调用当前函数的引用，如果是在全局作用域中调用当前函数，它的值为 <code>null</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">inner</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(inner.<span class="property">caller</span>) <span class="comment">// [Function: outer] 等价于 arguments.callee.caller</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>()</span><br></pre></td></tr></table></figure><h2 id="函数属性和方法">函数属性和方法</h2><p><code>ECMAScript</code> 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性： <code>length</code> 和 <code>prototype</code> 。</p><p><code>length</code> 属性表示函数希望接收的命名参数的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayName.<span class="property">length</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="property">length</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><code>prototype</code> 属性是保存它们所有实例方法的真正所在。 <code>toString()</code> 和 <code>valueOf()</code> 等方法实际上都保持在 <code>prototype</code> 名下，只不过是通过各自对象的实例访问。在创建自定义引用类型及实现继承时， <code>prototype</code> 属性的作用是极为重要的。</p><p>在 <code>ECMAScript 5</code> 中，<code>prototype</code> 属性是不可枚举，因此使用 <code>for-in</code> 无法发现</p><p>每个函数都包含两个非继承而来的方法：<code>apply()</code> 和 <code>call()</code> 。 这两个方法的用途都是在特定的作用域调用函数，实际上等于设置函数体内 <code>this</code> 对象的值。</p><p><code>apply()</code> 方法接收两个参数：一个是在其中运行的函数的作用域，另一个是参数数组(可以是 <code>Array</code> 的实例，也可以是 <code>argument</code> 对象)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">applySum1</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// node中为 global 浏览器中为 window</span></span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">applySum2</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [num1, num2])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applySum1</span>(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applySum2</span>(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：传入 <code>arguments</code> 和 <strong>参数数组</strong> 效果相同，不使用 <code>arguments</code> 时，一定要将参数作为数组传入。</p></blockquote><p><code>call()</code> 和 <code>apply()</code> 方法的作用相同，它们的区别仅在于接收参数的方式不同。 <code>call()</code> 方法第一个参数是 <code>this</code> ，其余参数需要逐个传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// node中为 global 浏览器中为 window</span></span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">call</span>(<span class="variable language_">this</span>, num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callSum</span>(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><code>apply()</code> 和 <code>call()</code> 真正强大的地方是能够扩充函数的运行环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要在浏览器环境运行，指定执行环境运行函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;window&#x27;</span></span><br><span class="line">object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>() <span class="comment">// window</span></span><br><span class="line">sayName.<span class="title function_">call</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">sayName.<span class="title function_">call</span>(<span class="variable language_">window</span>) <span class="comment">// window</span></span><br><span class="line">sayName.<span class="title function_">call</span>(object) <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line">sayName.<span class="title function_">apply</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">sayName.<span class="title function_">apply</span>(<span class="variable language_">window</span>) <span class="comment">// window</span></span><br><span class="line">sayName.<span class="title function_">apply</span>(object) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><code>ECMAScript 5</code> 还定义了一个方法：<code> bind()</code> 。这个方法会创建一个函数实例， <code>this</code> 值会被绑定到传给 <code>bind()</code> 函数的值, 并返回被绑定后的函数引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要在浏览器环境运行，指定执行环境运行函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;window&#x27;</span></span><br><span class="line">object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objectSayName = sayName.<span class="title function_">bind</span>(object)</span><br><span class="line"><span class="title function_">objectSayName</span>() <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h1>基本包装类型 Number Boolean String</h1><p><code>ECMAScript</code> 提供了 <code>3</code> 个特殊的引用类型： <code>Boolean</code> 、<code>Number</code> 和 <code>String</code>.</p><h2 id="Boolean-类型-2">Boolean 类型</h2><p><code>Boolean</code> 类型是布尔值类型的引用类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Boolean 对象</span></span><br><span class="line"><span class="keyword">const</span> boolObject = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boolObject) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>基本数据类型和引用类型的布尔值的区别：</p><ul><li>typeof 操作符对基本数据类型返回 “boolean”，对引用类型返回 “object”</li><li>由于 <code>Boolean</code> 对象是 <code>Boolean</code> 类型的实例，所有使用 <code>instanceof</code> 操作符测试 <code>Boolean</code> 对象会返回 <code>true</code>， 而基本类型的布尔值返回 <code>false</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> falseObject  = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> res = falseObject &amp;&amp; <span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> falseObject) <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">false</span>) <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(falseObject <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>建议：由于 <code>Boolean</code> 的特殊性，建议不要使用 <code>Boolean</code> 对象。</p></blockquote><h2 id="Number-类型-2">Number 类型</h2><p>Number 是数值类型对应的引用类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Number 对象。</span></span><br><span class="line"><span class="keyword">const</span> numObject = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Number-类型方法">Number 类型方法</h3><p><code>toString()</code> 方法可以传递一个表示基数的参数，返回数值几进制的字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number 的 toString() 方法</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>()) <span class="comment">// &#x27;10&#x27; 十进制(默认)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)) <span class="comment">// &#x27;1010&#x27; 二进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">8</span>)) <span class="comment">// &#x27;12&#x27; 八进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">10</span>)) <span class="comment">// &#x27;10&#x27; 十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)) <span class="comment">// &#x27;a&#x27; 十六进制</span></span><br></pre></td></tr></table></figure><p><code>toFixed()</code> 方法能按照指定的效数位数返回数组的字符串表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number 的 toFixed() 方法</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// &quot;10.00&quot;</span></span><br></pre></td></tr></table></figure><p><code>toExponential()</code> 方法能够返回以指数表示法(数学中称为科学计数法)，表示的数值的字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number 的 toExponential() 方法</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toExponential</span>()) <span class="comment">// 1e+1</span></span><br></pre></td></tr></table></figure><p><code>toPrecision()</code> 方法能够返回固定位数的数值的字符串表示，方法接收一个参数：表示数值的所有数的位数(不包括指数部分)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number 的 toPrecision() 方法</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toPrecision</span>(<span class="number">1</span>)) <span class="comment">// 1e+2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toPrecision</span>(<span class="number">2</span>)) <span class="comment">// 99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toPrecision</span>(<span class="number">3</span>)) <span class="comment">// 99.0</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>toPrecision()</code> 方法可以表现 1 到 21 为小数，不同的浏览器能现实的范围可能不同。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numObject  = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> numObject) <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">10</span>) <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numObject <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="String-类型-2">String 类型</h2><p>String 类型是字符串对象的包装类。每个 String 类型的实例都有一个 length 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 String 对象</span></span><br><span class="line"><span class="keyword">const</span> strObject = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符方法">字符方法</h3><p><code>charAt()</code> 和 <code>charCodeAt()</code> 方法用于访问字符串中特定字符。这个两个方法都接收一个参数：需要访问的字符的索引。 <code>charAt()</code> 方法以单字符串的形式返回指定位置的字符(<code>ECMAScript</code> 中没有字符类型)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>)) <span class="comment">// e 返回字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>)) <span class="comment">// 101 返回字符编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">1</span>]) <span class="comment">// e</span></span><br></pre></td></tr></table></figure><h3 id="字符串操作方法">字符串操作方法</h3><p><code>concat()</code> 方法用于将一或多个字符串拼接起来,参数：一个或多个字符串，返回拼接后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">let</span> concatStr = str.<span class="title function_">concat</span>(<span class="string">&quot; world！&quot;</span>) <span class="comment">// 等价于 hello + world！</span></span><br><span class="line"><span class="comment">// 或者使用 let concatStr = str.concat(&quot; world&quot;, &quot;！&quot;) 等价于 hello + world + ！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(concatStr) <span class="comment">// hello world！</span></span><br></pre></td></tr></table></figure><p><code>slice()</code>、 <code>substr()</code> 、 <code>substring()</code> 方法会返回被操作组非常的一个子字符串。接收1~2两个参数：第一个参数指定子字符串的开始位置，第二个参数(可选参数)表示子字符串到哪里结束。 <code>slice()</code> 和 <code>substring()</code> 的第二个参数是子字符串最后一个字符的后面的位置(不包括第二个参数的索引位置的字符)。<code>substr()</code> 方法的第二个参数是指定返回的字符个数。如果没有传递第二个参数，则到字符串结束位置为止。三个方法都不对元字符串做改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice() substr() substring() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>)) <span class="comment">// ello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>)) <span class="comment">// ello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>)) <span class="comment">// ello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">7</span>)) <span class="comment">// ello w</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">7</span>)) <span class="comment">// ello w</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">7</span>)) <span class="comment">// ello wo</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(-<span class="number">3</span>)) <span class="comment">// rld 等价于 str.slice(11 - 3)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(-<span class="number">3</span>)) <span class="comment">// hello world 等价于 str.substring(0)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(-<span class="number">3</span>)) <span class="comment">// rld 等价于 str.substr(11 - 3)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">3</span>, -<span class="number">4</span>)) <span class="comment">// lo w 等价于 str.slice(3, 11 - 4)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">3</span>, -<span class="number">4</span>)) <span class="comment">// hel 等价于 str.substring(3, 0) 将小数作为开始位置 等价于 str.substring(0, 3)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">3</span>, -<span class="number">4</span>)) <span class="comment">// &quot;&quot; 等价于 str.substr(3, 0) 返回0个字符</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>substr()</code> 目前已经被弃用，当第一个参数传递负值时， <code>slice()</code> 和  <code>substr()</code> 会自动转换为 数组长度 - 传递的值，而 <code>substring()</code> 会将负值自动转换为 <code>0</code> 。当第二个参数传递负值时，<code>slice()</code> 会将负值变为 数组长度 - 传递的值；<code>substring()</code> 会将负值转化为 <code>0</code>，并将较小的数作为开始位置，较大的数作为结束位置。<code>substr()</code> 会将负值转换为 <code>0</code>，然后返回 <code>&quot;&quot;</code>。</p></blockquote><h3 id="字符串位置方法">字符串位置方法</h3><p><code>indexOf()</code> 和 <code>lastIndexOf()</code> 方法是从字符串中搜索给定的子字符串，然后返回子字符串的位置(如果没有找到符合的子字符串，则返回 -1 )。<code>indexOf()</code> 方法从字符串的开头开始搜索，<code>lastIndexOf()</code> 方法在字符串的末尾开始搜索。</p><p><strong>参数</strong>：第一个参数是需要搜索的子字符串，第二个参数的开始搜索的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf() 和 lastIndexOf() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">6</span>)) <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">6</span>)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="trime-方法">trime() 方法</h3><p><code>ECMAScript 5</code> 为所有字符串定义了 <code>trime()</code> 方法。这个方法会创建一个字符串的副本，删除前置及后缀的所有空格，并返回处理后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trime() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;   hello world ！   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>()) <span class="comment">// hello world ！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>())<span class="comment">// hello world ！   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>()) <span class="comment">//    hello world ！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimLeft</span>())<span class="comment">//hello world ！   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimRight</span>()) <span class="comment">//   hello world ！</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：除了 <code>trime()</code> 方法外，还有 <code>trimStart()</code> 、 <code>trimLeft()</code> 方法用于去除首部/左边的空格，<code>trimEnd()</code> 、 <code>trimRight()</code> 方法用于去除尾部/右边的空格，在新的 <code>ECMAScript</code> 中，<code>trimLeft()</code> 、 <code>trimRight()</code> 方法已被弃用</p></blockquote><h3 id="字符串大小写转换方法">字符串大小写转换方法</h3><p><code>toLowerCase()</code> 、 <code>toLocaleLowerCase()</code>  方法可以将字符串转换为小写， <code>toUpperCase()</code> 、 <code>toLocaleUpperCase()</code> 方法可以将字符串转换为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toLowerCase() toLocaleLowerCase() toUpperCase() toLocaleUpperCase() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello World !&#x27;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>()) <span class="comment">// hello world !</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>()) <span class="comment">// HELLO WORLD !</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleLowerCase</span>()) <span class="comment">// hello world !</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleUpperCase</span>()) <span class="comment">// HELLO WORLD !</span></span><br></pre></td></tr></table></figure><h3 id="字符串正则匹配">字符串正则匹配</h3><p><code>match()</code> 方法可以用于字符串的正则匹配，<strong>参数</strong>：正则表达式 或者 <code>RegExp</code> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// match() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;cat, bat, sat, fat&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/.at/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches.<span class="property">index</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>]) <span class="comment">// cat</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches.<span class="property">lastIndex</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>search()</code> 方法可以返回匹配项的索引，<strong>参数</strong>: 正则表达式，<code>RegExp</code> 对象或字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// search() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;cat, bat, sat, fat&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/at/</span></span><br><span class="line"><span class="keyword">let</span> searchIndex = text.<span class="title function_">search</span>(pattern)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(searchIndex) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>replace()</code> 方法和 <code>replaceAll()</code> 方法可以替换字符串匹配项。<strong>参数</strong>：第一个参数为字符串或者正则表达式，第二个参数为需要替换的字符，或者是一个函数。两个方法的区别在于 <code>replace()</code> 仅会替换第一个符合的字符，<code>replaceAll()</code> 会进行全局替换，替换所有符合条件的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace() 和 replaceAll() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;cat, bat, sat, fat&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reText1 = text.<span class="title function_">replace</span>(<span class="string">&#x27;at&#x27;</span>, <span class="string">&#x27;ut&#x27;</span>) <span class="comment">// 替换第一次出现的符合字符</span></span><br><span class="line"><span class="keyword">let</span> reText2 = text.<span class="title function_">replaceAll</span>(<span class="string">&#x27;at&#x27;</span>, <span class="string">&#x27;ut&#x27;</span>) <span class="comment">// 替换所有符合的字符</span></span><br><span class="line"><span class="keyword">let</span> reText3 = text.<span class="title function_">replace</span>(<span class="regexp">/at/</span>, <span class="string">&#x27;ut&#x27;</span>) <span class="comment">// 替换第一次出现的匹配字符</span></span><br><span class="line"><span class="keyword">let</span> reText4 = text.<span class="title function_">replace</span>(<span class="regexp">/at/g</span>, <span class="string">&#x27;ut&#x27;</span>) <span class="comment">// 替换所有匹配的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reText1) <span class="comment">// cut, bat, sat, fat</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reText2) <span class="comment">// cut, but, sut, fut</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reText3) <span class="comment">// cut, bat, sat, fat</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reText4) <span class="comment">// cut, but, sut, fut</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace() 方法传递函数的使用,实现HTML转义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlEscape</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> text.<span class="title function_">replce</span>(<span class="regexp">/[&lt;&gt;&quot;&amp;]/g</span>, <span class="function">(<span class="params">match, pos, originalText</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(match)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;lt&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;gt&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;amp&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;\&quot;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>split()</code> 方法可以指定分隔符将一个字符串分隔成多个子字符串，并将结果放在一个数值中。参数：第一个参数是分隔符(既可以是字符串又可以是正则表达式)，第二个参数为可选参数，用于指定数组的大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// split() 方法的使用</span></span><br><span class="line"><span class="keyword">const</span> names = <span class="string">&#x27;zs,ls,ww,zs,eg&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name1 = names.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> name2 = names.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> name3 = names.<span class="title function_">split</span>(<span class="regexp">/[^\,]+/</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;, &#x27;zs&#x27;, &#x27;eg&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2) <span class="comment">// [ &#x27;zs&#x27;, &#x27;ls&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name3) <span class="comment">// [ &#x27;&#x27;, &#x27;,&#x27;, &#x27;,&#x27;, &#x27;,&#x27;, &#x27;,&#x27;, &#x27;&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="localCompare-方法">localCompare() 方法</h3><p><code>localCompare()</code> 能够实现两个字符串的比较，返回值有如下情况：</p><ul><li>如果字符串在字母表中应该排在字符串参数之前，则返回应一个负数(大多数情况下是-1)</li><li>如果字符串等于字符串参数，则返回 0</li><li>如果字符串在字母表中应该排在字符串参数之后，则返回一个正数(大多数情况下是1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// localCompare() 方法的使用</span></span><br><span class="line"><span class="keyword">const</span> names = <span class="string">&#x27;lx&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">localeCompare</span>(<span class="string">&#x27;ds&#x27;</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">localeCompare</span>(<span class="string">&#x27;lx&#x27;</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">localeCompare</span>(<span class="string">&#x27;zs&#x27;</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你在疑惑为什么<strong>基本数据类型</strong>拥有<strong>包装类</strong>的方法，那么非常好，下面将给你展示原理：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> s2 = str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 第二行实际执行</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">s2 = s.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">s = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h1>单体内置对象</h1><p>开发人员不需要显示的实例化内置对象，因为它们在执行时已经实例化了。内置对象主要包括： <code>Object</code> 、 <code>Array</code> 、 <code>String</code> 、 <code>Global</code> 、 <code>Math。</code></p><h2 id="Global-对象">Global 对象</h2><p><code>Global</code> 对象是全局对象，在 <code>ECMAScript</code> 中的 <code>Global</code> 对象在某种意义上是作为一个终极对象(兜底的对象)的。任何不属于其他对象的属性和方法都是属于 <code>Global</code> 对象的属性和方法。实际上，全局变量和全局函数，所有在全局作用域定义的属性和方法都是 <code>Global</code> 对象的属性。 <code>isNaN()</code> 、 <code>isFinite()</code> 、 <code>parserInt()</code> 以及 <code>parserFloat()</code> 都是 <code>Global</code> 对象的方法。</p><h3 id="URI-编码方法">URI 编码方法</h3><p><code>Global</code> 对象的 <code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 方法可以对 <code>URI(Uniform Resource Identifiers， 通用资源标识符)</code> 进行编码，以便可以发送给浏览器(有效的URI不能包含某些字符)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// encodeURI() 和 encodeURIComponent() 的使用</span></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(uri)) <span class="comment">// https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(uri)) <span class="comment">// https%3A%2F%2Fwww.paddlepaddle.org.cn%2Ftutorials%2Fprojectdetail%2F3465990</span></span><br></pre></td></tr></table></figure><p><code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 的区别在于 <code>encodeURI()</code> 只会对空格进行编码，<code>encodeURIComponent()</code>会对冒号、正斜杠、问号和井字号进行编码。</p><blockquote><p>tips:  <code>URL</code> 和 <code>URI</code> 的区别<br><code>URL(Uniform Resource Locator)</code> 是全球资源定位符的缩写， <code>URL(Universal Resource Identifiers)</code> 。两者的区别在于： <code>URL</code> 是由 协议 + 主机IP + 端口 + 资源地址构成， <code>URI</code> 是由 访问资源的机制 + 存放资源的主机名 + 资源名称构成。简单的来说， <code>URL</code> 的 <code>URI</code> 的一个子集。</p></blockquote><p>分别对应于 <code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 的两个解码方法是： <code>decodeURI()</code> 和 <code>decodeURIComponent()</code> 。 <code>decodeURI()</code> 只能对 <code>encodeURI()</code> 进行解码，对应的 <code>decodeURIComponent()</code> 只能对 <code>encodeURIComponent()</code> 进行解码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decodeURI() 和 decodeURIComponent() 的使用</span></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990&quot;</span></span><br><span class="line"><span class="keyword">let</span> encodeUri =  <span class="built_in">encodeURI</span>(uri) <span class="comment">// https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990</span></span><br><span class="line"><span class="keyword">let</span> encodeUriCom = <span class="built_in">encodeURIComponent</span>(uri) <span class="comment">// https%3A%2F%2Fwww.paddlepaddle.org.cn%2Ftutorials%2Fprojectdetail%2F3465990</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(encodeUri)) <span class="comment">// https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(encodeUriCom)) <span class="comment">// https://www.paddlepaddle.org.cn/tutorials/projectdetail/3465990</span></span><br></pre></td></tr></table></figure><blockquote><p><code>encodeURI()</code> 、 <code>encodeURIComponent()</code> 、 <code>decodeURI()</code> 、 <code>decodeURIComponent()</code>  用于替代以及弃用的 <code>escape()</code> 和 <code>unespace()</code> 。</p></blockquote><h3 id="eval-方法">eval()  方法</h3><p><code>eval()</code> 是 <code>ECMAScript</code> 中最强大的方法，<code>eval()</code>  像是一个完整的 <code>ECMAscript</code> 解析器，参数为： 需要执行的 <code>ECMAscript</code> 的代码字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval() 函数的使用</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;someone called you, &#x27; + name)&quot;</span>) <span class="comment">// someone called you, zs</span></span><br></pre></td></tr></table></figure><h3 id="Global-对象的属性">Global 对象的属性</h3><p><code>Global</code> 对象包含的属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>undefined</code></td><td>特殊值</td></tr><tr><td><code>NaN</code></td><td>特殊值</td></tr><tr><td><code>Infunity</code></td><td>特殊值</td></tr><tr><td><code>Object</code></td><td>构造函数</td></tr><tr><td><code>Array</code></td><td>构造函数</td></tr><tr><td><code>Function</code></td><td>构造函数</td></tr><tr><td><code>Boolean</code></td><td>构造函数</td></tr><tr><td><code>String</code></td><td>构造函数</td></tr><tr><td><code>Number</code></td><td>构造函数</td></tr><tr><td><code>Date</code></td><td>构造函数</td></tr><tr><td><code>RegExp</code></td><td>构造函数</td></tr><tr><td><code>Error</code></td><td>构造函数</td></tr><tr><td><code>EvalError</code></td><td>构造函数</td></tr><tr><td><code>RangeError</code></td><td>构造函数</td></tr><tr><td><code>ReferenceError</code></td><td>构造函数</td></tr><tr><td><code>SyntaxError</code></td><td>构造函数</td></tr><tr><td><code>TypeError</code></td><td>构造函数</td></tr><tr><td><code>URIError</code></td><td>构造函数</td></tr></tbody></table><h3 id="windows-对象">windows 对象</h3><p><code>ECMAScript</code> 虽然没有指出如何直接访问 <code>Global</code> 对象，但 <code>Web</code> 浏览器都是将这个全局对象作为 <code>window</code> 对象的一部分加以实现。因此，全局作用域中声明的所有变量和函数，都成为了 <code>window</code> 对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window 对象</span></span><br><span class="line">val name = <span class="string">&#x27;zs&#x27;</span> <span class="comment">// </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">sayName</span>() <span class="comment">// zs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Global 对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">global</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">global</span>())</span><br></pre></td></tr></table></figure><h2 id="Math-对象">Math 对象</h2><p><code>ECMAScript</code> 提供了保存数学公式和信息的对象—— <code>Math</code> 对象。</p><h3 id="Math-对象属性">Math 对象属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>Math.E</code></td><td>自然对数的底数，即常量<code>e</code>的值</td></tr><tr><td><code>Marh.LN10</code></td><td><code>10</code>的自然对数</td></tr><tr><td><code>Math.LN2</code></td><td><code>2</code>的自然对数</td></tr><tr><td><code>Math.LOG2E</code></td><td>以<code>2</code>为底<code>e</code>的对数</td></tr><tr><td><code>Math.LOG10E</code></td><td>以<code>10</code>为底<code>e</code>的对数</td></tr><tr><td><code>Math.PI</code></td><td><code>Π</code> 圆周率的值</td></tr><tr><td><code>Math.SQRT1_2</code></td><td><code>1/2</code>的平方根(<code>2</code>的平方根的倒数)</td></tr><tr><td><code>Math.SQRT2</code></td><td><code>2</code>的平方根</td></tr></tbody></table><h3 id="min-和-max-方法">min() 和 max() 方法</h3><p><code>min()</code> 和 <code>max()</code> 方法用于确定数值中的最小值和最大值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// min() 和 max() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> maxNum = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(maxNum) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">let</span> minNum = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minNum) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>获得数组最大值可以使用 <code>Math.max.apply(Math, values)</code>，这种做法的关键在于：把 <code>Math</code> 对象作为 <code>apply()</code> 的第一个参数，保证 <code>this</code> 的指向 <code>Math</code> ，然后将数值传入第二个参数(<code>apply()</code> 的第二参数必须为数组)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Math.max() 获得数值最大值</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arrayMax = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, array)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayMax) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">let</span> arrayMin = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, array)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayMin) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="舍入方法">舍入方法</h3><p><strong>舍入方法</strong>：</p><ul><li><code>Math.ceil()</code> 执行向上舍入(向上取整)</li><li><code>Math.floor()</code> 执行向下舍入(向下取整)</li><li><code>Math.round()</code> 执行四舍五入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math.ceil()  Math.floor() Math.round() 方法的使用</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">22.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num)) <span class="comment">// 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num)) <span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num)) <span class="comment">// 23</span></span><br></pre></td></tr></table></figure><h3 id="random-方法">random() 方法</h3><p>Math.random() 方法返回介于 0 和 1 之间的随机数。不包括 0 和 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得某个范围内的随机数 val = Math.floor(Math.random() * 可能的值的数量 + 第一个可能的值)</span></span><br><span class="line"><span class="comment">// 获取 1 - 10 的随机数</span></span><br><span class="line"><span class="keyword">let</span> randomNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>( <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(randomNum) <span class="comment">// 10, 8, 5, 5, 4, 8, 6</span></span><br></pre></td></tr></table></figure><h3 id="其他方法">其他方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>Math.abs(num)</code></td><td>返回 <code>num</code> 的绝对值</td></tr><tr><td><code>Math.exp(num)</code></td><td>返回 <code>Math.E</code> 的 <code>num</code> 次幂</td></tr><tr><td><code>Math.log(num)</code></td><td>返回 num 的自然对数</td></tr><tr><td><code>Math.pow(num, power)</code></td><td>返回 <code>num</code> 的 <code>power</code> 次幂</td></tr><tr><td><code>Math.sqrt(num)</code></td><td>返回 <code>num</code> 的平方根</td></tr><tr><td><code>Math.acos(x)</code></td><td>返回 <code>x</code> 的反余弦值</td></tr><tr><td><code>Math.asin(x)</code></td><td>返回 <code>x</code> 的反正弦值</td></tr><tr><td><code>Math.atan(x)</code></td><td>返回 <code>x</code> 的反正切值</td></tr><tr><td><code>Math.atan2(y, x)</code></td><td>返回 <code>y/x</code> 的反正切值</td></tr><tr><td><code>Math.cos(x)</code></td><td>返回 <code>x</code> 的余弦值</td></tr><tr><td><code>Math.sin(x)</code></td><td>返回 <code>x</code> 的正弦值</td></tr><tr><td><code>Math.tan(x)</code></td><td>返回 <code>x</code> 的正切值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路(三)变量、作用域和内存</title>
      <link href="/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%B8%89)%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98/"/>
      <url>/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%B8%89)%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1>基本类型和引用类型的变量</h1><p><strong>在JavaScript中变量可能包含两种不同类型的值：基本类型变量和引用类型变量。</strong></p><blockquote><p>基本数据类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code></p><p>引用数据类型：<code>Object</code></p></blockquote><h2 id="传递参数">传递参数</h2><p>在JavaScript中所有函数的参数传递都是按值传递的，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量引用。</p><p><strong>基本数据类型</strong>：参数传递是将基本数据类型的变量的值复制后传递到函数中</p><p><strong>引用数据类型</strong>：参数传递为将引用数据类型的变量的地址传递到函数中</p><blockquote><p>注意：函数中的参数是局部变量</p></blockquote><h2 id="执行环境及作用域">执行环境及作用域</h2><p><strong>执行环境</strong>是JavaScript中最为重要的概念。执行环境定义了变量和函数有权访问的其他数据，决定了它们各自的行为。</p><blockquote><p>注意：在web浏览器中，全局执行环境被认为是window对象。</p><p>每个函数都有自己的执行环境。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局执行环境</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span> <span class="comment">// num1的作用域在全局执行环境</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeNum1</span>(<span class="params"></span>) &#123; <span class="comment">// changeNum1的执行环境,可以访问全局执行环境的变量和函数</span></span><br><span class="line">  <span class="keyword">let</span> num2 = <span class="number">3</span>  <span class="comment">// num2的作用域在changeNum1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeNum2</span>(<span class="params"></span>) &#123; <span class="comment">// changeNum2的执行环境，可以访问全局执行环境和changeNum1的变量和函数</span></span><br><span class="line">    <span class="keyword">let</span> num3 = num1 <span class="comment">// num3的作用域在changeNum2的执行环境内</span></span><br><span class="line">    num1 = num2</span><br><span class="line">    num2 = num3</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeNum2</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeNum1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 函数的参数也视作为变量，因此它的访问规则与函数执行环境相同</p></blockquote><h2 id="延长作用域链">延长作用域链</h2><p>执行环境变量分为：<strong>全局执行环境变量</strong>和<strong>局部执行环境变量</strong></p><p>延长作用链可以通过下列两种方式实现：</p><ul><li>try-catch 语句的 catch 块</li><li>with 语句</li></ul><p>这两个语句都会在作用域链的前端添加一个变量对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with语句延长作用域链</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params"></span>)&#123; <span class="comment">// area的执行环境</span></span><br><span class="line">  <span class="keyword">let</span> qs = <span class="string">&#x27;?name=zs&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> href = <span class="string">&#x27;error&#x27;</span> <span class="comment">// area的执行环境中的href变量</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span> <span class="comment">// 用于接收完整url</span></span><br><span class="line">  <span class="title function_">with</span>(<span class="params">location</span>)&#123; <span class="comment">// 将location对象的作用域，，语句块中包含了location的所有属性和方法,主要防止使用的是area的执行环境中的href变量</span></span><br><span class="line">    url = href + qs <span class="comment">// 等价于 location.href + qs</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">area</span>()</span><br></pre></td></tr></table></figure><h2 id="块级作用域">块级作用域</h2><p>关键字 <code>var</code> 定义的变量是没有块级作用域的，在ES6语法中，关键字 <code>let</code> 和 <code>const</code> 定义的变量和常量具有块级作用域。</p><blockquote><p>注意：{…}内的代码处于一个块级作用域，典型代表为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span>(<span class="title class_">Boolean</span>) &#123; <span class="comment">// 处于if语句块的作用域</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span> <span class="comment">// 没有块级作用域,在if外也可以访问</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">456</span> <span class="comment">// 具有块级作用域，if外不能访问</span></span><br><span class="line"><span class="keyword">const</span> num3 = <span class="number">789</span> <span class="comment">// 有块级作用域，if外不能访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 789</span></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 123</span></span><br><span class="line">&gt;<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 处于for语句块的作用域</span></span><br><span class="line"> <span class="keyword">var</span> num4 = <span class="number">110</span></span><br><span class="line"> <span class="keyword">const</span> num5 = <span class="number">123</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 1 2 3 ... 9</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(num5) <span class="comment">// 123</span></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(num4) <span class="comment">// 110</span></span><br></pre></td></tr></table></figure></blockquote><h1>垃圾收集机制</h1><p>JavaScript具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。</p><p><strong>垃圾回收机制的原理：找出那些不再继续使用的变量，释放它的内存空间。垃圾收集器会按照固定时间间隔(或代码执行中预定的收集时间)，周期性的执行这一操作</strong></p><h2 id="标记清除">标记清除</h2><p>JavaScript 中最常见的垃圾收集方式是标记清除(mark-and-sweep)。</p><p>当变量进入环境则标记为<strong>进入环境</strong>，当变量离开环境时，标记为<strong>离开环境</strong>。</p><p><strong>垃圾收集器</strong>在运行的时候会给存储在内存中的变量都加上标记，并且会去掉环境中的变量以及被环境中变量引用的变量的标记，之后再被加上标记的变量视为准备删除的变量，原因在于环境中的变量以及无法访问到这个小变量，最后垃圾收集器完成内存清理工作。</p><blockquote><p>tips: 当一个数据不再有用最好将它设置为null来释放它的引用——解除引用(dereferencing)。这样可以优化内存，让页面获得更好的性能</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路 (二) 操作符</title>
      <link href="/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%BA%8C)%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2022/03/18/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%BA%8C)%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1>操作符</h1><h2 id="位操作符">位操作符</h2><h3 id="按位非-NOT">按位非(NOT)</h3><p>按位非操作符由一个波浪线(~)表示，执行按位非的结果就是返回数值的反转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">4</span> <span class="comment">// 二进制码 0000000000000000000000000000100</span></span><br><span class="line"><span class="keyword">let</span> num2 = ~num1 <span class="comment">// 二进制  1111111111111111111111111111011  反转(补码)  -(num1+1)</span></span><br><span class="line"><span class="comment">// 1111111111111111111111111111010  反码</span></span><br><span class="line"><span class="comment">// 1000000000000000000000000000101  原码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// -5 </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：正数的原码、反码、补码相同，负数在计算机中的存储为补码，补码转换为原码才可以看出负数的值，步骤为补码-(-1)-&gt;反码-(除符号位外按位反转：0为正，1为负)-&gt;原码</strong></p></blockquote><h3 id="按位与-AND">按位与(AND)</h3><p>按位与操作符由一个和号字符(&amp;)表示，它有两个操作符数</p><table><thead><tr><th style="text-align:center">第一个数值值位</th><th style="text-align:center">第二个数值的位</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按位与</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &amp; <span class="number">5</span>) <span class="comment">// 011 &amp; 101 = 001</span></span><br></pre></td></tr></table></figure><h3 id="按位或-OR">按位或(OR)</h3><p>按位或操作符由一个和号字符(|)表示，它有两个操作符数</p><table><thead><tr><th style="text-align:center">第一个数值的位</th><th style="text-align:center">第二个数值的位</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按位或</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> | <span class="number">5</span>) <span class="comment">// 011 | 101 = 111</span></span><br></pre></td></tr></table></figure><h3 id="按位异或-XOR">按位异或(XOR)</h3><p>按位异或操作符由一个和号字符(^)表示，它有两个操作符数</p><table><thead><tr><th style="text-align:center">第一个操作数值值位</th><th style="text-align:center">第二个操作数值</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按位或</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ^ <span class="number">5</span>) <span class="comment">// 011 ^ 101 = 110</span></span><br></pre></td></tr></table></figure><h3 id="左移">左移</h3><p>左移操作符由两个小于号(&lt;&lt;)表示，这个操作符会将数值的所有位向左移动指定的位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对3左位移3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt;&lt; <span class="number">3</span>) <span class="comment">// 11 &lt;&lt; 3 = 11000</span></span><br></pre></td></tr></table></figure><h3 id="右移">右移</h3><p>右移操作符由两个大于号(&gt;&gt;)表示，这个操作符会将数值的所有位向右移动指定的位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对3右位移3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">24</span> &gt;&gt; <span class="number">3</span>) <span class="comment">// 11000 &gt;&gt; 3 = 00011</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移">无符号右移</h3><p>无符号右移操作符由三个大于号(&gt;&gt;&gt;)表示，这个操作符会将数值的所有32位向右移动指定的位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对3向无符号右移3</span></span><br><span class="line"><span class="comment">// 正数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">24</span> &gt;&gt;&gt; <span class="number">3</span>) <span class="comment">// 11000 &gt;&gt; 3 = 00011</span></span><br><span class="line"><span class="comment">// 负数,32位整体右移造成数值巨大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">24</span> &gt;&gt;&gt; <span class="number">3</span>) <span class="comment">// 536870909</span></span><br></pre></td></tr></table></figure><h2 id="布尔操作符">布尔操作符</h2><p>布尔操作符有3个： 非(NOT)、与(AND)、或(OR)。</p><h3 id="逻辑非">逻辑非</h3><p>逻辑非操作符由一个叹号(!)表示，这个操作符会返回一个布尔值。逻辑非操作符首先会将它的操作数转换为布尔值再进行求反操作。</p><p>逻辑非操作符遵循下列规则：</p><ul><li>如果操作数是一个对象，返回 <code>false</code></li><li>如果操作数是一个空字符串，返回 <code>true</code></li><li>如果操作数是一个非空字符串，返回 <code>false</code></li><li>如果操作数是数值 0, 返回 <code>true</code></li><li>如果操作数是任意非 0 数值 (包括<code>Infinity</code>), 返回 <code>false</code></li><li>如果操作数是 <code>null</code>,返回 <code>true</code></li><li>如果操作数是 <code>NaN</code>,返回 <code>true</code></li><li>如果操作数是 <code>undefined</code>,返回 <code>true</code></li></ul><h3 id="逻辑与">逻辑与</h3><p>逻辑与由两个和号(&amp;&amp;)表示，有两个操作数。</p><table><thead><tr><th style="text-align:center">第一个操作数值值位</th><th style="text-align:center">第二个操作数值</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>true</code></td></tr><tr><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>false</code></td></tr></tbody></table><p>它遵循下列规则：</p><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，则只有在第一个操作数的求值结果为 <code>true</code> 的情况下才会返回该对象</li><li>如果两个操作数都是对象，则返回第二个操作数</li><li>如果有有一个操作数是 <code>null</code>，则返回 <code>null</code></li><li>如果有有一个操作数是 <code>NaN</code>，则返回 <code>NaN</code></li><li>如果有有一个操作数是 <code>undefined</code>，则返回 <code>undefined</code></li></ul><h3 id="逻辑或">逻辑或</h3><p>逻辑或由两个和号(||)表示，有两个操作数。</p><table><thead><tr><th style="text-align:center">第一个操作数值值位</th><th style="text-align:center">第二个操作数值</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>true</code></td></tr><tr><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>true</code></td></tr><tr><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>true</code></td><td style="text-align:center"><code>true</code></td></tr><tr><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>false</code></td></tr></tbody></table><p>它遵循下列规则：</p><ul><li>如果第一个操作数是对象，则返回第一个操作数</li><li>如果第一个操作数的求值结果为false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果有有两个操作数是 <code>null</code>，则返回 <code>null</code></li><li>如果有有两个操作数是 <code>NaN</code>，则返回 <code>NaN</code></li><li>如果有有两个操作数是 <code>undefined</code>，则返回 <code>undefined</code></li></ul><h3 id="关系操作符">关系操作符</h3><p>小于(&lt;)、大于(&gt;)、小于等于(&lt;=)、大于等于(&gt;=)都是关系操作符，用于两个值比较，返回一个布尔值。</p><p>它遵循以下规则：</p><ul><li>如果两个操作数都是数值、则执行数值比较</li><li>如果两个操作符都是字符串，则比较两个字符串对象的字符编码值</li><li>如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值比较</li><li>如果一个操作数是对象，则调用这个对象的<code>valueOf()</code>方法，用得到的结果按照前面的规则执行比较。如果对象没有<code>valueOf()</code>方法，则调用<code>toString()</code>方法，并得到结果根据前面的规则执行比较</li><li>如果一个操作数是布尔值，则先将其转换为数值，然后进行比较</li></ul><h3 id="相等操作符">相等操作符</h3><p>相等(==)表示如果两个操作数相等，则返回<code>true</code>。而不相等(!=)表示如果两个操作数不相等，则返回<code>false</code>。这两个操作符都会先转换操作数(强制类型转换)，再进行比较。</p><p>它遵循以下基本规则：</p><ul><li>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值(<code>false</code> -&gt; 0， <code>true</code> -&gt; 1)</li><li>如果一个操作数是字符串，另一个操作数是数值，比较相等性之前先将字符串转换为数值</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的<code>valueOf()</code>方法，用得到的基本数值型按照前面的规则进行比较</li></ul><p>操作数在比较时要遵循以下规则：</p><ul><li>要比较相等性之前，不能将<code>null</code>和<code>undefined</code>转换为其他任何值</li><li>如果有一个操作数是NaN，则相等操作符返回<code>false</code>，不相等返回<code>true</code>。<strong>提示：即使两个操作数都是NaN，相等操作符返回<code>false</code></strong></li><li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<code>true</code>，否在，返回<code>false</code></li></ul><blockquote><p><strong>注意：全等操作符(===)和不全等(!==)操作符比较的是不转换之前的操作数</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习之路 (一) 基本数据类型</title>
      <link href="/2022/03/17/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%B8%80)%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/17/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(%E4%B8%80)%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1>基本数据类型</h1><h2 id="五种基本数据类型：">五种基本数据类型：</h2><ul><li><strong>Undefined</strong></li><li><strong>Null</strong></li><li><strong>Boolean</strong></li><li><strong>Number</strong></li><li><strong>String</strong></li></ul><h2 id="复杂数据类型">复杂数据类型</h2><ul><li><strong>Object</strong></li></ul><h2 id="typeof-操作符">typeof 操作符</h2><ul><li><strong>undefined</strong> —— 这个值未定义</li><li><strong>boolean</strong> —— 这个值是布尔值</li><li><strong>string</strong> —— 这个值是字符串</li><li><strong>number</strong> —— 这个值是数值</li><li><strong>object</strong> —— 这个是值是对象或<code>null</code></li><li><strong>function</strong> —— 这个值是函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof可以用来检测变量的数据类型，typeof并不是函数，</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str) <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="number">123</span>)) <span class="comment">// number， ()可以省略</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// object 被认为是空的对象引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> /[a-z]*<span class="regexp">/) /</span><span class="regexp">/ function(Safair5、Chrome7)/</span>object</span><br></pre></td></tr></table></figure><h2 id="Undefined-类型">Undefined 类型</h2><p><strong>Undefined</strong>类型只有<code>undefined</code>一个值。在var申明变量未初始化时变量的值为<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">let</span> message</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message == <span class="literal">undefined</span>) <span class="comment">// `true`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// 未定义，值不为undefined，而是报错</span></span><br></pre></td></tr></table></figure><h2 id="Null类型">Null类型</h2><p><strong>Null</strong>类型只有<code>null</code>一个值。<code>null</code>值表示一个空对象指针。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>实际上，<code>undefined</code>值是派生自<code>null</code>值的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// `true`</span></span><br></pre></td></tr></table></figure><h2 id="Boolean-类型">Boolean 类型</h2><p><strong>Boolean</strong>类型只有两个字面值：<code>true</code>和<code>false</code>。</p><p><strong>注：<code>true</code>和<code>false</code>区分大小写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可将值转换为Boolean类型</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> messageAsBoolean = <span class="title class_">Boolean</span>(message) <span class="comment">// `true`</span></span><br></pre></td></tr></table></figure><h3 id="转换规则">转换规则</h3><table><thead><tr><th>数据类型</th><th>转换为<code>true</code>的值</th><th>转换为<code>false</code>的值</th></tr></thead><tbody><tr><td>Boolean</td><td><code>true</code></td><td><code>false</code></td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”(空字符串)</td></tr><tr><td>Number</td><td>任何非零数值(包括无穷大)</td><td>0和<code>NaN</code></td></tr><tr><td>Object</td><td>任何对象</td><td><code>null </code></td></tr><tr><td>Undefined</td><td></td><td><code>undefined </code></td></tr></tbody></table><h2 id="Number-类型">Number 类型</h2><p><strong>Number</strong> 类型包括整数和浮点数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">55</span> <span class="comment">// 十进制整数</span></span><br><span class="line"><span class="keyword">let</span> oNum = <span class="number">077</span> <span class="comment">// 八进制数，以0开头</span></span><br><span class="line"><span class="keyword">let</span> hNum = <span class="number">0xA</span> <span class="comment">// 十六进制数，以0x开头</span></span><br><span class="line"><span class="keyword">let</span> fNum = <span class="number">3.3</span> <span class="comment">// 浮点数</span></span><br><span class="line"><span class="keyword">let</span> fNum2 = <span class="number">3.3e7</span> <span class="comment">// 3.3*10^7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>) <span class="comment">//5e-324</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>) <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="comment">// 超过JS数组范围哦的值会被转换为 +Infinity 或者 Infinity</span></span><br><span class="line"><span class="comment">// 通过isFinite()函数可以判断数是否在JS范围内</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)) <span class="comment">// `false`</span></span><br></pre></td></tr></table></figure><p><strong>NaN</strong> 是非数值(Not a number)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 涉及到NAN或者 num / 0 都会返回NAN，NAN与任何数都不相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">0</span>) <span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>) <span class="comment">// `false`</span></span><br><span class="line"><span class="comment">// isNaN 函数可以判断参数是否为数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)) <span class="comment">// `true`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// `true`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)) <span class="comment">// `false` </span></span><br></pre></td></tr></table></figure><h2 id="String-类型">String 类型</h2><p><strong>String</strong> 类型用来表示由零或者多个16位Unicode字符组成的字符序列，即字符串。由(‘’)或者(“”)表示</p><h3 id="字面量">字面量</h3><table><thead><tr><th style="text-align:center">字面量</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td>换行</td></tr><tr><td style="text-align:center">\t</td><td>制表符</td></tr><tr><td style="text-align:center">\b</td><td>空格</td></tr><tr><td style="text-align:center">\r</td><td>回车符</td></tr><tr><td style="text-align:center">\f</td><td>进纸</td></tr><tr><td style="text-align:center">\\</td><td>斜杠</td></tr><tr><td style="text-align:center">’</td><td>单引号</td></tr><tr><td style="text-align:center">&quot;</td><td>双引号</td></tr></tbody></table><h2 id="Object-类型">Object 类型</h2><p>对象其实是一组数据和功能的集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> <span class="title class_">Object</span>; <span class="comment">// 可以  但不推荐</span></span><br></pre></td></tr></table></figure><p><strong>Object</strong> 的每个实例的属性和方法。</p><ul><li><code>Constructor</code>: 保存用于创建当前对象的函数。构造函数(constructor)就是 <code>Object()</code></li><li><code>hasOwnProperty(propertName)</code>: 用于检查给定的属性在当前对象实例中(而不是在实例的原型中)是否存在。参数的属性名(propertName)必须以字符串的形式指定。</li><li><code>isPrototypeOf(object)</code>: 用于检查给定的属性是否是另一个对象的原型</li><li><code>propertyIsEnumerable(propertName)</code>: 用于检测给定的属性是否能够使用 for-in 语句来枚举。参数的属性名<code>(propertName)</code>必须以字符串的形式指定。</li><li><code>toLocalString()</code>: 返回对象的字符串表示，该字符串与执行环境的地区对于</li><li><code>toString()</code>: 返回对象的字符串表示</li><li><code>valueOf()</code>: 返回对象的字符串、数值或者布尔值表示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/15/hello-world/"/>
      <url>/2022/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
